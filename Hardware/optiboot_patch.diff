diff --git a/optiboot/bootloaders/optiboot/Makefile b/optiboot/bootloaders/optiboot/Makefile
index 97b911c..e0a8882 100644
--- a/optiboot/bootloaders/optiboot/Makefile
+++ b/optiboot/bootloaders/optiboot/Makefile
@@ -96,7 +96,7 @@ endif
 
 STK500 = "C:\Program Files\Atmel\AVR Tools\STK500\Stk500.exe"
 STK500-1 = $(STK500) -e -d$(MCU_TARGET) -pf -vf -if$(PROGRAM)_$(TARGET).hex \
-           -lFF -LFF -f$(HFUSE)$(LFUSE) -EF8 -ms -q -cUSB -I200kHz -s -wt
+           -lFF -LFF -f$(HFUSE)$(LFUSE) -EF8 -ms -q -cUSB -I200kHz -s -wt -P /dev/tty.PL2303-000013FA
 STK500-2 = $(STK500) -d$(MCU_TARGET) -ms -q -lCF -LCF -cUSB -I200kHz -s -wt
 #
 # End of build environment code.
@@ -248,13 +248,13 @@ atmega324: $(PROGRAM)_atmega324.hex
 atmega324: $(PROGRAM)_atmega324.lst
 
 atmega324_isp: atmega324
-atmega324_isp: TARGET = atmega324p
+atmega324_isp: TARGET = atmega324
 # 512 byte boot
 atmega324_isp: HFUSE = DC
 # external clock
 atmega324_isp: LFUSE = 60
 # 2.7V brownout
-atmega324_isp: EFUSE = FD 
+atmega324_isp: EFUSE = FD
 atmega324_isp: isp
 
 atmega328: TARGET = atmega328
diff --git a/optiboot/bootloaders/optiboot/makeall b/optiboot/bootloaders/optiboot/makeall
index 931bf9f..df62b9a 100755
--- a/optiboot/bootloaders/optiboot/makeall
+++ b/optiboot/bootloaders/optiboot/makeall
@@ -17,4 +17,5 @@ make diecimila
 # These need to be built AFTER the platforms, or they'll get removed
 make atmega8
 make atmega168
+make atmega324
 make atmega328
diff --git a/optiboot/bootloaders/optiboot/optiboot.c b/optiboot/bootloaders/optiboot/optiboot.c
index d4120f4..e77ca96 100644
--- a/optiboot/bootloaders/optiboot/optiboot.c
+++ b/optiboot/bootloaders/optiboot/optiboot.c
@@ -329,7 +329,7 @@ void appStart(uint8_t rstFlags) __attribute__ ((naked));
 #if defined(__AVR_ATmega168__)
 #define RAMSTART (0x100)
 #define NRWWSTART (0x3800)
-#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega32__)
+#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega324P__) || defined(__AVR_ATmega32__)
 #define RAMSTART (0x100)
 #define NRWWSTART (0x7000)
 #elif defined (__AVR_ATmega644P__)
diff --git a/optiboot/bootloaders/optiboot/optiboot_atmega1280.hex b/optiboot/bootloaders/optiboot/optiboot_atmega1280.hex
deleted file mode 100644
index 04d137c..0000000
--- a/optiboot/bootloaders/optiboot/optiboot_atmega1280.hex
+++ /dev/null
@@ -1,35 +0,0 @@
-:020000021000EC
-:10FC0000112484B714BE81FFE8D085E08093810081
-:10FC100082E08093C00088E18093C10086E08093F9
-:10FC2000C20080E18093C4008EE0C1D0279A86E0B4
-:10FC300020E33CEF91E0309385002093840096BB55
-:10FC4000B09BFECF1F9AA8958150A9F7EE24FF2400
-:10FC5000BB24B394A5E0CA2EF1E1DF2E9CD0813401
-:10FC600061F499D0082FA9D0023841F1013811F47C
-:10FC700085E001C083E087D083C0823411F484E141
-:10FC800003C0853419F485E0A0D07AC0853591F49D
-:10FC900082D0082F10E07FD0E82EFF24FE2CEE2427
-:10FCA000E02AF12A8F2D881F8827881F8BBFEE0C32
-:10FCB000FF1C65C0863521F484E087D080E0DBCF6F
-:10FCC000843609F042C067D066D0082F64D080E047
-:10FCD000E81680EEF80620F483E0F70187BFE89588
-:10FCE000C0E0D2E058D089930C17E1F7F0E0EF16AE
-:10FCF000F0EEFF0620F083E0F70187BFE8955DD0C6
-:10FD000007B600FCFDCFA701A0E0B2E02C9130E0E7
-:10FD100011968C91119790E0982F8827822B932B26
-:10FD20001296FA010C01B7BEE89511244E5F5F4FA1
-:10FD3000F3E0A030BF0751F7F701C7BEE89507B65B
-:10FD400000FCFDCFD7BEE8951BC0843761F423D0FB
-:10FD500022D0082F20D031D0F70187917F0113D016
-:10FD60000150D1F70DC0853731F427D08EE10BD08B
-:10FD700087E909D07FCF813511F488E018D01DD0F4
-:10FD800080E101D06BCF982F8091C00085FFFCCF20
-:10FD90009093C60008958091C00087FFFCCF8091AA
-:10FDA000C00084FD01C0A8958091C6000895E0E6DA
-:10FDB000F0E098E1908380830895EDDF803219F0C0
-:10FDC00088E0F5DFFFCF84E1DECF1F93182FE3DF5C
-:10FDD0001150E9F7F2DF1F910895282E80E0E7DF48
-:06FDE000EE27FF27099445
-:02FFFE000005FC
-:040000031000FC00ED
-:00000001FF
diff --git a/optiboot/bootloaders/optiboot/optiboot_atmega1280.lst b/optiboot/bootloaders/optiboot/optiboot_atmega1280.lst
deleted file mode 100644
index 2e7ecbd..0000000
--- a/optiboot/bootloaders/optiboot/optiboot_atmega1280.lst
+++ /dev/null
@@ -1,582 +0,0 @@
-
-optiboot_atmega1280.elf:     file format elf32-avr
-
-Sections:
-Idx Name          Size      VMA       LMA       File off  Algn
-  0 .text         000001e6  0001fc00  0001fc00  00000054  2**1
-                  CONTENTS, ALLOC, LOAD, READONLY, CODE
-  1 .version      00000002  0001fffe  0001fffe  0000023a  2**0
-                  CONTENTS, READONLY
-  2 .debug_aranges 00000028  00000000  00000000  0000023c  2**0
-                  CONTENTS, READONLY, DEBUGGING
-  3 .debug_pubnames 0000005f  00000000  00000000  00000264  2**0
-                  CONTENTS, READONLY, DEBUGGING
-  4 .debug_info   00000294  00000000  00000000  000002c3  2**0
-                  CONTENTS, READONLY, DEBUGGING
-  5 .debug_abbrev 0000016b  00000000  00000000  00000557  2**0
-                  CONTENTS, READONLY, DEBUGGING
-  6 .debug_line   0000040f  00000000  00000000  000006c2  2**0
-                  CONTENTS, READONLY, DEBUGGING
-  7 .debug_frame  00000080  00000000  00000000  00000ad4  2**2
-                  CONTENTS, READONLY, DEBUGGING
-  8 .debug_str    00000131  00000000  00000000  00000b54  2**0
-                  CONTENTS, READONLY, DEBUGGING
-  9 .debug_loc    00000256  00000000  00000000  00000c85  2**0
-                  CONTENTS, READONLY, DEBUGGING
- 10 .debug_ranges 00000078  00000000  00000000  00000edb  2**0
-                  CONTENTS, READONLY, DEBUGGING
-
-Disassembly of section .text:
-
-0001fc00 <main>:
-# define UART_SRL UBRR3L
-# define UART_UDR UDR3
-#endif
-
-/* main program starts here */
-int main(void) {
-   1fc00:	11 24       	eor	r1, r1
-#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
-  SP=RAMEND;  // This is done by hardware reset
-#endif
-
-  // Adaboot no-wait mod
-  ch = MCUSR;
-   1fc02:	84 b7       	in	r24, 0x34	; 52
-  MCUSR = 0;
-   1fc04:	14 be       	out	0x34, r1	; 52
-  if (!(ch & _BV(EXTRF))) appStart(ch);
-   1fc06:	81 ff       	sbrs	r24, 1
-   1fc08:	e8 d0       	rcall	.+464    	; 0x1fdda <appStart>
-
-#if LED_START_FLASHES > 0
-  // Set up Timer 1 for timeout counter
-  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
-   1fc0a:	85 e0       	ldi	r24, 0x05	; 5
-   1fc0c:	80 93 81 00 	sts	0x0081, r24
-  UCSRA = _BV(U2X); //Double speed mode USART
-  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
-  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
-  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
-#else
-  UART_SRA = _BV(U2X0); //Double speed mode USART0
-   1fc10:	82 e0       	ldi	r24, 0x02	; 2
-   1fc12:	80 93 c0 00 	sts	0x00C0, r24
-  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
-   1fc16:	88 e1       	ldi	r24, 0x18	; 24
-   1fc18:	80 93 c1 00 	sts	0x00C1, r24
-  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
-   1fc1c:	86 e0       	ldi	r24, 0x06	; 6
-   1fc1e:	80 93 c2 00 	sts	0x00C2, r24
-  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
-   1fc22:	80 e1       	ldi	r24, 0x10	; 16
-   1fc24:	80 93 c4 00 	sts	0x00C4, r24
-#endif
-#endif
-
-  // Set up watchdog to trigger after 500ms
-  watchdogConfig(WATCHDOG_1S);
-   1fc28:	8e e0       	ldi	r24, 0x0E	; 14
-   1fc2a:	c1 d0       	rcall	.+386    	; 0x1fdae <watchdogConfig>
-
-#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
-  /* Set LED pin as output */
-  LED_DDR |= _BV(LED);
-   1fc2c:	27 9a       	sbi	0x04, 7	; 4
-   1fc2e:	86 e0       	ldi	r24, 0x06	; 6
-}
-
-#if LED_START_FLASHES > 0
-void flash_led(uint8_t count) {
-  do {
-    TCNT1 = -(F_CPU/(1024*16));
-   1fc30:	20 e3       	ldi	r18, 0x30	; 48
-   1fc32:	3c ef       	ldi	r19, 0xFC	; 252
-    TIFR1 = _BV(TOV1);
-   1fc34:	91 e0       	ldi	r25, 0x01	; 1
-}
-
-#if LED_START_FLASHES > 0
-void flash_led(uint8_t count) {
-  do {
-    TCNT1 = -(F_CPU/(1024*16));
-   1fc36:	30 93 85 00 	sts	0x0085, r19
-   1fc3a:	20 93 84 00 	sts	0x0084, r18
-    TIFR1 = _BV(TOV1);
-   1fc3e:	96 bb       	out	0x16, r25	; 22
-    while(!(TIFR1 & _BV(TOV1)));
-   1fc40:	b0 9b       	sbis	0x16, 0	; 22
-   1fc42:	fe cf       	rjmp	.-4      	; 0x1fc40 <main+0x40>
-#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
-    LED_PORT ^= _BV(LED);
-#else
-    LED_PIN |= _BV(LED);
-   1fc44:	1f 9a       	sbi	0x03, 7	; 3
-}
-#endif
-
-// Watchdog functions. These are only safe with interrupts turned off.
-void watchdogReset() {
-  __asm__ __volatile__ (
-   1fc46:	a8 95       	wdr
-    LED_PORT ^= _BV(LED);
-#else
-    LED_PIN |= _BV(LED);
-#endif
-    watchdogReset();
-  } while (--count);
-   1fc48:	81 50       	subi	r24, 0x01	; 1
-   1fc4a:	a9 f7       	brne	.-22     	; 0x1fc36 <main+0x36>
-   1fc4c:	ee 24       	eor	r14, r14
-   1fc4e:	ff 24       	eor	r15, r15
-      ch = SPM_PAGESIZE / 2;
-      do {
-        uint16_t a;
-        a = *bufPtr++;
-        a |= (*bufPtr++) << 8;
-        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-   1fc50:	bb 24       	eor	r11, r11
-   1fc52:	b3 94       	inc	r11
-        addrPtr += 2;
-      } while (--ch);
-
-      // Write from programming buffer
-      __boot_page_write_short((uint16_t)(void*)address);
-   1fc54:	a5 e0       	ldi	r26, 0x05	; 5
-   1fc56:	ca 2e       	mov	r12, r26
-      boot_spm_busy_wait();
-
-#if defined(RWWSRE)
-      // Reenable read access to flash
-      boot_rww_enable();
-   1fc58:	f1 e1       	ldi	r31, 0x11	; 17
-   1fc5a:	df 2e       	mov	r13, r31
-#endif
-
-  /* Forever loop */
-  for (;;) {
-    /* get character from UART */
-    ch = getch();
-   1fc5c:	9c d0       	rcall	.+312    	; 0x1fd96 <getch>
-
-    if(ch == STK_GET_PARAMETER) {
-   1fc5e:	81 34       	cpi	r24, 0x41	; 65
-   1fc60:	61 f4       	brne	.+24     	; 0x1fc7a <main+0x7a>
-      unsigned char which = getch();
-   1fc62:	99 d0       	rcall	.+306    	; 0x1fd96 <getch>
-   1fc64:	08 2f       	mov	r16, r24
-      verifySpace();
-   1fc66:	a9 d0       	rcall	.+338    	; 0x1fdba <verifySpace>
-      if (which == 0x82) {
-   1fc68:	02 38       	cpi	r16, 0x82	; 130
-   1fc6a:	41 f1       	breq	.+80     	; 0x1fcbc <main+0xbc>
-	/*
-	 * Send optiboot version as "minor SW version"
-	 */
-	putch(OPTIBOOT_MINVER);
-      } else if (which == 0x81) {
-   1fc6c:	01 38       	cpi	r16, 0x81	; 129
-   1fc6e:	11 f4       	brne	.+4      	; 0x1fc74 <main+0x74>
-	  putch(OPTIBOOT_MAJVER);
-   1fc70:	85 e0       	ldi	r24, 0x05	; 5
-   1fc72:	01 c0       	rjmp	.+2      	; 0x1fc76 <main+0x76>
-      } else {
-	/*
-	 * GET PARAMETER returns a generic 0x03 reply for
-         * other parameters - enough to keep Avrdude happy
-	 */
-	putch(0x03);
-   1fc74:	83 e0       	ldi	r24, 0x03	; 3
-   1fc76:	87 d0       	rcall	.+270    	; 0x1fd86 <putch>
-   1fc78:	83 c0       	rjmp	.+262    	; 0x1fd80 <main+0x180>
-      }
-    }
-    else if(ch == STK_SET_DEVICE) {
-   1fc7a:	82 34       	cpi	r24, 0x42	; 66
-   1fc7c:	11 f4       	brne	.+4      	; 0x1fc82 <main+0x82>
-      // SET DEVICE is ignored
-      getNch(20);
-   1fc7e:	84 e1       	ldi	r24, 0x14	; 20
-   1fc80:	03 c0       	rjmp	.+6      	; 0x1fc88 <main+0x88>
-    }
-    else if(ch == STK_SET_DEVICE_EXT) {
-   1fc82:	85 34       	cpi	r24, 0x45	; 69
-   1fc84:	19 f4       	brne	.+6      	; 0x1fc8c <main+0x8c>
-      // SET DEVICE EXT is ignored
-      getNch(5);
-   1fc86:	85 e0       	ldi	r24, 0x05	; 5
-   1fc88:	a0 d0       	rcall	.+320    	; 0x1fdca <getNch>
-   1fc8a:	7a c0       	rjmp	.+244    	; 0x1fd80 <main+0x180>
-    }
-    else if(ch == STK_LOAD_ADDRESS) {
-   1fc8c:	85 35       	cpi	r24, 0x55	; 85
-   1fc8e:	91 f4       	brne	.+36     	; 0x1fcb4 <main+0xb4>
-      // LOAD ADDRESS
-      uint16_t newAddress;
-      newAddress = getch();
-   1fc90:	82 d0       	rcall	.+260    	; 0x1fd96 <getch>
-      newAddress = (newAddress & 0xff) | (getch() << 8);
-   1fc92:	08 2f       	mov	r16, r24
-   1fc94:	10 e0       	ldi	r17, 0x00	; 0
-   1fc96:	7f d0       	rcall	.+254    	; 0x1fd96 <getch>
-   1fc98:	e8 2e       	mov	r14, r24
-   1fc9a:	ff 24       	eor	r15, r15
-   1fc9c:	fe 2c       	mov	r15, r14
-   1fc9e:	ee 24       	eor	r14, r14
-   1fca0:	e0 2a       	or	r14, r16
-   1fca2:	f1 2a       	or	r15, r17
-#ifdef RAMPZ
-      // Transfer top bit to RAMPZ
-      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
-   1fca4:	8f 2d       	mov	r24, r15
-   1fca6:	88 1f       	adc	r24, r24
-   1fca8:	88 27       	eor	r24, r24
-   1fcaa:	88 1f       	adc	r24, r24
-   1fcac:	8b bf       	out	0x3b, r24	; 59
-#endif
-      newAddress += newAddress; // Convert from word address to byte address
-   1fcae:	ee 0c       	add	r14, r14
-   1fcb0:	ff 1c       	adc	r15, r15
-   1fcb2:	65 c0       	rjmp	.+202    	; 0x1fd7e <main+0x17e>
-      address = newAddress;
-      verifySpace();
-    }
-    else if(ch == STK_UNIVERSAL) {
-   1fcb4:	86 35       	cpi	r24, 0x56	; 86
-   1fcb6:	21 f4       	brne	.+8      	; 0x1fcc0 <main+0xc0>
-      // UNIVERSAL command is ignored
-      getNch(4);
-   1fcb8:	84 e0       	ldi	r24, 0x04	; 4
-   1fcba:	87 d0       	rcall	.+270    	; 0x1fdca <getNch>
-      putch(0x00);
-   1fcbc:	80 e0       	ldi	r24, 0x00	; 0
-   1fcbe:	db cf       	rjmp	.-74     	; 0x1fc76 <main+0x76>
-    }
-    /* Write memory, length is big endian and is in bytes */
-    else if(ch == STK_PROG_PAGE) {
-   1fcc0:	84 36       	cpi	r24, 0x64	; 100
-   1fcc2:	09 f0       	breq	.+2      	; 0x1fcc6 <main+0xc6>
-   1fcc4:	42 c0       	rjmp	.+132    	; 0x1fd4a <main+0x14a>
-      // PROGRAM PAGE - we support flash programming only, not EEPROM
-      uint8_t *bufPtr;
-      uint16_t addrPtr;
-
-      getch();			/* getlen() */
-   1fcc6:	67 d0       	rcall	.+206    	; 0x1fd96 <getch>
-      length = getch();
-   1fcc8:	66 d0       	rcall	.+204    	; 0x1fd96 <getch>
-   1fcca:	08 2f       	mov	r16, r24
-      getch();
-   1fccc:	64 d0       	rcall	.+200    	; 0x1fd96 <getch>
-
-      // If we are in RWW section, immediately start page erase
-      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-   1fcce:	80 e0       	ldi	r24, 0x00	; 0
-   1fcd0:	e8 16       	cp	r14, r24
-   1fcd2:	80 ee       	ldi	r24, 0xE0	; 224
-   1fcd4:	f8 06       	cpc	r15, r24
-   1fcd6:	20 f4       	brcc	.+8      	; 0x1fce0 <main+0xe0>
-   1fcd8:	83 e0       	ldi	r24, 0x03	; 3
-   1fcda:	f7 01       	movw	r30, r14
-   1fcdc:	87 bf       	out	0x37, r24	; 55
-   1fcde:	e8 95       	spm
-   1fce0:	c0 e0       	ldi	r28, 0x00	; 0
-   1fce2:	d2 e0       	ldi	r29, 0x02	; 2
-
-      // While that is going on, read in page contents
-      bufPtr = buff;
-      do *bufPtr++ = getch();
-   1fce4:	58 d0       	rcall	.+176    	; 0x1fd96 <getch>
-   1fce6:	89 93       	st	Y+, r24
-      while (--length);
-   1fce8:	0c 17       	cp	r16, r28
-   1fcea:	e1 f7       	brne	.-8      	; 0x1fce4 <main+0xe4>
-
-      // If we are in NRWW section, page erase has to be delayed until now.
-      // Todo: Take RAMPZ into account (not doing so just means that we will
-      //  treat the top of both "pages" of flash as NRWW, for a slight speed
-      //  decrease, so fixing this is not urgent.)
-      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-   1fcec:	f0 e0       	ldi	r31, 0x00	; 0
-   1fcee:	ef 16       	cp	r14, r31
-   1fcf0:	f0 ee       	ldi	r31, 0xE0	; 224
-   1fcf2:	ff 06       	cpc	r15, r31
-   1fcf4:	20 f0       	brcs	.+8      	; 0x1fcfe <main+0xfe>
-   1fcf6:	83 e0       	ldi	r24, 0x03	; 3
-   1fcf8:	f7 01       	movw	r30, r14
-   1fcfa:	87 bf       	out	0x37, r24	; 55
-   1fcfc:	e8 95       	spm
-
-      // Read command terminator, start reply
-      verifySpace();
-   1fcfe:	5d d0       	rcall	.+186    	; 0x1fdba <verifySpace>
-
-      // If only a partial page is to be programmed, the erase might not be complete.
-      // So check that here
-      boot_spm_busy_wait();
-   1fd00:	07 b6       	in	r0, 0x37	; 55
-   1fd02:	00 fc       	sbrc	r0, 0
-   1fd04:	fd cf       	rjmp	.-6      	; 0x1fd00 <main+0x100>
-   1fd06:	a7 01       	movw	r20, r14
-   1fd08:	a0 e0       	ldi	r26, 0x00	; 0
-   1fd0a:	b2 e0       	ldi	r27, 0x02	; 2
-      bufPtr = buff;
-      addrPtr = (uint16_t)(void*)address;
-      ch = SPM_PAGESIZE / 2;
-      do {
-        uint16_t a;
-        a = *bufPtr++;
-   1fd0c:	2c 91       	ld	r18, X
-   1fd0e:	30 e0       	ldi	r19, 0x00	; 0
-        a |= (*bufPtr++) << 8;
-   1fd10:	11 96       	adiw	r26, 0x01	; 1
-   1fd12:	8c 91       	ld	r24, X
-   1fd14:	11 97       	sbiw	r26, 0x01	; 1
-   1fd16:	90 e0       	ldi	r25, 0x00	; 0
-   1fd18:	98 2f       	mov	r25, r24
-   1fd1a:	88 27       	eor	r24, r24
-   1fd1c:	82 2b       	or	r24, r18
-   1fd1e:	93 2b       	or	r25, r19
-# define UART_SRL UBRR3L
-# define UART_UDR UDR3
-#endif
-
-/* main program starts here */
-int main(void) {
-   1fd20:	12 96       	adiw	r26, 0x02	; 2
-      ch = SPM_PAGESIZE / 2;
-      do {
-        uint16_t a;
-        a = *bufPtr++;
-        a |= (*bufPtr++) << 8;
-        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-   1fd22:	fa 01       	movw	r30, r20
-   1fd24:	0c 01       	movw	r0, r24
-   1fd26:	b7 be       	out	0x37, r11	; 55
-   1fd28:	e8 95       	spm
-   1fd2a:	11 24       	eor	r1, r1
-        addrPtr += 2;
-   1fd2c:	4e 5f       	subi	r20, 0xFE	; 254
-   1fd2e:	5f 4f       	sbci	r21, 0xFF	; 255
-      } while (--ch);
-   1fd30:	f3 e0       	ldi	r31, 0x03	; 3
-   1fd32:	a0 30       	cpi	r26, 0x00	; 0
-   1fd34:	bf 07       	cpc	r27, r31
-   1fd36:	51 f7       	brne	.-44     	; 0x1fd0c <main+0x10c>
-
-      // Write from programming buffer
-      __boot_page_write_short((uint16_t)(void*)address);
-   1fd38:	f7 01       	movw	r30, r14
-   1fd3a:	c7 be       	out	0x37, r12	; 55
-   1fd3c:	e8 95       	spm
-      boot_spm_busy_wait();
-   1fd3e:	07 b6       	in	r0, 0x37	; 55
-   1fd40:	00 fc       	sbrc	r0, 0
-   1fd42:	fd cf       	rjmp	.-6      	; 0x1fd3e <main+0x13e>
-
-#if defined(RWWSRE)
-      // Reenable read access to flash
-      boot_rww_enable();
-   1fd44:	d7 be       	out	0x37, r13	; 55
-   1fd46:	e8 95       	spm
-   1fd48:	1b c0       	rjmp	.+54     	; 0x1fd80 <main+0x180>
-#endif
-
-    }
-    /* Read memory block mode, length is big endian.  */
-    else if(ch == STK_READ_PAGE) {
-   1fd4a:	84 37       	cpi	r24, 0x74	; 116
-   1fd4c:	61 f4       	brne	.+24     	; 0x1fd66 <main+0x166>
-      // READ PAGE - we only read flash
-      getch();			/* getlen() */
-   1fd4e:	23 d0       	rcall	.+70     	; 0x1fd96 <getch>
-      length = getch();
-   1fd50:	22 d0       	rcall	.+68     	; 0x1fd96 <getch>
-   1fd52:	08 2f       	mov	r16, r24
-      getch();
-   1fd54:	20 d0       	rcall	.+64     	; 0x1fd96 <getch>
-
-      verifySpace();
-   1fd56:	31 d0       	rcall	.+98     	; 0x1fdba <verifySpace>
-        __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
-#else
-        // read a Flash byte and increment the address
-        __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
-#endif
-        putch(ch);
-   1fd58:	f7 01       	movw	r30, r14
-   1fd5a:	87 91       	elpm	r24, Z+
-   1fd5c:	7f 01       	movw	r14, r30
-   1fd5e:	13 d0       	rcall	.+38     	; 0x1fd86 <putch>
-      } while (--length);
-   1fd60:	01 50       	subi	r16, 0x01	; 1
-   1fd62:	d1 f7       	brne	.-12     	; 0x1fd58 <main+0x158>
-   1fd64:	0d c0       	rjmp	.+26     	; 0x1fd80 <main+0x180>
-    }
-
-    /* Get device signature bytes  */
-    else if(ch == STK_READ_SIGN) {
-   1fd66:	85 37       	cpi	r24, 0x75	; 117
-   1fd68:	31 f4       	brne	.+12     	; 0x1fd76 <main+0x176>
-      // READ SIGN - return what Avrdude wants to hear
-      verifySpace();
-   1fd6a:	27 d0       	rcall	.+78     	; 0x1fdba <verifySpace>
-      putch(SIGNATURE_0);
-   1fd6c:	8e e1       	ldi	r24, 0x1E	; 30
-   1fd6e:	0b d0       	rcall	.+22     	; 0x1fd86 <putch>
-      putch(SIGNATURE_1);
-   1fd70:	87 e9       	ldi	r24, 0x97	; 151
-   1fd72:	09 d0       	rcall	.+18     	; 0x1fd86 <putch>
-   1fd74:	7f cf       	rjmp	.-258    	; 0x1fc74 <main+0x74>
-      putch(SIGNATURE_2);
-    }
-    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
-   1fd76:	81 35       	cpi	r24, 0x51	; 81
-   1fd78:	11 f4       	brne	.+4      	; 0x1fd7e <main+0x17e>
-      // Adaboot no-wait mod
-      watchdogConfig(WATCHDOG_16MS);
-   1fd7a:	88 e0       	ldi	r24, 0x08	; 8
-   1fd7c:	18 d0       	rcall	.+48     	; 0x1fdae <watchdogConfig>
-      verifySpace();
-    }
-    else {
-      // This covers the response to commands like STK_ENTER_PROGMODE
-      verifySpace();
-   1fd7e:	1d d0       	rcall	.+58     	; 0x1fdba <verifySpace>
-    }
-    putch(STK_OK);
-   1fd80:	80 e1       	ldi	r24, 0x10	; 16
-   1fd82:	01 d0       	rcall	.+2      	; 0x1fd86 <putch>
-   1fd84:	6b cf       	rjmp	.-298    	; 0x1fc5c <main+0x5c>
-
-0001fd86 <putch>:
-  }
-}
-
-void putch(char ch) {
-   1fd86:	98 2f       	mov	r25, r24
-#ifndef SOFT_UART
-  while (!(UART_SRA & _BV(UDRE0)));
-   1fd88:	80 91 c0 00 	lds	r24, 0x00C0
-   1fd8c:	85 ff       	sbrs	r24, 5
-   1fd8e:	fc cf       	rjmp	.-8      	; 0x1fd88 <putch+0x2>
-  UART_UDR = ch;
-   1fd90:	90 93 c6 00 	sts	0x00C6, r25
-      [uartBit] "I" (UART_TX_BIT)
-    :
-      "r25"
-  );
-#endif
-}
-   1fd94:	08 95       	ret
-
-0001fd96 <getch>:
-      [uartBit] "I" (UART_RX_BIT)
-    :
-      "r25"
-);
-#else
-  while(!(UART_SRA & _BV(RXC0)))
-   1fd96:	80 91 c0 00 	lds	r24, 0x00C0
-   1fd9a:	87 ff       	sbrs	r24, 7
-   1fd9c:	fc cf       	rjmp	.-8      	; 0x1fd96 <getch>
-    ;
-  if (!(UART_SRA & _BV(FE0))) {
-   1fd9e:	80 91 c0 00 	lds	r24, 0x00C0
-   1fda2:	84 fd       	sbrc	r24, 4
-   1fda4:	01 c0       	rjmp	.+2      	; 0x1fda8 <getch+0x12>
-}
-#endif
-
-// Watchdog functions. These are only safe with interrupts turned off.
-void watchdogReset() {
-  __asm__ __volatile__ (
-   1fda6:	a8 95       	wdr
-       * don't care that an invalid char is returned...)
-       */
-    watchdogReset();
-  }
-  
-  ch = UART_UDR;
-   1fda8:	80 91 c6 00 	lds	r24, 0x00C6
-  LED_PIN |= _BV(LED);
-#endif
-#endif
-
-  return ch;
-}
-   1fdac:	08 95       	ret
-
-0001fdae <watchdogConfig>:
-    "wdr\n"
-  );
-}
-
-void watchdogConfig(uint8_t x) {
-  WDTCSR = _BV(WDCE) | _BV(WDE);
-   1fdae:	e0 e6       	ldi	r30, 0x60	; 96
-   1fdb0:	f0 e0       	ldi	r31, 0x00	; 0
-   1fdb2:	98 e1       	ldi	r25, 0x18	; 24
-   1fdb4:	90 83       	st	Z, r25
-  WDTCSR = x;
-   1fdb6:	80 83       	st	Z, r24
-}
-   1fdb8:	08 95       	ret
-
-0001fdba <verifySpace>:
-  do getch(); while (--count);
-  verifySpace();
-}
-
-void verifySpace() {
-  if (getch() != CRC_EOP) {
-   1fdba:	ed df       	rcall	.-38     	; 0x1fd96 <getch>
-   1fdbc:	80 32       	cpi	r24, 0x20	; 32
-   1fdbe:	19 f0       	breq	.+6      	; 0x1fdc6 <verifySpace+0xc>
-    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
-   1fdc0:	88 e0       	ldi	r24, 0x08	; 8
-   1fdc2:	f5 df       	rcall	.-22     	; 0x1fdae <watchdogConfig>
-   1fdc4:	ff cf       	rjmp	.-2      	; 0x1fdc4 <verifySpace+0xa>
-    while (1)			      // and busy-loop so that WD causes
-      ;				      //  a reset and app start.
-  }
-  putch(STK_INSYNC);
-   1fdc6:	84 e1       	ldi	r24, 0x14	; 20
-}
-   1fdc8:	de cf       	rjmp	.-68     	; 0x1fd86 <putch>
-
-0001fdca <getNch>:
-    ::[count] "M" (UART_B_VALUE)
-  );
-}
-#endif
-
-void getNch(uint8_t count) {
-   1fdca:	1f 93       	push	r17
-   1fdcc:	18 2f       	mov	r17, r24
-  do getch(); while (--count);
-   1fdce:	e3 df       	rcall	.-58     	; 0x1fd96 <getch>
-   1fdd0:	11 50       	subi	r17, 0x01	; 1
-   1fdd2:	e9 f7       	brne	.-6      	; 0x1fdce <getNch+0x4>
-  verifySpace();
-   1fdd4:	f2 df       	rcall	.-28     	; 0x1fdba <verifySpace>
-}
-   1fdd6:	1f 91       	pop	r17
-   1fdd8:	08 95       	ret
-
-0001fdda <appStart>:
-
-void appStart(uint8_t rstFlags) {
-  // save the reset flags in the designated register
-  //  This can be saved in a main program by putting code in .init0 (which
-  //  executes before normal c init code) to save R2 to a global variable.
-  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
-   1fdda:	28 2e       	mov	r2, r24
-
-  watchdogConfig(WATCHDOG_OFF);
-   1fddc:	80 e0       	ldi	r24, 0x00	; 0
-   1fdde:	e7 df       	rcall	.-50     	; 0x1fdae <watchdogConfig>
-  __asm__ __volatile__ (
-   1fde0:	ee 27       	eor	r30, r30
-   1fde2:	ff 27       	eor	r31, r31
-   1fde4:	09 94       	ijmp
diff --git a/optiboot/bootloaders/optiboot/optiboot_atmega328.hex b/optiboot/bootloaders/optiboot/optiboot_atmega328.hex
index 8917cb8..6e14869 100644
--- a/optiboot/bootloaders/optiboot/optiboot_atmega328.hex
+++ b/optiboot/bootloaders/optiboot/optiboot_atmega328.hex
@@ -1,33 +1,33 @@
-:107E0000112484B714BE81FFE6D085E08093810001
-:107E100082E08093C00088E18093C10086E0809377
-:107E2000C20080E18093C4008EE0BFD0259A86E036
-:107E300020E33CEF91E0309385002093840096BBD3
-:107E4000B09BFECF1D9AA8958150A9F7EE24FF2480
-:107E5000AA24A394B5E0CB2EA1E1BA2EF3E0DF2E45
-:107E600098D0813461F495D0082FA5D0023829F13B
-:107E7000013811F485E001C083E083D07FC08234F3
-:107E800011F484E103C0853419F485E09CD076C0F8
-:107E9000853579F47ED0E82EFF247BD0082F10E0C2
-:107EA000102F00270E291F29000F111F84D07801E1
-:107EB00065C0863521F484E086D080E0DECF84364C
-:107EC00009F040C066D065D0082F63D080E0E81686
-:107ED00080E7F80618F4F701D7BEE895C0E0D1E0D6
-:107EE00058D089930C17E1F7F0E0EF16F0E7FF06A2
-:107EF00018F0F701D7BEE8955ED007B600FCFDCFBD
-:107F0000A701A0E0B1E02C9130E011968C9111977F
-:107F100090E0982F8827822B932B1296FA010C0160
-:107F2000A7BEE89511244E5F5F4FF1E0A038BF0770
-:107F300051F7F701C7BEE89507B600FCFDCFB7BE05
-:107F4000E8951CC0843761F424D023D0082F21D0B9
-:107F500032D0F70185917F0114D00150D1F70EC0C6
-:107F6000853739F428D08EE10CD085E90AD08FE02E
-:107F700084CF813511F488E018D01DD080E101D084
-:107F80006FCF982F8091C00085FFFCCF9093C600E3
+:107E00000F92CDB7DEB7112484B714BE81FFE3D043
+:107E100085E08093810082E08093C00088E18093B8
+:107E2000C10086E08093C20080E18093C4008EE0B0
+:107E3000BCD0259A26E080E39CEF31E0909385004A
+:107E40008093840036BBB09BFECF1D9AA89521502D
+:107E5000A9F700E010E0EE24E394E5E0DE2EF1E186
+:107E6000CF2EA3E0FA2E95D0813469F492D0898385
+:107E7000A2D08981823819F1813811F485E001C0DE
+:107E800083E080D07CC0823411F484E103C0853467
+:107E900019F485E098D073C0853569F47AD0882EBE
+:107EA000992477D0082F10E0102F002708291929CE
+:107EB000000F111F63C0863521F484E084D080E078
+:107EC000E0CF843609F03FC064D063D0B82E61D0D3
+:107ED00080E70030180718F4F801F7BEE895812C08
+:107EE00051E0952E56D0F40181934F01BE16D1F783
+:107EF000F0E700301F0718F0F801F7BEE8955BD0F7
+:107F000007B600FCFDCFF801A0E0B1E02C9130E015
+:107F100011968C91119790E0982F8827822B932BA4
+:107F200012960C01E7BEE8951124329681E0A03844
+:107F3000B80761F7F801D7BEE89507B600FCFDCF9A
+:107F4000C7BEE8951CC0843761F423D022D0B82E78
+:107F500020D031D0F80185918F0114D0BA94D1F797
+:107F60000EC0853739F427D08EE10CD085E90AD0D0
+:107F70008FE087CF813511F488E017D01CD080E1E5
+:107F800001D071CF9091C00095FFFCCF8093C600C7
 :107F900008958091C00087FFFCCF8091C00084FDD0
 :107FA00001C0A8958091C6000895E0E6F0E098E150
 :107FB000908380830895EDDF803219F088E0F5DF4B
-:107FC000FFCF84E1DECF1F93182FE3DF1150E9F7D5
-:107FD000F2DF1F910895282E80E0E7DFEE27FF27CC
+:107FC000FFCF84E1DFCFCF93C82FE3DFC150E9F7C4
+:107FD000F2DFCF910895282E80E0E7DFEE27FF271C
 :027FE000099402
 :027FFE0000057C
 :0400000300007E007B
diff --git a/optiboot/bootloaders/optiboot/optiboot_atmega328.lst b/optiboot/bootloaders/optiboot/optiboot_atmega328.lst
index 87e56a9..846e406 100644
--- a/optiboot/bootloaders/optiboot/optiboot_atmega328.lst
+++ b/optiboot/bootloaders/optiboot/optiboot_atmega328.lst
@@ -3,27 +3,27 @@ optiboot_atmega328.elf:     file format elf32-avr
 
 Sections:
 Idx Name          Size      VMA       LMA       File off  Algn
-  0 .text         000001e2  00007e00  00007e00  00000054  2**1
+  0 .data         00000000  00800100  00007fe2  00000256  2**0
+                  CONTENTS, ALLOC, LOAD, DATA
+  1 .text         000001e2  00007e00  00007e00  00000074  2**1
                   CONTENTS, ALLOC, LOAD, READONLY, CODE
-  1 .version      00000002  00007ffe  00007ffe  00000236  2**0
+  2 .version      00000002  00007ffe  00007ffe  00000256  2**0
                   CONTENTS, READONLY
-  2 .debug_aranges 00000028  00000000  00000000  00000238  2**0
+  3 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                   CONTENTS, READONLY, DEBUGGING
-  3 .debug_pubnames 0000005f  00000000  00000000  00000260  2**0
+  4 .debug_info   00000290  00000000  00000000  00000280  2**0
                   CONTENTS, READONLY, DEBUGGING
-  4 .debug_info   00000294  00000000  00000000  000002bf  2**0
+  5 .debug_abbrev 00000176  00000000  00000000  00000510  2**0
                   CONTENTS, READONLY, DEBUGGING
-  5 .debug_abbrev 0000016b  00000000  00000000  00000553  2**0
+  6 .debug_line   00000192  00000000  00000000  00000686  2**0
                   CONTENTS, READONLY, DEBUGGING
-  6 .debug_line   00000421  00000000  00000000  000006be  2**0
+  7 .debug_frame  00000094  00000000  00000000  00000818  2**2
                   CONTENTS, READONLY, DEBUGGING
-  7 .debug_frame  00000080  00000000  00000000  00000ae0  2**2
+  8 .debug_str    00000131  00000000  00000000  000008ac  2**0
                   CONTENTS, READONLY, DEBUGGING
-  8 .debug_str    00000131  00000000  00000000  00000b60  2**0
+  9 .debug_loc    0000026e  00000000  00000000  000009dd  2**0
                   CONTENTS, READONLY, DEBUGGING
-  9 .debug_loc    00000266  00000000  00000000  00000c91  2**0
-                  CONTENTS, READONLY, DEBUGGING
- 10 .debug_ranges 00000078  00000000  00000000  00000ef7  2**0
+ 10 .debug_ranges 00000048  00000000  00000000  00000c4b  2**0
                   CONTENTS, READONLY, DEBUGGING
 
 Disassembly of section .text:
@@ -35,437 +35,443 @@ Disassembly of section .text:
 
 /* main program starts here */
 int main(void) {
-    7e00:	11 24       	eor	r1, r1
+    7e00:	0f 92       	push	r0
+    7e02:	cd b7       	in	r28, 0x3d	; 61
+    7e04:	de b7       	in	r29, 0x3e	; 62
+  //  SP points to RAMEND
+  //  r1 contains zero
+  //
+  // If not, uncomment the following instructions:
+  // cli();
+  asm volatile ("clr __zero_reg__");
+    7e06:	11 24       	eor	r1, r1
 #if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
   SP=RAMEND;  // This is done by hardware reset
 #endif
 
   // Adaboot no-wait mod
   ch = MCUSR;
-    7e02:	84 b7       	in	r24, 0x34	; 52
+    7e08:	84 b7       	in	r24, 0x34	; 52
   MCUSR = 0;
-    7e04:	14 be       	out	0x34, r1	; 52
+    7e0a:	14 be       	out	0x34, r1	; 52
   if (!(ch & _BV(EXTRF))) appStart(ch);
-    7e06:	81 ff       	sbrs	r24, 1
-    7e08:	e6 d0       	rcall	.+460    	; 0x7fd6 <appStart>
+    7e0c:	81 ff       	sbrs	r24, 1
+    7e0e:	e3 d0       	rcall	.+454    	; 0x7fd6 <appStart>
 
 #if LED_START_FLASHES > 0
   // Set up Timer 1 for timeout counter
   TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
-    7e0a:	85 e0       	ldi	r24, 0x05	; 5
-    7e0c:	80 93 81 00 	sts	0x0081, r24
+    7e10:	85 e0       	ldi	r24, 0x05	; 5
+    7e12:	80 93 81 00 	sts	0x0081, r24
   UCSRA = _BV(U2X); //Double speed mode USART
   UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
   UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
   UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
 #else
   UART_SRA = _BV(U2X0); //Double speed mode USART0
-    7e10:	82 e0       	ldi	r24, 0x02	; 2
-    7e12:	80 93 c0 00 	sts	0x00C0, r24
+    7e16:	82 e0       	ldi	r24, 0x02	; 2
+    7e18:	80 93 c0 00 	sts	0x00C0, r24
   UART_SRB = _BV(RXEN0) | _BV(TXEN0);
-    7e16:	88 e1       	ldi	r24, 0x18	; 24
-    7e18:	80 93 c1 00 	sts	0x00C1, r24
+    7e1c:	88 e1       	ldi	r24, 0x18	; 24
+    7e1e:	80 93 c1 00 	sts	0x00C1, r24
   UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
-    7e1c:	86 e0       	ldi	r24, 0x06	; 6
-    7e1e:	80 93 c2 00 	sts	0x00C2, r24
+    7e22:	86 e0       	ldi	r24, 0x06	; 6
+    7e24:	80 93 c2 00 	sts	0x00C2, r24
   UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
-    7e22:	80 e1       	ldi	r24, 0x10	; 16
-    7e24:	80 93 c4 00 	sts	0x00C4, r24
+    7e28:	80 e1       	ldi	r24, 0x10	; 16
+    7e2a:	80 93 c4 00 	sts	0x00C4, r24
 #endif
 #endif
 
   // Set up watchdog to trigger after 500ms
   watchdogConfig(WATCHDOG_1S);
-    7e28:	8e e0       	ldi	r24, 0x0E	; 14
-    7e2a:	bf d0       	rcall	.+382    	; 0x7faa <watchdogConfig>
+    7e2e:	8e e0       	ldi	r24, 0x0E	; 14
+    7e30:	bc d0       	rcall	.+376    	; 0x7faa <watchdogConfig>
 
 #if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
   /* Set LED pin as output */
   LED_DDR |= _BV(LED);
-    7e2c:	25 9a       	sbi	0x04, 5	; 4
-    7e2e:	86 e0       	ldi	r24, 0x06	; 6
+    7e32:	25 9a       	sbi	0x04, 5	; 4
+    7e34:	26 e0       	ldi	r18, 0x06	; 6
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    7e30:	20 e3       	ldi	r18, 0x30	; 48
-    7e32:	3c ef       	ldi	r19, 0xFC	; 252
+    7e36:	80 e3       	ldi	r24, 0x30	; 48
+    7e38:	9c ef       	ldi	r25, 0xFC	; 252
     TIFR1 = _BV(TOV1);
-    7e34:	91 e0       	ldi	r25, 0x01	; 1
+    7e3a:	31 e0       	ldi	r19, 0x01	; 1
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    7e36:	30 93 85 00 	sts	0x0085, r19
-    7e3a:	20 93 84 00 	sts	0x0084, r18
+    7e3c:	90 93 85 00 	sts	0x0085, r25
+    7e40:	80 93 84 00 	sts	0x0084, r24
     TIFR1 = _BV(TOV1);
-    7e3e:	96 bb       	out	0x16, r25	; 22
+    7e44:	36 bb       	out	0x16, r19	; 22
     while(!(TIFR1 & _BV(TOV1)));
-    7e40:	b0 9b       	sbis	0x16, 0	; 22
-    7e42:	fe cf       	rjmp	.-4      	; 0x7e40 <main+0x40>
+    7e46:	b0 9b       	sbis	0x16, 0	; 22
+    7e48:	fe cf       	rjmp	.-4      	; 0x7e46 <main+0x46>
 #if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
-    7e44:	1d 9a       	sbi	0x03, 5	; 3
+    7e4a:	1d 9a       	sbi	0x03, 5	; 3
 }
 #endif
 
 // Watchdog functions. These are only safe with interrupts turned off.
 void watchdogReset() {
   __asm__ __volatile__ (
-    7e46:	a8 95       	wdr
+    7e4c:	a8 95       	wdr
+    7e4e:	21 50       	subi	r18, 0x01	; 1
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
 #endif
     watchdogReset();
   } while (--count);
-    7e48:	81 50       	subi	r24, 0x01	; 1
-    7e4a:	a9 f7       	brne	.-22     	; 0x7e36 <main+0x36>
-    7e4c:	ee 24       	eor	r14, r14
-    7e4e:	ff 24       	eor	r15, r15
+    7e50:	a9 f7       	brne	.-22     	; 0x7e3c <main+0x3c>
+    7e52:	00 e0       	ldi	r16, 0x00	; 0
+    7e54:	10 e0       	ldi	r17, 0x00	; 0
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    7e50:	aa 24       	eor	r10, r10
-    7e52:	a3 94       	inc	r10
+    7e56:	ee 24       	eor	r14, r14
+    7e58:	e3 94       	inc	r14
         addrPtr += 2;
       } while (--ch);
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    7e54:	b5 e0       	ldi	r27, 0x05	; 5
-    7e56:	cb 2e       	mov	r12, r27
+    7e5a:	e5 e0       	ldi	r30, 0x05	; 5
+    7e5c:	de 2e       	mov	r13, r30
       boot_spm_busy_wait();
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    7e58:	a1 e1       	ldi	r26, 0x11	; 17
-    7e5a:	ba 2e       	mov	r11, r26
+    7e5e:	f1 e1       	ldi	r31, 0x11	; 17
+    7e60:	cf 2e       	mov	r12, r31
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    7e5c:	f3 e0       	ldi	r31, 0x03	; 3
-    7e5e:	df 2e       	mov	r13, r31
+    7e62:	a3 e0       	ldi	r26, 0x03	; 3
+    7e64:	fa 2e       	mov	r15, r26
 #endif
 
   /* Forever loop */
   for (;;) {
     /* get character from UART */
     ch = getch();
-    7e60:	98 d0       	rcall	.+304    	; 0x7f92 <getch>
+    7e66:	95 d0       	rcall	.+298    	; 0x7f92 <getch>
 
     if(ch == STK_GET_PARAMETER) {
-    7e62:	81 34       	cpi	r24, 0x41	; 65
-    7e64:	61 f4       	brne	.+24     	; 0x7e7e <main+0x7e>
+    7e68:	81 34       	cpi	r24, 0x41	; 65
+    7e6a:	69 f4       	brne	.+26     	; 0x7e86 <main+0x86>
       unsigned char which = getch();
-    7e66:	95 d0       	rcall	.+298    	; 0x7f92 <getch>
-    7e68:	08 2f       	mov	r16, r24
+    7e6c:	92 d0       	rcall	.+292    	; 0x7f92 <getch>
       verifySpace();
-    7e6a:	a5 d0       	rcall	.+330    	; 0x7fb6 <verifySpace>
+    7e6e:	89 83       	std	Y+1, r24	; 0x01
+    7e70:	a2 d0       	rcall	.+324    	; 0x7fb6 <verifySpace>
       if (which == 0x82) {
-    7e6c:	02 38       	cpi	r16, 0x82	; 130
-    7e6e:	29 f1       	breq	.+74     	; 0x7eba <main+0xba>
+    7e72:	89 81       	ldd	r24, Y+1	; 0x01
+    7e74:	82 38       	cpi	r24, 0x82	; 130
+    7e76:	19 f1       	breq	.+70     	; 0x7ebe <main+0xbe>
 	/*
 	 * Send optiboot version as "minor SW version"
 	 */
 	putch(OPTIBOOT_MINVER);
       } else if (which == 0x81) {
-    7e70:	01 38       	cpi	r16, 0x81	; 129
-    7e72:	11 f4       	brne	.+4      	; 0x7e78 <main+0x78>
+    7e78:	81 38       	cpi	r24, 0x81	; 129
+    7e7a:	11 f4       	brne	.+4      	; 0x7e80 <main+0x80>
 	  putch(OPTIBOOT_MAJVER);
-    7e74:	85 e0       	ldi	r24, 0x05	; 5
-    7e76:	01 c0       	rjmp	.+2      	; 0x7e7a <main+0x7a>
+    7e7c:	85 e0       	ldi	r24, 0x05	; 5
+    7e7e:	01 c0       	rjmp	.+2      	; 0x7e82 <main+0x82>
       } else {
 	/*
 	 * GET PARAMETER returns a generic 0x03 reply for
          * other parameters - enough to keep Avrdude happy
 	 */
 	putch(0x03);
-    7e78:	83 e0       	ldi	r24, 0x03	; 3
-    7e7a:	83 d0       	rcall	.+262    	; 0x7f82 <putch>
-    7e7c:	7f c0       	rjmp	.+254    	; 0x7f7c <main+0x17c>
+    7e80:	83 e0       	ldi	r24, 0x03	; 3
+    7e82:	80 d0       	rcall	.+256    	; 0x7f84 <putch>
+    7e84:	7c c0       	rjmp	.+248    	; 0x7f7e <main+0x17e>
       }
     }
     else if(ch == STK_SET_DEVICE) {
-    7e7e:	82 34       	cpi	r24, 0x42	; 66
-    7e80:	11 f4       	brne	.+4      	; 0x7e86 <main+0x86>
+    7e86:	82 34       	cpi	r24, 0x42	; 66
+    7e88:	11 f4       	brne	.+4      	; 0x7e8e <main+0x8e>
       // SET DEVICE is ignored
       getNch(20);
-    7e82:	84 e1       	ldi	r24, 0x14	; 20
-    7e84:	03 c0       	rjmp	.+6      	; 0x7e8c <main+0x8c>
+    7e8a:	84 e1       	ldi	r24, 0x14	; 20
+    7e8c:	03 c0       	rjmp	.+6      	; 0x7e94 <main+0x94>
     }
     else if(ch == STK_SET_DEVICE_EXT) {
-    7e86:	85 34       	cpi	r24, 0x45	; 69
-    7e88:	19 f4       	brne	.+6      	; 0x7e90 <main+0x90>
+    7e8e:	85 34       	cpi	r24, 0x45	; 69
+    7e90:	19 f4       	brne	.+6      	; 0x7e98 <main+0x98>
       // SET DEVICE EXT is ignored
       getNch(5);
-    7e8a:	85 e0       	ldi	r24, 0x05	; 5
-    7e8c:	9c d0       	rcall	.+312    	; 0x7fc6 <getNch>
-    7e8e:	76 c0       	rjmp	.+236    	; 0x7f7c <main+0x17c>
+    7e92:	85 e0       	ldi	r24, 0x05	; 5
+    7e94:	98 d0       	rcall	.+304    	; 0x7fc6 <verifySpace+0x10>
+    7e96:	73 c0       	rjmp	.+230    	; 0x7f7e <main+0x17e>
     }
     else if(ch == STK_LOAD_ADDRESS) {
-    7e90:	85 35       	cpi	r24, 0x55	; 85
-    7e92:	79 f4       	brne	.+30     	; 0x7eb2 <main+0xb2>
+    7e98:	85 35       	cpi	r24, 0x55	; 85
+    7e9a:	69 f4       	brne	.+26     	; 0x7eb6 <main+0xb6>
       // LOAD ADDRESS
       uint16_t newAddress;
       newAddress = getch();
-    7e94:	7e d0       	rcall	.+252    	; 0x7f92 <getch>
+    7e9c:	7a d0       	rcall	.+244    	; 0x7f92 <getch>
+    7e9e:	88 2e       	mov	r8, r24
+    7ea0:	99 24       	eor	r9, r9
       newAddress = (newAddress & 0xff) | (getch() << 8);
-    7e96:	e8 2e       	mov	r14, r24
-    7e98:	ff 24       	eor	r15, r15
-    7e9a:	7b d0       	rcall	.+246    	; 0x7f92 <getch>
-    7e9c:	08 2f       	mov	r16, r24
-    7e9e:	10 e0       	ldi	r17, 0x00	; 0
-    7ea0:	10 2f       	mov	r17, r16
-    7ea2:	00 27       	eor	r16, r16
-    7ea4:	0e 29       	or	r16, r14
-    7ea6:	1f 29       	or	r17, r15
+    7ea2:	77 d0       	rcall	.+238    	; 0x7f92 <getch>
+    7ea4:	08 2f       	mov	r16, r24
+    7ea6:	10 e0       	ldi	r17, 0x00	; 0
+    7ea8:	10 2f       	mov	r17, r16
+    7eaa:	00 27       	eor	r16, r16
+    7eac:	08 29       	or	r16, r8
+    7eae:	19 29       	or	r17, r9
 #ifdef RAMPZ
       // Transfer top bit to RAMPZ
       RAMPZ = (newAddress & 0x8000) ? 1 : 0;
 #endif
       newAddress += newAddress; // Convert from word address to byte address
-    7ea8:	00 0f       	add	r16, r16
-    7eaa:	11 1f       	adc	r17, r17
+    7eb0:	00 0f       	add	r16, r16
+    7eb2:	11 1f       	adc	r17, r17
+    7eb4:	63 c0       	rjmp	.+198    	; 0x7f7c <main+0x17c>
       address = newAddress;
       verifySpace();
-    7eac:	84 d0       	rcall	.+264    	; 0x7fb6 <verifySpace>
-    7eae:	78 01       	movw	r14, r16
-    7eb0:	65 c0       	rjmp	.+202    	; 0x7f7c <main+0x17c>
     }
     else if(ch == STK_UNIVERSAL) {
-    7eb2:	86 35       	cpi	r24, 0x56	; 86
-    7eb4:	21 f4       	brne	.+8      	; 0x7ebe <main+0xbe>
+    7eb6:	86 35       	cpi	r24, 0x56	; 86
+    7eb8:	21 f4       	brne	.+8      	; 0x7ec2 <main+0xc2>
       // UNIVERSAL command is ignored
       getNch(4);
-    7eb6:	84 e0       	ldi	r24, 0x04	; 4
-    7eb8:	86 d0       	rcall	.+268    	; 0x7fc6 <getNch>
+    7eba:	84 e0       	ldi	r24, 0x04	; 4
+    7ebc:	84 d0       	rcall	.+264    	; 0x7fc6 <verifySpace+0x10>
       putch(0x00);
-    7eba:	80 e0       	ldi	r24, 0x00	; 0
-    7ebc:	de cf       	rjmp	.-68     	; 0x7e7a <main+0x7a>
+    7ebe:	80 e0       	ldi	r24, 0x00	; 0
+    7ec0:	e0 cf       	rjmp	.-64     	; 0x7e82 <main+0x82>
     }
     /* Write memory, length is big endian and is in bytes */
     else if(ch == STK_PROG_PAGE) {
-    7ebe:	84 36       	cpi	r24, 0x64	; 100
-    7ec0:	09 f0       	breq	.+2      	; 0x7ec4 <main+0xc4>
-    7ec2:	40 c0       	rjmp	.+128    	; 0x7f44 <main+0x144>
+    7ec2:	84 36       	cpi	r24, 0x64	; 100
+    7ec4:	09 f0       	breq	.+2      	; 0x7ec8 <main+0xc8>
+    7ec6:	3f c0       	rjmp	.+126    	; 0x7f46 <main+0x146>
       // PROGRAM PAGE - we support flash programming only, not EEPROM
       uint8_t *bufPtr;
       uint16_t addrPtr;
 
       getch();			/* getlen() */
-    7ec4:	66 d0       	rcall	.+204    	; 0x7f92 <getch>
+    7ec8:	64 d0       	rcall	.+200    	; 0x7f92 <getch>
       length = getch();
-    7ec6:	65 d0       	rcall	.+202    	; 0x7f92 <getch>
-    7ec8:	08 2f       	mov	r16, r24
-      getch();
     7eca:	63 d0       	rcall	.+198    	; 0x7f92 <getch>
+    7ecc:	b8 2e       	mov	r11, r24
+      getch();
+    7ece:	61 d0       	rcall	.+194    	; 0x7f92 <getch>
 
       // If we are in RWW section, immediately start page erase
       if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    7ecc:	80 e0       	ldi	r24, 0x00	; 0
-    7ece:	e8 16       	cp	r14, r24
     7ed0:	80 e7       	ldi	r24, 0x70	; 112
-    7ed2:	f8 06       	cpc	r15, r24
-    7ed4:	18 f4       	brcc	.+6      	; 0x7edc <main+0xdc>
-    7ed6:	f7 01       	movw	r30, r14
-    7ed8:	d7 be       	out	0x37, r13	; 55
-    7eda:	e8 95       	spm
-    7edc:	c0 e0       	ldi	r28, 0x00	; 0
-    7ede:	d1 e0       	ldi	r29, 0x01	; 1
+    7ed2:	00 30       	cpi	r16, 0x00	; 0
+    7ed4:	18 07       	cpc	r17, r24
+    7ed6:	18 f4       	brcc	.+6      	; 0x7ede <main+0xde>
+    7ed8:	f8 01       	movw	r30, r16
+    7eda:	f7 be       	out	0x37, r15	; 55
+    7edc:	e8 95       	spm
+    7ede:	81 2c       	mov	r8, r1
+    7ee0:	51 e0       	ldi	r21, 0x01	; 1
+    7ee2:	95 2e       	mov	r9, r21
 
       // While that is going on, read in page contents
       bufPtr = buff;
       do *bufPtr++ = getch();
-    7ee0:	58 d0       	rcall	.+176    	; 0x7f92 <getch>
-    7ee2:	89 93       	st	Y+, r24
+    7ee4:	56 d0       	rcall	.+172    	; 0x7f92 <getch>
+    7ee6:	f4 01       	movw	r30, r8
+    7ee8:	81 93       	st	Z+, r24
+    7eea:	4f 01       	movw	r8, r30
       while (--length);
-    7ee4:	0c 17       	cp	r16, r28
-    7ee6:	e1 f7       	brne	.-8      	; 0x7ee0 <main+0xe0>
+    7eec:	be 16       	cp	r11, r30
+    7eee:	d1 f7       	brne	.-12     	; 0x7ee4 <main+0xe4>
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    7ee8:	f0 e0       	ldi	r31, 0x00	; 0
-    7eea:	ef 16       	cp	r14, r31
-    7eec:	f0 e7       	ldi	r31, 0x70	; 112
-    7eee:	ff 06       	cpc	r15, r31
-    7ef0:	18 f0       	brcs	.+6      	; 0x7ef8 <main+0xf8>
-    7ef2:	f7 01       	movw	r30, r14
-    7ef4:	d7 be       	out	0x37, r13	; 55
-    7ef6:	e8 95       	spm
+    7ef0:	f0 e7       	ldi	r31, 0x70	; 112
+    7ef2:	00 30       	cpi	r16, 0x00	; 0
+    7ef4:	1f 07       	cpc	r17, r31
+    7ef6:	18 f0       	brcs	.+6      	; 0x7efe <main+0xfe>
+    7ef8:	f8 01       	movw	r30, r16
+    7efa:	f7 be       	out	0x37, r15	; 55
+    7efc:	e8 95       	spm
 
       // Read command terminator, start reply
       verifySpace();
-    7ef8:	5e d0       	rcall	.+188    	; 0x7fb6 <verifySpace>
+    7efe:	5b d0       	rcall	.+182    	; 0x7fb6 <verifySpace>
 
       // If only a partial page is to be programmed, the erase might not be complete.
       // So check that here
       boot_spm_busy_wait();
-    7efa:	07 b6       	in	r0, 0x37	; 55
-    7efc:	00 fc       	sbrc	r0, 0
-    7efe:	fd cf       	rjmp	.-6      	; 0x7efa <main+0xfa>
-    7f00:	a7 01       	movw	r20, r14
-    7f02:	a0 e0       	ldi	r26, 0x00	; 0
-    7f04:	b1 e0       	ldi	r27, 0x01	; 1
+    7f00:	07 b6       	in	r0, 0x37	; 55
+    7f02:	00 fc       	sbrc	r0, 0
+    7f04:	fd cf       	rjmp	.-6      	; 0x7f00 <main+0x100>
+    7f06:	f8 01       	movw	r30, r16
+    7f08:	a0 e0       	ldi	r26, 0x00	; 0
+    7f0a:	b1 e0       	ldi	r27, 0x01	; 1
       bufPtr = buff;
       addrPtr = (uint16_t)(void*)address;
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
-    7f06:	2c 91       	ld	r18, X
-    7f08:	30 e0       	ldi	r19, 0x00	; 0
+    7f0c:	2c 91       	ld	r18, X
+    7f0e:	30 e0       	ldi	r19, 0x00	; 0
         a |= (*bufPtr++) << 8;
-    7f0a:	11 96       	adiw	r26, 0x01	; 1
-    7f0c:	8c 91       	ld	r24, X
-    7f0e:	11 97       	sbiw	r26, 0x01	; 1
-    7f10:	90 e0       	ldi	r25, 0x00	; 0
-    7f12:	98 2f       	mov	r25, r24
-    7f14:	88 27       	eor	r24, r24
-    7f16:	82 2b       	or	r24, r18
-    7f18:	93 2b       	or	r25, r19
+    7f10:	11 96       	adiw	r26, 0x01	; 1
+    7f12:	8c 91       	ld	r24, X
+    7f14:	11 97       	sbiw	r26, 0x01	; 1
+    7f16:	90 e0       	ldi	r25, 0x00	; 0
+    7f18:	98 2f       	mov	r25, r24
+    7f1a:	88 27       	eor	r24, r24
+    7f1c:	82 2b       	or	r24, r18
+    7f1e:	93 2b       	or	r25, r19
 # define UART_SRL UBRR3L
 # define UART_UDR UDR3
 #endif
 
 /* main program starts here */
 int main(void) {
-    7f1a:	12 96       	adiw	r26, 0x02	; 2
+    7f20:	12 96       	adiw	r26, 0x02	; 2
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    7f1c:	fa 01       	movw	r30, r20
-    7f1e:	0c 01       	movw	r0, r24
-    7f20:	a7 be       	out	0x37, r10	; 55
-    7f22:	e8 95       	spm
-    7f24:	11 24       	eor	r1, r1
+    7f22:	0c 01       	movw	r0, r24
+    7f24:	e7 be       	out	0x37, r14	; 55
+    7f26:	e8 95       	spm
+    7f28:	11 24       	eor	r1, r1
         addrPtr += 2;
-    7f26:	4e 5f       	subi	r20, 0xFE	; 254
-    7f28:	5f 4f       	sbci	r21, 0xFF	; 255
+    7f2a:	32 96       	adiw	r30, 0x02	; 2
       } while (--ch);
-    7f2a:	f1 e0       	ldi	r31, 0x01	; 1
-    7f2c:	a0 38       	cpi	r26, 0x80	; 128
-    7f2e:	bf 07       	cpc	r27, r31
-    7f30:	51 f7       	brne	.-44     	; 0x7f06 <main+0x106>
+    7f2c:	81 e0       	ldi	r24, 0x01	; 1
+    7f2e:	a0 38       	cpi	r26, 0x80	; 128
+    7f30:	b8 07       	cpc	r27, r24
+    7f32:	61 f7       	brne	.-40     	; 0x7f0c <main+0x10c>
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    7f32:	f7 01       	movw	r30, r14
-    7f34:	c7 be       	out	0x37, r12	; 55
-    7f36:	e8 95       	spm
+    7f34:	f8 01       	movw	r30, r16
+    7f36:	d7 be       	out	0x37, r13	; 55
+    7f38:	e8 95       	spm
       boot_spm_busy_wait();
-    7f38:	07 b6       	in	r0, 0x37	; 55
-    7f3a:	00 fc       	sbrc	r0, 0
-    7f3c:	fd cf       	rjmp	.-6      	; 0x7f38 <main+0x138>
+    7f3a:	07 b6       	in	r0, 0x37	; 55
+    7f3c:	00 fc       	sbrc	r0, 0
+    7f3e:	fd cf       	rjmp	.-6      	; 0x7f3a <main+0x13a>
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    7f3e:	b7 be       	out	0x37, r11	; 55
-    7f40:	e8 95       	spm
-    7f42:	1c c0       	rjmp	.+56     	; 0x7f7c <main+0x17c>
+    7f40:	c7 be       	out	0x37, r12	; 55
+    7f42:	e8 95       	spm
+    7f44:	1c c0       	rjmp	.+56     	; 0x7f7e <main+0x17e>
 #endif
 
     }
     /* Read memory block mode, length is big endian.  */
     else if(ch == STK_READ_PAGE) {
-    7f44:	84 37       	cpi	r24, 0x74	; 116
-    7f46:	61 f4       	brne	.+24     	; 0x7f60 <main+0x160>
+    7f46:	84 37       	cpi	r24, 0x74	; 116
+    7f48:	61 f4       	brne	.+24     	; 0x7f62 <main+0x162>
       // READ PAGE - we only read flash
       getch();			/* getlen() */
-    7f48:	24 d0       	rcall	.+72     	; 0x7f92 <getch>
-      length = getch();
     7f4a:	23 d0       	rcall	.+70     	; 0x7f92 <getch>
-    7f4c:	08 2f       	mov	r16, r24
+      length = getch();
+    7f4c:	22 d0       	rcall	.+68     	; 0x7f92 <getch>
+    7f4e:	b8 2e       	mov	r11, r24
       getch();
-    7f4e:	21 d0       	rcall	.+66     	; 0x7f92 <getch>
+    7f50:	20 d0       	rcall	.+64     	; 0x7f92 <getch>
 
       verifySpace();
-    7f50:	32 d0       	rcall	.+100    	; 0x7fb6 <verifySpace>
+    7f52:	31 d0       	rcall	.+98     	; 0x7fb6 <verifySpace>
         __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #else
         // read a Flash byte and increment the address
         __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #endif
         putch(ch);
-    7f52:	f7 01       	movw	r30, r14
-    7f54:	85 91       	lpm	r24, Z+
-    7f56:	7f 01       	movw	r14, r30
-    7f58:	14 d0       	rcall	.+40     	; 0x7f82 <putch>
+    7f54:	f8 01       	movw	r30, r16
+    7f56:	85 91       	lpm	r24, Z+
+    7f58:	8f 01       	movw	r16, r30
+    7f5a:	14 d0       	rcall	.+40     	; 0x7f84 <putch>
       } while (--length);
-    7f5a:	01 50       	subi	r16, 0x01	; 1
-    7f5c:	d1 f7       	brne	.-12     	; 0x7f52 <main+0x152>
-    7f5e:	0e c0       	rjmp	.+28     	; 0x7f7c <main+0x17c>
+    7f5c:	ba 94       	dec	r11
+    7f5e:	d1 f7       	brne	.-12     	; 0x7f54 <main+0x154>
+    7f60:	0e c0       	rjmp	.+28     	; 0x7f7e <main+0x17e>
     }
 
     /* Get device signature bytes  */
     else if(ch == STK_READ_SIGN) {
-    7f60:	85 37       	cpi	r24, 0x75	; 117
-    7f62:	39 f4       	brne	.+14     	; 0x7f72 <main+0x172>
+    7f62:	85 37       	cpi	r24, 0x75	; 117
+    7f64:	39 f4       	brne	.+14     	; 0x7f74 <main+0x174>
       // READ SIGN - return what Avrdude wants to hear
       verifySpace();
-    7f64:	28 d0       	rcall	.+80     	; 0x7fb6 <verifySpace>
+    7f66:	27 d0       	rcall	.+78     	; 0x7fb6 <verifySpace>
       putch(SIGNATURE_0);
-    7f66:	8e e1       	ldi	r24, 0x1E	; 30
-    7f68:	0c d0       	rcall	.+24     	; 0x7f82 <putch>
+    7f68:	8e e1       	ldi	r24, 0x1E	; 30
+    7f6a:	0c d0       	rcall	.+24     	; 0x7f84 <putch>
       putch(SIGNATURE_1);
-    7f6a:	85 e9       	ldi	r24, 0x95	; 149
-    7f6c:	0a d0       	rcall	.+20     	; 0x7f82 <putch>
+    7f6c:	85 e9       	ldi	r24, 0x95	; 149
+    7f6e:	0a d0       	rcall	.+20     	; 0x7f84 <putch>
       putch(SIGNATURE_2);
-    7f6e:	8f e0       	ldi	r24, 0x0F	; 15
-    7f70:	84 cf       	rjmp	.-248    	; 0x7e7a <main+0x7a>
+    7f70:	8f e0       	ldi	r24, 0x0F	; 15
+    7f72:	87 cf       	rjmp	.-242    	; 0x7e82 <main+0x82>
     }
     else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
-    7f72:	81 35       	cpi	r24, 0x51	; 81
-    7f74:	11 f4       	brne	.+4      	; 0x7f7a <main+0x17a>
+    7f74:	81 35       	cpi	r24, 0x51	; 81
+    7f76:	11 f4       	brne	.+4      	; 0x7f7c <main+0x17c>
       // Adaboot no-wait mod
       watchdogConfig(WATCHDOG_16MS);
-    7f76:	88 e0       	ldi	r24, 0x08	; 8
-    7f78:	18 d0       	rcall	.+48     	; 0x7faa <watchdogConfig>
+    7f78:	88 e0       	ldi	r24, 0x08	; 8
+    7f7a:	17 d0       	rcall	.+46     	; 0x7faa <watchdogConfig>
       verifySpace();
     }
     else {
       // This covers the response to commands like STK_ENTER_PROGMODE
       verifySpace();
-    7f7a:	1d d0       	rcall	.+58     	; 0x7fb6 <verifySpace>
+    7f7c:	1c d0       	rcall	.+56     	; 0x7fb6 <verifySpace>
     }
     putch(STK_OK);
-    7f7c:	80 e1       	ldi	r24, 0x10	; 16
-    7f7e:	01 d0       	rcall	.+2      	; 0x7f82 <putch>
-    7f80:	6f cf       	rjmp	.-290    	; 0x7e60 <main+0x60>
-
-00007f82 <putch>:
+    7f7e:	80 e1       	ldi	r24, 0x10	; 16
+    7f80:	01 d0       	rcall	.+2      	; 0x7f84 <putch>
   }
+    7f82:	71 cf       	rjmp	.-286    	; 0x7e66 <main+0x66>
+
+00007f84 <putch>:
 }
 
 void putch(char ch) {
-    7f82:	98 2f       	mov	r25, r24
 #ifndef SOFT_UART
   while (!(UART_SRA & _BV(UDRE0)));
-    7f84:	80 91 c0 00 	lds	r24, 0x00C0
-    7f88:	85 ff       	sbrs	r24, 5
-    7f8a:	fc cf       	rjmp	.-8      	; 0x7f84 <putch+0x2>
+    7f84:	90 91 c0 00 	lds	r25, 0x00C0
+    7f88:	95 ff       	sbrs	r25, 5
+    7f8a:	fc cf       	rjmp	.-8      	; 0x7f84 <putch>
   UART_UDR = ch;
-    7f8c:	90 93 c6 00 	sts	0x00C6, r25
+    7f8c:	80 93 c6 00 	sts	0x00C6, r24
       [uartBit] "I" (UART_TX_BIT)
     :
       "r25"
@@ -546,41 +552,41 @@ void verifySpace() {
   }
   putch(STK_INSYNC);
     7fc2:	84 e1       	ldi	r24, 0x14	; 20
+    7fc4:	df cf       	rjmp	.-66     	; 0x7f84 <putch>
 }
-    7fc4:	de cf       	rjmp	.-68     	; 0x7f82 <putch>
+    7fc6:	cf 93       	push	r28
 
-00007fc6 <getNch>:
+00007fc8 <getNch>:
     ::[count] "M" (UART_B_VALUE)
   );
 }
 #endif
 
 void getNch(uint8_t count) {
-    7fc6:	1f 93       	push	r17
-    7fc8:	18 2f       	mov	r17, r24
-  do getch(); while (--count);
+    7fc8:	c8 2f       	mov	r28, r24
     7fca:	e3 df       	rcall	.-58     	; 0x7f92 <getch>
-    7fcc:	11 50       	subi	r17, 0x01	; 1
-    7fce:	e9 f7       	brne	.-6      	; 0x7fca <getNch+0x4>
-  verifySpace();
+  do getch(); while (--count);
+    7fcc:	c1 50       	subi	r28, 0x01	; 1
+    7fce:	e9 f7       	brne	.-6      	; 0x7fca <getNch+0x2>
     7fd0:	f2 df       	rcall	.-28     	; 0x7fb6 <verifySpace>
+  verifySpace();
+    7fd2:	cf 91       	pop	r28
 }
-    7fd2:	1f 91       	pop	r17
     7fd4:	08 95       	ret
 
 00007fd6 <appStart>:
+    7fd6:	28 2e       	mov	r2, r24
 
 void appStart(uint8_t rstFlags) {
   // save the reset flags in the designated register
   //  This can be saved in a main program by putting code in .init0 (which
   //  executes before normal c init code) to save R2 to a global variable.
   __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
-    7fd6:	28 2e       	mov	r2, r24
+    7fd8:	80 e0       	ldi	r24, 0x00	; 0
 
   watchdogConfig(WATCHDOG_OFF);
-    7fd8:	80 e0       	ldi	r24, 0x00	; 0
     7fda:	e7 df       	rcall	.-50     	; 0x7faa <watchdogConfig>
-  __asm__ __volatile__ (
     7fdc:	ee 27       	eor	r30, r30
+  __asm__ __volatile__ (
     7fde:	ff 27       	eor	r31, r31
     7fe0:	09 94       	ijmp
diff --git a/optiboot/bootloaders/optiboot/optiboot_atmega328_pro_8MHz.hex b/optiboot/bootloaders/optiboot/optiboot_atmega328_pro_8MHz.hex
index 06969f4..c580da9 100644
--- a/optiboot/bootloaders/optiboot/optiboot_atmega328_pro_8MHz.hex
+++ b/optiboot/bootloaders/optiboot/optiboot_atmega328_pro_8MHz.hex
@@ -1,33 +1,33 @@
-:107E0000112484B714BE81FFE6D085E08093810001
-:107E100082E08093C00088E18093C10086E0809377
-:107E2000C20088E08093C4008EE0BFD0259A86E02F
-:107E300028E13EEF91E0309385002093840096BBCB
-:107E4000B09BFECF1D9AA8958150A9F7EE24FF2480
-:107E5000AA24A394B5E0CB2EA1E1BA2EF3E0DF2E45
-:107E600098D0813461F495D0082FA5D0023829F13B
-:107E7000013811F485E001C083E083D07FC08234F3
-:107E800011F484E103C0853419F485E09CD076C0F8
-:107E9000853579F47ED0E82EFF247BD0082F10E0C2
-:107EA000102F00270E291F29000F111F84D07801E1
-:107EB00065C0863521F484E086D080E0DECF84364C
-:107EC00009F040C066D065D0082F63D080E0E81686
-:107ED00080E7F80618F4F701D7BEE895C0E0D1E0D6
-:107EE00058D089930C17E1F7F0E0EF16F0E7FF06A2
-:107EF00018F0F701D7BEE8955ED007B600FCFDCFBD
-:107F0000A701A0E0B1E02C9130E011968C9111977F
-:107F100090E0982F8827822B932B1296FA010C0160
-:107F2000A7BEE89511244E5F5F4FF1E0A038BF0770
-:107F300051F7F701C7BEE89507B600FCFDCFB7BE05
-:107F4000E8951CC0843761F424D023D0082F21D0B9
-:107F500032D0F70185917F0114D00150D1F70EC0C6
-:107F6000853739F428D08EE10CD085E90AD08FE02E
-:107F700084CF813511F488E018D01DD080E101D084
-:107F80006FCF982F8091C00085FFFCCF9093C600E3
+:107E00000F92CDB7DEB7112484B714BE81FFE3D043
+:107E100085E08093810082E08093C00088E18093B8
+:107E2000C10086E08093C20088E08093C4008EE0A9
+:107E3000BCD0259A26E088E19EEF31E09093850042
+:107E40008093840036BBB09BFECF1D9AA89521502D
+:107E5000A9F700E010E0EE24E394E5E0DE2EF1E186
+:107E6000CF2EA3E0FA2E95D0813469F492D0898385
+:107E7000A2D08981823819F1813811F485E001C0DE
+:107E800083E080D07CC0823411F484E103C0853467
+:107E900019F485E098D073C0853569F47AD0882EBE
+:107EA000992477D0082F10E0102F002708291929CE
+:107EB000000F111F63C0863521F484E084D080E078
+:107EC000E0CF843609F03FC064D063D0B82E61D0D3
+:107ED00080E70030180718F4F801F7BEE895812C08
+:107EE00051E0952E56D0F40181934F01BE16D1F783
+:107EF000F0E700301F0718F0F801F7BEE8955BD0F7
+:107F000007B600FCFDCFF801A0E0B1E02C9130E015
+:107F100011968C91119790E0982F8827822B932BA4
+:107F200012960C01E7BEE8951124329681E0A03844
+:107F3000B80761F7F801D7BEE89507B600FCFDCF9A
+:107F4000C7BEE8951CC0843761F423D022D0B82E78
+:107F500020D031D0F80185918F0114D0BA94D1F797
+:107F60000EC0853739F427D08EE10CD085E90AD0D0
+:107F70008FE087CF813511F488E017D01CD080E1E5
+:107F800001D071CF9091C00095FFFCCF8093C600C7
 :107F900008958091C00087FFFCCF8091C00084FDD0
 :107FA00001C0A8958091C6000895E0E6F0E098E150
 :107FB000908380830895EDDF803219F088E0F5DF4B
-:107FC000FFCF84E1DECF1F93182FE3DF1150E9F7D5
-:107FD000F2DF1F910895282E80E0E7DFEE27FF27CC
+:107FC000FFCF84E1DFCFCF93C82FE3DFC150E9F7C4
+:107FD000F2DFCF910895282E80E0E7DFEE27FF271C
 :027FE000099402
 :027FFE0000057C
 :0400000300007E007B
diff --git a/optiboot/bootloaders/optiboot/optiboot_atmega328_pro_8MHz.lst b/optiboot/bootloaders/optiboot/optiboot_atmega328_pro_8MHz.lst
index 782b2a2..5f07370 100644
--- a/optiboot/bootloaders/optiboot/optiboot_atmega328_pro_8MHz.lst
+++ b/optiboot/bootloaders/optiboot/optiboot_atmega328_pro_8MHz.lst
@@ -3,27 +3,27 @@ optiboot_atmega328.elf:     file format elf32-avr
 
 Sections:
 Idx Name          Size      VMA       LMA       File off  Algn
-  0 .text         000001e2  00007e00  00007e00  00000054  2**1
+  0 .data         00000000  00800100  00007fe2  00000256  2**0
+                  CONTENTS, ALLOC, LOAD, DATA
+  1 .text         000001e2  00007e00  00007e00  00000074  2**1
                   CONTENTS, ALLOC, LOAD, READONLY, CODE
-  1 .version      00000002  00007ffe  00007ffe  00000236  2**0
+  2 .version      00000002  00007ffe  00007ffe  00000256  2**0
                   CONTENTS, READONLY
-  2 .debug_aranges 00000028  00000000  00000000  00000238  2**0
+  3 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                   CONTENTS, READONLY, DEBUGGING
-  3 .debug_pubnames 0000005f  00000000  00000000  00000260  2**0
+  4 .debug_info   00000290  00000000  00000000  00000280  2**0
                   CONTENTS, READONLY, DEBUGGING
-  4 .debug_info   00000294  00000000  00000000  000002bf  2**0
+  5 .debug_abbrev 00000176  00000000  00000000  00000510  2**0
                   CONTENTS, READONLY, DEBUGGING
-  5 .debug_abbrev 0000016b  00000000  00000000  00000553  2**0
+  6 .debug_line   00000192  00000000  00000000  00000686  2**0
                   CONTENTS, READONLY, DEBUGGING
-  6 .debug_line   00000421  00000000  00000000  000006be  2**0
+  7 .debug_frame  00000094  00000000  00000000  00000818  2**2
                   CONTENTS, READONLY, DEBUGGING
-  7 .debug_frame  00000080  00000000  00000000  00000ae0  2**2
+  8 .debug_str    00000131  00000000  00000000  000008ac  2**0
                   CONTENTS, READONLY, DEBUGGING
-  8 .debug_str    00000131  00000000  00000000  00000b60  2**0
+  9 .debug_loc    0000026e  00000000  00000000  000009dd  2**0
                   CONTENTS, READONLY, DEBUGGING
-  9 .debug_loc    00000266  00000000  00000000  00000c91  2**0
-                  CONTENTS, READONLY, DEBUGGING
- 10 .debug_ranges 00000078  00000000  00000000  00000ef7  2**0
+ 10 .debug_ranges 00000048  00000000  00000000  00000c4b  2**0
                   CONTENTS, READONLY, DEBUGGING
 
 Disassembly of section .text:
@@ -35,437 +35,443 @@ Disassembly of section .text:
 
 /* main program starts here */
 int main(void) {
-    7e00:	11 24       	eor	r1, r1
+    7e00:	0f 92       	push	r0
+    7e02:	cd b7       	in	r28, 0x3d	; 61
+    7e04:	de b7       	in	r29, 0x3e	; 62
+  //  SP points to RAMEND
+  //  r1 contains zero
+  //
+  // If not, uncomment the following instructions:
+  // cli();
+  asm volatile ("clr __zero_reg__");
+    7e06:	11 24       	eor	r1, r1
 #if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
   SP=RAMEND;  // This is done by hardware reset
 #endif
 
   // Adaboot no-wait mod
   ch = MCUSR;
-    7e02:	84 b7       	in	r24, 0x34	; 52
+    7e08:	84 b7       	in	r24, 0x34	; 52
   MCUSR = 0;
-    7e04:	14 be       	out	0x34, r1	; 52
+    7e0a:	14 be       	out	0x34, r1	; 52
   if (!(ch & _BV(EXTRF))) appStart(ch);
-    7e06:	81 ff       	sbrs	r24, 1
-    7e08:	e6 d0       	rcall	.+460    	; 0x7fd6 <appStart>
+    7e0c:	81 ff       	sbrs	r24, 1
+    7e0e:	e3 d0       	rcall	.+454    	; 0x7fd6 <appStart>
 
 #if LED_START_FLASHES > 0
   // Set up Timer 1 for timeout counter
   TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
-    7e0a:	85 e0       	ldi	r24, 0x05	; 5
-    7e0c:	80 93 81 00 	sts	0x0081, r24
+    7e10:	85 e0       	ldi	r24, 0x05	; 5
+    7e12:	80 93 81 00 	sts	0x0081, r24
   UCSRA = _BV(U2X); //Double speed mode USART
   UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
   UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
   UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
 #else
   UART_SRA = _BV(U2X0); //Double speed mode USART0
-    7e10:	82 e0       	ldi	r24, 0x02	; 2
-    7e12:	80 93 c0 00 	sts	0x00C0, r24
+    7e16:	82 e0       	ldi	r24, 0x02	; 2
+    7e18:	80 93 c0 00 	sts	0x00C0, r24
   UART_SRB = _BV(RXEN0) | _BV(TXEN0);
-    7e16:	88 e1       	ldi	r24, 0x18	; 24
-    7e18:	80 93 c1 00 	sts	0x00C1, r24
+    7e1c:	88 e1       	ldi	r24, 0x18	; 24
+    7e1e:	80 93 c1 00 	sts	0x00C1, r24
   UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
-    7e1c:	86 e0       	ldi	r24, 0x06	; 6
-    7e1e:	80 93 c2 00 	sts	0x00C2, r24
+    7e22:	86 e0       	ldi	r24, 0x06	; 6
+    7e24:	80 93 c2 00 	sts	0x00C2, r24
   UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
-    7e22:	88 e0       	ldi	r24, 0x08	; 8
-    7e24:	80 93 c4 00 	sts	0x00C4, r24
+    7e28:	88 e0       	ldi	r24, 0x08	; 8
+    7e2a:	80 93 c4 00 	sts	0x00C4, r24
 #endif
 #endif
 
   // Set up watchdog to trigger after 500ms
   watchdogConfig(WATCHDOG_1S);
-    7e28:	8e e0       	ldi	r24, 0x0E	; 14
-    7e2a:	bf d0       	rcall	.+382    	; 0x7faa <watchdogConfig>
+    7e2e:	8e e0       	ldi	r24, 0x0E	; 14
+    7e30:	bc d0       	rcall	.+376    	; 0x7faa <watchdogConfig>
 
 #if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
   /* Set LED pin as output */
   LED_DDR |= _BV(LED);
-    7e2c:	25 9a       	sbi	0x04, 5	; 4
-    7e2e:	86 e0       	ldi	r24, 0x06	; 6
+    7e32:	25 9a       	sbi	0x04, 5	; 4
+    7e34:	26 e0       	ldi	r18, 0x06	; 6
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    7e30:	28 e1       	ldi	r18, 0x18	; 24
-    7e32:	3e ef       	ldi	r19, 0xFE	; 254
+    7e36:	88 e1       	ldi	r24, 0x18	; 24
+    7e38:	9e ef       	ldi	r25, 0xFE	; 254
     TIFR1 = _BV(TOV1);
-    7e34:	91 e0       	ldi	r25, 0x01	; 1
+    7e3a:	31 e0       	ldi	r19, 0x01	; 1
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    7e36:	30 93 85 00 	sts	0x0085, r19
-    7e3a:	20 93 84 00 	sts	0x0084, r18
+    7e3c:	90 93 85 00 	sts	0x0085, r25
+    7e40:	80 93 84 00 	sts	0x0084, r24
     TIFR1 = _BV(TOV1);
-    7e3e:	96 bb       	out	0x16, r25	; 22
+    7e44:	36 bb       	out	0x16, r19	; 22
     while(!(TIFR1 & _BV(TOV1)));
-    7e40:	b0 9b       	sbis	0x16, 0	; 22
-    7e42:	fe cf       	rjmp	.-4      	; 0x7e40 <main+0x40>
+    7e46:	b0 9b       	sbis	0x16, 0	; 22
+    7e48:	fe cf       	rjmp	.-4      	; 0x7e46 <main+0x46>
 #if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
-    7e44:	1d 9a       	sbi	0x03, 5	; 3
+    7e4a:	1d 9a       	sbi	0x03, 5	; 3
 }
 #endif
 
 // Watchdog functions. These are only safe with interrupts turned off.
 void watchdogReset() {
   __asm__ __volatile__ (
-    7e46:	a8 95       	wdr
+    7e4c:	a8 95       	wdr
+    7e4e:	21 50       	subi	r18, 0x01	; 1
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
 #endif
     watchdogReset();
   } while (--count);
-    7e48:	81 50       	subi	r24, 0x01	; 1
-    7e4a:	a9 f7       	brne	.-22     	; 0x7e36 <main+0x36>
-    7e4c:	ee 24       	eor	r14, r14
-    7e4e:	ff 24       	eor	r15, r15
+    7e50:	a9 f7       	brne	.-22     	; 0x7e3c <main+0x3c>
+    7e52:	00 e0       	ldi	r16, 0x00	; 0
+    7e54:	10 e0       	ldi	r17, 0x00	; 0
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    7e50:	aa 24       	eor	r10, r10
-    7e52:	a3 94       	inc	r10
+    7e56:	ee 24       	eor	r14, r14
+    7e58:	e3 94       	inc	r14
         addrPtr += 2;
       } while (--ch);
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    7e54:	b5 e0       	ldi	r27, 0x05	; 5
-    7e56:	cb 2e       	mov	r12, r27
+    7e5a:	e5 e0       	ldi	r30, 0x05	; 5
+    7e5c:	de 2e       	mov	r13, r30
       boot_spm_busy_wait();
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    7e58:	a1 e1       	ldi	r26, 0x11	; 17
-    7e5a:	ba 2e       	mov	r11, r26
+    7e5e:	f1 e1       	ldi	r31, 0x11	; 17
+    7e60:	cf 2e       	mov	r12, r31
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    7e5c:	f3 e0       	ldi	r31, 0x03	; 3
-    7e5e:	df 2e       	mov	r13, r31
+    7e62:	a3 e0       	ldi	r26, 0x03	; 3
+    7e64:	fa 2e       	mov	r15, r26
 #endif
 
   /* Forever loop */
   for (;;) {
     /* get character from UART */
     ch = getch();
-    7e60:	98 d0       	rcall	.+304    	; 0x7f92 <getch>
+    7e66:	95 d0       	rcall	.+298    	; 0x7f92 <getch>
 
     if(ch == STK_GET_PARAMETER) {
-    7e62:	81 34       	cpi	r24, 0x41	; 65
-    7e64:	61 f4       	brne	.+24     	; 0x7e7e <main+0x7e>
+    7e68:	81 34       	cpi	r24, 0x41	; 65
+    7e6a:	69 f4       	brne	.+26     	; 0x7e86 <main+0x86>
       unsigned char which = getch();
-    7e66:	95 d0       	rcall	.+298    	; 0x7f92 <getch>
-    7e68:	08 2f       	mov	r16, r24
+    7e6c:	92 d0       	rcall	.+292    	; 0x7f92 <getch>
       verifySpace();
-    7e6a:	a5 d0       	rcall	.+330    	; 0x7fb6 <verifySpace>
+    7e6e:	89 83       	std	Y+1, r24	; 0x01
+    7e70:	a2 d0       	rcall	.+324    	; 0x7fb6 <verifySpace>
       if (which == 0x82) {
-    7e6c:	02 38       	cpi	r16, 0x82	; 130
-    7e6e:	29 f1       	breq	.+74     	; 0x7eba <main+0xba>
+    7e72:	89 81       	ldd	r24, Y+1	; 0x01
+    7e74:	82 38       	cpi	r24, 0x82	; 130
+    7e76:	19 f1       	breq	.+70     	; 0x7ebe <main+0xbe>
 	/*
 	 * Send optiboot version as "minor SW version"
 	 */
 	putch(OPTIBOOT_MINVER);
       } else if (which == 0x81) {
-    7e70:	01 38       	cpi	r16, 0x81	; 129
-    7e72:	11 f4       	brne	.+4      	; 0x7e78 <main+0x78>
+    7e78:	81 38       	cpi	r24, 0x81	; 129
+    7e7a:	11 f4       	brne	.+4      	; 0x7e80 <main+0x80>
 	  putch(OPTIBOOT_MAJVER);
-    7e74:	85 e0       	ldi	r24, 0x05	; 5
-    7e76:	01 c0       	rjmp	.+2      	; 0x7e7a <main+0x7a>
+    7e7c:	85 e0       	ldi	r24, 0x05	; 5
+    7e7e:	01 c0       	rjmp	.+2      	; 0x7e82 <main+0x82>
       } else {
 	/*
 	 * GET PARAMETER returns a generic 0x03 reply for
          * other parameters - enough to keep Avrdude happy
 	 */
 	putch(0x03);
-    7e78:	83 e0       	ldi	r24, 0x03	; 3
-    7e7a:	83 d0       	rcall	.+262    	; 0x7f82 <putch>
-    7e7c:	7f c0       	rjmp	.+254    	; 0x7f7c <main+0x17c>
+    7e80:	83 e0       	ldi	r24, 0x03	; 3
+    7e82:	80 d0       	rcall	.+256    	; 0x7f84 <putch>
+    7e84:	7c c0       	rjmp	.+248    	; 0x7f7e <main+0x17e>
       }
     }
     else if(ch == STK_SET_DEVICE) {
-    7e7e:	82 34       	cpi	r24, 0x42	; 66
-    7e80:	11 f4       	brne	.+4      	; 0x7e86 <main+0x86>
+    7e86:	82 34       	cpi	r24, 0x42	; 66
+    7e88:	11 f4       	brne	.+4      	; 0x7e8e <main+0x8e>
       // SET DEVICE is ignored
       getNch(20);
-    7e82:	84 e1       	ldi	r24, 0x14	; 20
-    7e84:	03 c0       	rjmp	.+6      	; 0x7e8c <main+0x8c>
+    7e8a:	84 e1       	ldi	r24, 0x14	; 20
+    7e8c:	03 c0       	rjmp	.+6      	; 0x7e94 <main+0x94>
     }
     else if(ch == STK_SET_DEVICE_EXT) {
-    7e86:	85 34       	cpi	r24, 0x45	; 69
-    7e88:	19 f4       	brne	.+6      	; 0x7e90 <main+0x90>
+    7e8e:	85 34       	cpi	r24, 0x45	; 69
+    7e90:	19 f4       	brne	.+6      	; 0x7e98 <main+0x98>
       // SET DEVICE EXT is ignored
       getNch(5);
-    7e8a:	85 e0       	ldi	r24, 0x05	; 5
-    7e8c:	9c d0       	rcall	.+312    	; 0x7fc6 <getNch>
-    7e8e:	76 c0       	rjmp	.+236    	; 0x7f7c <main+0x17c>
+    7e92:	85 e0       	ldi	r24, 0x05	; 5
+    7e94:	98 d0       	rcall	.+304    	; 0x7fc6 <verifySpace+0x10>
+    7e96:	73 c0       	rjmp	.+230    	; 0x7f7e <main+0x17e>
     }
     else if(ch == STK_LOAD_ADDRESS) {
-    7e90:	85 35       	cpi	r24, 0x55	; 85
-    7e92:	79 f4       	brne	.+30     	; 0x7eb2 <main+0xb2>
+    7e98:	85 35       	cpi	r24, 0x55	; 85
+    7e9a:	69 f4       	brne	.+26     	; 0x7eb6 <main+0xb6>
       // LOAD ADDRESS
       uint16_t newAddress;
       newAddress = getch();
-    7e94:	7e d0       	rcall	.+252    	; 0x7f92 <getch>
+    7e9c:	7a d0       	rcall	.+244    	; 0x7f92 <getch>
+    7e9e:	88 2e       	mov	r8, r24
+    7ea0:	99 24       	eor	r9, r9
       newAddress = (newAddress & 0xff) | (getch() << 8);
-    7e96:	e8 2e       	mov	r14, r24
-    7e98:	ff 24       	eor	r15, r15
-    7e9a:	7b d0       	rcall	.+246    	; 0x7f92 <getch>
-    7e9c:	08 2f       	mov	r16, r24
-    7e9e:	10 e0       	ldi	r17, 0x00	; 0
-    7ea0:	10 2f       	mov	r17, r16
-    7ea2:	00 27       	eor	r16, r16
-    7ea4:	0e 29       	or	r16, r14
-    7ea6:	1f 29       	or	r17, r15
+    7ea2:	77 d0       	rcall	.+238    	; 0x7f92 <getch>
+    7ea4:	08 2f       	mov	r16, r24
+    7ea6:	10 e0       	ldi	r17, 0x00	; 0
+    7ea8:	10 2f       	mov	r17, r16
+    7eaa:	00 27       	eor	r16, r16
+    7eac:	08 29       	or	r16, r8
+    7eae:	19 29       	or	r17, r9
 #ifdef RAMPZ
       // Transfer top bit to RAMPZ
       RAMPZ = (newAddress & 0x8000) ? 1 : 0;
 #endif
       newAddress += newAddress; // Convert from word address to byte address
-    7ea8:	00 0f       	add	r16, r16
-    7eaa:	11 1f       	adc	r17, r17
+    7eb0:	00 0f       	add	r16, r16
+    7eb2:	11 1f       	adc	r17, r17
+    7eb4:	63 c0       	rjmp	.+198    	; 0x7f7c <main+0x17c>
       address = newAddress;
       verifySpace();
-    7eac:	84 d0       	rcall	.+264    	; 0x7fb6 <verifySpace>
-    7eae:	78 01       	movw	r14, r16
-    7eb0:	65 c0       	rjmp	.+202    	; 0x7f7c <main+0x17c>
     }
     else if(ch == STK_UNIVERSAL) {
-    7eb2:	86 35       	cpi	r24, 0x56	; 86
-    7eb4:	21 f4       	brne	.+8      	; 0x7ebe <main+0xbe>
+    7eb6:	86 35       	cpi	r24, 0x56	; 86
+    7eb8:	21 f4       	brne	.+8      	; 0x7ec2 <main+0xc2>
       // UNIVERSAL command is ignored
       getNch(4);
-    7eb6:	84 e0       	ldi	r24, 0x04	; 4
-    7eb8:	86 d0       	rcall	.+268    	; 0x7fc6 <getNch>
+    7eba:	84 e0       	ldi	r24, 0x04	; 4
+    7ebc:	84 d0       	rcall	.+264    	; 0x7fc6 <verifySpace+0x10>
       putch(0x00);
-    7eba:	80 e0       	ldi	r24, 0x00	; 0
-    7ebc:	de cf       	rjmp	.-68     	; 0x7e7a <main+0x7a>
+    7ebe:	80 e0       	ldi	r24, 0x00	; 0
+    7ec0:	e0 cf       	rjmp	.-64     	; 0x7e82 <main+0x82>
     }
     /* Write memory, length is big endian and is in bytes */
     else if(ch == STK_PROG_PAGE) {
-    7ebe:	84 36       	cpi	r24, 0x64	; 100
-    7ec0:	09 f0       	breq	.+2      	; 0x7ec4 <main+0xc4>
-    7ec2:	40 c0       	rjmp	.+128    	; 0x7f44 <main+0x144>
+    7ec2:	84 36       	cpi	r24, 0x64	; 100
+    7ec4:	09 f0       	breq	.+2      	; 0x7ec8 <main+0xc8>
+    7ec6:	3f c0       	rjmp	.+126    	; 0x7f46 <main+0x146>
       // PROGRAM PAGE - we support flash programming only, not EEPROM
       uint8_t *bufPtr;
       uint16_t addrPtr;
 
       getch();			/* getlen() */
-    7ec4:	66 d0       	rcall	.+204    	; 0x7f92 <getch>
+    7ec8:	64 d0       	rcall	.+200    	; 0x7f92 <getch>
       length = getch();
-    7ec6:	65 d0       	rcall	.+202    	; 0x7f92 <getch>
-    7ec8:	08 2f       	mov	r16, r24
-      getch();
     7eca:	63 d0       	rcall	.+198    	; 0x7f92 <getch>
+    7ecc:	b8 2e       	mov	r11, r24
+      getch();
+    7ece:	61 d0       	rcall	.+194    	; 0x7f92 <getch>
 
       // If we are in RWW section, immediately start page erase
       if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    7ecc:	80 e0       	ldi	r24, 0x00	; 0
-    7ece:	e8 16       	cp	r14, r24
     7ed0:	80 e7       	ldi	r24, 0x70	; 112
-    7ed2:	f8 06       	cpc	r15, r24
-    7ed4:	18 f4       	brcc	.+6      	; 0x7edc <main+0xdc>
-    7ed6:	f7 01       	movw	r30, r14
-    7ed8:	d7 be       	out	0x37, r13	; 55
-    7eda:	e8 95       	spm
-    7edc:	c0 e0       	ldi	r28, 0x00	; 0
-    7ede:	d1 e0       	ldi	r29, 0x01	; 1
+    7ed2:	00 30       	cpi	r16, 0x00	; 0
+    7ed4:	18 07       	cpc	r17, r24
+    7ed6:	18 f4       	brcc	.+6      	; 0x7ede <main+0xde>
+    7ed8:	f8 01       	movw	r30, r16
+    7eda:	f7 be       	out	0x37, r15	; 55
+    7edc:	e8 95       	spm
+    7ede:	81 2c       	mov	r8, r1
+    7ee0:	51 e0       	ldi	r21, 0x01	; 1
+    7ee2:	95 2e       	mov	r9, r21
 
       // While that is going on, read in page contents
       bufPtr = buff;
       do *bufPtr++ = getch();
-    7ee0:	58 d0       	rcall	.+176    	; 0x7f92 <getch>
-    7ee2:	89 93       	st	Y+, r24
+    7ee4:	56 d0       	rcall	.+172    	; 0x7f92 <getch>
+    7ee6:	f4 01       	movw	r30, r8
+    7ee8:	81 93       	st	Z+, r24
+    7eea:	4f 01       	movw	r8, r30
       while (--length);
-    7ee4:	0c 17       	cp	r16, r28
-    7ee6:	e1 f7       	brne	.-8      	; 0x7ee0 <main+0xe0>
+    7eec:	be 16       	cp	r11, r30
+    7eee:	d1 f7       	brne	.-12     	; 0x7ee4 <main+0xe4>
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    7ee8:	f0 e0       	ldi	r31, 0x00	; 0
-    7eea:	ef 16       	cp	r14, r31
-    7eec:	f0 e7       	ldi	r31, 0x70	; 112
-    7eee:	ff 06       	cpc	r15, r31
-    7ef0:	18 f0       	brcs	.+6      	; 0x7ef8 <main+0xf8>
-    7ef2:	f7 01       	movw	r30, r14
-    7ef4:	d7 be       	out	0x37, r13	; 55
-    7ef6:	e8 95       	spm
+    7ef0:	f0 e7       	ldi	r31, 0x70	; 112
+    7ef2:	00 30       	cpi	r16, 0x00	; 0
+    7ef4:	1f 07       	cpc	r17, r31
+    7ef6:	18 f0       	brcs	.+6      	; 0x7efe <main+0xfe>
+    7ef8:	f8 01       	movw	r30, r16
+    7efa:	f7 be       	out	0x37, r15	; 55
+    7efc:	e8 95       	spm
 
       // Read command terminator, start reply
       verifySpace();
-    7ef8:	5e d0       	rcall	.+188    	; 0x7fb6 <verifySpace>
+    7efe:	5b d0       	rcall	.+182    	; 0x7fb6 <verifySpace>
 
       // If only a partial page is to be programmed, the erase might not be complete.
       // So check that here
       boot_spm_busy_wait();
-    7efa:	07 b6       	in	r0, 0x37	; 55
-    7efc:	00 fc       	sbrc	r0, 0
-    7efe:	fd cf       	rjmp	.-6      	; 0x7efa <main+0xfa>
-    7f00:	a7 01       	movw	r20, r14
-    7f02:	a0 e0       	ldi	r26, 0x00	; 0
-    7f04:	b1 e0       	ldi	r27, 0x01	; 1
+    7f00:	07 b6       	in	r0, 0x37	; 55
+    7f02:	00 fc       	sbrc	r0, 0
+    7f04:	fd cf       	rjmp	.-6      	; 0x7f00 <main+0x100>
+    7f06:	f8 01       	movw	r30, r16
+    7f08:	a0 e0       	ldi	r26, 0x00	; 0
+    7f0a:	b1 e0       	ldi	r27, 0x01	; 1
       bufPtr = buff;
       addrPtr = (uint16_t)(void*)address;
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
-    7f06:	2c 91       	ld	r18, X
-    7f08:	30 e0       	ldi	r19, 0x00	; 0
+    7f0c:	2c 91       	ld	r18, X
+    7f0e:	30 e0       	ldi	r19, 0x00	; 0
         a |= (*bufPtr++) << 8;
-    7f0a:	11 96       	adiw	r26, 0x01	; 1
-    7f0c:	8c 91       	ld	r24, X
-    7f0e:	11 97       	sbiw	r26, 0x01	; 1
-    7f10:	90 e0       	ldi	r25, 0x00	; 0
-    7f12:	98 2f       	mov	r25, r24
-    7f14:	88 27       	eor	r24, r24
-    7f16:	82 2b       	or	r24, r18
-    7f18:	93 2b       	or	r25, r19
+    7f10:	11 96       	adiw	r26, 0x01	; 1
+    7f12:	8c 91       	ld	r24, X
+    7f14:	11 97       	sbiw	r26, 0x01	; 1
+    7f16:	90 e0       	ldi	r25, 0x00	; 0
+    7f18:	98 2f       	mov	r25, r24
+    7f1a:	88 27       	eor	r24, r24
+    7f1c:	82 2b       	or	r24, r18
+    7f1e:	93 2b       	or	r25, r19
 # define UART_SRL UBRR3L
 # define UART_UDR UDR3
 #endif
 
 /* main program starts here */
 int main(void) {
-    7f1a:	12 96       	adiw	r26, 0x02	; 2
+    7f20:	12 96       	adiw	r26, 0x02	; 2
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    7f1c:	fa 01       	movw	r30, r20
-    7f1e:	0c 01       	movw	r0, r24
-    7f20:	a7 be       	out	0x37, r10	; 55
-    7f22:	e8 95       	spm
-    7f24:	11 24       	eor	r1, r1
+    7f22:	0c 01       	movw	r0, r24
+    7f24:	e7 be       	out	0x37, r14	; 55
+    7f26:	e8 95       	spm
+    7f28:	11 24       	eor	r1, r1
         addrPtr += 2;
-    7f26:	4e 5f       	subi	r20, 0xFE	; 254
-    7f28:	5f 4f       	sbci	r21, 0xFF	; 255
+    7f2a:	32 96       	adiw	r30, 0x02	; 2
       } while (--ch);
-    7f2a:	f1 e0       	ldi	r31, 0x01	; 1
-    7f2c:	a0 38       	cpi	r26, 0x80	; 128
-    7f2e:	bf 07       	cpc	r27, r31
-    7f30:	51 f7       	brne	.-44     	; 0x7f06 <main+0x106>
+    7f2c:	81 e0       	ldi	r24, 0x01	; 1
+    7f2e:	a0 38       	cpi	r26, 0x80	; 128
+    7f30:	b8 07       	cpc	r27, r24
+    7f32:	61 f7       	brne	.-40     	; 0x7f0c <main+0x10c>
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    7f32:	f7 01       	movw	r30, r14
-    7f34:	c7 be       	out	0x37, r12	; 55
-    7f36:	e8 95       	spm
+    7f34:	f8 01       	movw	r30, r16
+    7f36:	d7 be       	out	0x37, r13	; 55
+    7f38:	e8 95       	spm
       boot_spm_busy_wait();
-    7f38:	07 b6       	in	r0, 0x37	; 55
-    7f3a:	00 fc       	sbrc	r0, 0
-    7f3c:	fd cf       	rjmp	.-6      	; 0x7f38 <main+0x138>
+    7f3a:	07 b6       	in	r0, 0x37	; 55
+    7f3c:	00 fc       	sbrc	r0, 0
+    7f3e:	fd cf       	rjmp	.-6      	; 0x7f3a <main+0x13a>
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    7f3e:	b7 be       	out	0x37, r11	; 55
-    7f40:	e8 95       	spm
-    7f42:	1c c0       	rjmp	.+56     	; 0x7f7c <main+0x17c>
+    7f40:	c7 be       	out	0x37, r12	; 55
+    7f42:	e8 95       	spm
+    7f44:	1c c0       	rjmp	.+56     	; 0x7f7e <main+0x17e>
 #endif
 
     }
     /* Read memory block mode, length is big endian.  */
     else if(ch == STK_READ_PAGE) {
-    7f44:	84 37       	cpi	r24, 0x74	; 116
-    7f46:	61 f4       	brne	.+24     	; 0x7f60 <main+0x160>
+    7f46:	84 37       	cpi	r24, 0x74	; 116
+    7f48:	61 f4       	brne	.+24     	; 0x7f62 <main+0x162>
       // READ PAGE - we only read flash
       getch();			/* getlen() */
-    7f48:	24 d0       	rcall	.+72     	; 0x7f92 <getch>
-      length = getch();
     7f4a:	23 d0       	rcall	.+70     	; 0x7f92 <getch>
-    7f4c:	08 2f       	mov	r16, r24
+      length = getch();
+    7f4c:	22 d0       	rcall	.+68     	; 0x7f92 <getch>
+    7f4e:	b8 2e       	mov	r11, r24
       getch();
-    7f4e:	21 d0       	rcall	.+66     	; 0x7f92 <getch>
+    7f50:	20 d0       	rcall	.+64     	; 0x7f92 <getch>
 
       verifySpace();
-    7f50:	32 d0       	rcall	.+100    	; 0x7fb6 <verifySpace>
+    7f52:	31 d0       	rcall	.+98     	; 0x7fb6 <verifySpace>
         __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #else
         // read a Flash byte and increment the address
         __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #endif
         putch(ch);
-    7f52:	f7 01       	movw	r30, r14
-    7f54:	85 91       	lpm	r24, Z+
-    7f56:	7f 01       	movw	r14, r30
-    7f58:	14 d0       	rcall	.+40     	; 0x7f82 <putch>
+    7f54:	f8 01       	movw	r30, r16
+    7f56:	85 91       	lpm	r24, Z+
+    7f58:	8f 01       	movw	r16, r30
+    7f5a:	14 d0       	rcall	.+40     	; 0x7f84 <putch>
       } while (--length);
-    7f5a:	01 50       	subi	r16, 0x01	; 1
-    7f5c:	d1 f7       	brne	.-12     	; 0x7f52 <main+0x152>
-    7f5e:	0e c0       	rjmp	.+28     	; 0x7f7c <main+0x17c>
+    7f5c:	ba 94       	dec	r11
+    7f5e:	d1 f7       	brne	.-12     	; 0x7f54 <main+0x154>
+    7f60:	0e c0       	rjmp	.+28     	; 0x7f7e <main+0x17e>
     }
 
     /* Get device signature bytes  */
     else if(ch == STK_READ_SIGN) {
-    7f60:	85 37       	cpi	r24, 0x75	; 117
-    7f62:	39 f4       	brne	.+14     	; 0x7f72 <main+0x172>
+    7f62:	85 37       	cpi	r24, 0x75	; 117
+    7f64:	39 f4       	brne	.+14     	; 0x7f74 <main+0x174>
       // READ SIGN - return what Avrdude wants to hear
       verifySpace();
-    7f64:	28 d0       	rcall	.+80     	; 0x7fb6 <verifySpace>
+    7f66:	27 d0       	rcall	.+78     	; 0x7fb6 <verifySpace>
       putch(SIGNATURE_0);
-    7f66:	8e e1       	ldi	r24, 0x1E	; 30
-    7f68:	0c d0       	rcall	.+24     	; 0x7f82 <putch>
+    7f68:	8e e1       	ldi	r24, 0x1E	; 30
+    7f6a:	0c d0       	rcall	.+24     	; 0x7f84 <putch>
       putch(SIGNATURE_1);
-    7f6a:	85 e9       	ldi	r24, 0x95	; 149
-    7f6c:	0a d0       	rcall	.+20     	; 0x7f82 <putch>
+    7f6c:	85 e9       	ldi	r24, 0x95	; 149
+    7f6e:	0a d0       	rcall	.+20     	; 0x7f84 <putch>
       putch(SIGNATURE_2);
-    7f6e:	8f e0       	ldi	r24, 0x0F	; 15
-    7f70:	84 cf       	rjmp	.-248    	; 0x7e7a <main+0x7a>
+    7f70:	8f e0       	ldi	r24, 0x0F	; 15
+    7f72:	87 cf       	rjmp	.-242    	; 0x7e82 <main+0x82>
     }
     else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
-    7f72:	81 35       	cpi	r24, 0x51	; 81
-    7f74:	11 f4       	brne	.+4      	; 0x7f7a <main+0x17a>
+    7f74:	81 35       	cpi	r24, 0x51	; 81
+    7f76:	11 f4       	brne	.+4      	; 0x7f7c <main+0x17c>
       // Adaboot no-wait mod
       watchdogConfig(WATCHDOG_16MS);
-    7f76:	88 e0       	ldi	r24, 0x08	; 8
-    7f78:	18 d0       	rcall	.+48     	; 0x7faa <watchdogConfig>
+    7f78:	88 e0       	ldi	r24, 0x08	; 8
+    7f7a:	17 d0       	rcall	.+46     	; 0x7faa <watchdogConfig>
       verifySpace();
     }
     else {
       // This covers the response to commands like STK_ENTER_PROGMODE
       verifySpace();
-    7f7a:	1d d0       	rcall	.+58     	; 0x7fb6 <verifySpace>
+    7f7c:	1c d0       	rcall	.+56     	; 0x7fb6 <verifySpace>
     }
     putch(STK_OK);
-    7f7c:	80 e1       	ldi	r24, 0x10	; 16
-    7f7e:	01 d0       	rcall	.+2      	; 0x7f82 <putch>
-    7f80:	6f cf       	rjmp	.-290    	; 0x7e60 <main+0x60>
-
-00007f82 <putch>:
+    7f7e:	80 e1       	ldi	r24, 0x10	; 16
+    7f80:	01 d0       	rcall	.+2      	; 0x7f84 <putch>
   }
+    7f82:	71 cf       	rjmp	.-286    	; 0x7e66 <main+0x66>
+
+00007f84 <putch>:
 }
 
 void putch(char ch) {
-    7f82:	98 2f       	mov	r25, r24
 #ifndef SOFT_UART
   while (!(UART_SRA & _BV(UDRE0)));
-    7f84:	80 91 c0 00 	lds	r24, 0x00C0
-    7f88:	85 ff       	sbrs	r24, 5
-    7f8a:	fc cf       	rjmp	.-8      	; 0x7f84 <putch+0x2>
+    7f84:	90 91 c0 00 	lds	r25, 0x00C0
+    7f88:	95 ff       	sbrs	r25, 5
+    7f8a:	fc cf       	rjmp	.-8      	; 0x7f84 <putch>
   UART_UDR = ch;
-    7f8c:	90 93 c6 00 	sts	0x00C6, r25
+    7f8c:	80 93 c6 00 	sts	0x00C6, r24
       [uartBit] "I" (UART_TX_BIT)
     :
       "r25"
@@ -546,41 +552,41 @@ void verifySpace() {
   }
   putch(STK_INSYNC);
     7fc2:	84 e1       	ldi	r24, 0x14	; 20
+    7fc4:	df cf       	rjmp	.-66     	; 0x7f84 <putch>
 }
-    7fc4:	de cf       	rjmp	.-68     	; 0x7f82 <putch>
+    7fc6:	cf 93       	push	r28
 
-00007fc6 <getNch>:
+00007fc8 <getNch>:
     ::[count] "M" (UART_B_VALUE)
   );
 }
 #endif
 
 void getNch(uint8_t count) {
-    7fc6:	1f 93       	push	r17
-    7fc8:	18 2f       	mov	r17, r24
-  do getch(); while (--count);
+    7fc8:	c8 2f       	mov	r28, r24
     7fca:	e3 df       	rcall	.-58     	; 0x7f92 <getch>
-    7fcc:	11 50       	subi	r17, 0x01	; 1
-    7fce:	e9 f7       	brne	.-6      	; 0x7fca <getNch+0x4>
-  verifySpace();
+  do getch(); while (--count);
+    7fcc:	c1 50       	subi	r28, 0x01	; 1
+    7fce:	e9 f7       	brne	.-6      	; 0x7fca <getNch+0x2>
     7fd0:	f2 df       	rcall	.-28     	; 0x7fb6 <verifySpace>
+  verifySpace();
+    7fd2:	cf 91       	pop	r28
 }
-    7fd2:	1f 91       	pop	r17
     7fd4:	08 95       	ret
 
 00007fd6 <appStart>:
+    7fd6:	28 2e       	mov	r2, r24
 
 void appStart(uint8_t rstFlags) {
   // save the reset flags in the designated register
   //  This can be saved in a main program by putting code in .init0 (which
   //  executes before normal c init code) to save R2 to a global variable.
   __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
-    7fd6:	28 2e       	mov	r2, r24
+    7fd8:	80 e0       	ldi	r24, 0x00	; 0
 
   watchdogConfig(WATCHDOG_OFF);
-    7fd8:	80 e0       	ldi	r24, 0x00	; 0
     7fda:	e7 df       	rcall	.-50     	; 0x7faa <watchdogConfig>
-  __asm__ __volatile__ (
     7fdc:	ee 27       	eor	r30, r30
+  __asm__ __volatile__ (
     7fde:	ff 27       	eor	r31, r31
     7fe0:	09 94       	ijmp
diff --git a/optiboot/bootloaders/optiboot/optiboot_atmega644p.hex b/optiboot/bootloaders/optiboot/optiboot_atmega644p.hex
deleted file mode 100644
index 0465e3a..0000000
--- a/optiboot/bootloaders/optiboot/optiboot_atmega644p.hex
+++ /dev/null
@@ -1,34 +0,0 @@
-:10FC0000112484B714BE81FFE6D085E08093810083
-:10FC100082E08093C00088E18093C10086E08093F9
-:10FC2000C20080E18093C4008EE0BFD0209A86E0BD
-:10FC300020E33CEF91E0309385002093840096BB55
-:10FC4000B09BFECF189AA8958150A9F7EE24FF2407
-:10FC5000AA24A394B5E0CB2EA1E1BA2EF3E0DF2EC7
-:10FC600098D0813461F495D0082FA5D0023829F1BD
-:10FC7000013811F485E001C083E083D07FC0823475
-:10FC800011F484E103C0853419F485E09CD076C07A
-:10FC9000853579F47ED0E82EFF247BD0082F10E044
-:10FCA000102F00270E291F29000F111F84D0780163
-:10FCB00065C0863521F484E086D080E0DECF8436CE
-:10FCC00009F040C066D065D0082F63D080E0E81608
-:10FCD00080EEF80618F4F701D7BEE895C0E0D1E051
-:10FCE00058D089930C17E1F7F0E0EF16F0EEFF061D
-:10FCF00018F0F701D7BEE8955ED007B600FCFDCF3F
-:10FD0000A701A0E0B1E02C9130E011968C91119701
-:10FD100090E0982F8827822B932B1296FA010C01E2
-:10FD2000A7BEE89511244E5F5F4FF2E0A030BF07F9
-:10FD300051F7F701C7BEE89507B600FCFDCFB7BE87
-:10FD4000E8951CC0843761F424D023D0082F21D03B
-:10FD500032D0F70185917F0114D00150D1F70EC048
-:10FD6000853739F428D08EE10CD086E90AD08AE0B4
-:10FD700084CF813511F488E018D01DD080E101D006
-:10FD80006FCF982F8091C00085FFFCCF9093C60065
-:10FD900008958091C00087FFFCCF8091C00084FD52
-:10FDA00001C0A8958091C6000895E0E6F0E098E1D2
-:10FDB000908380830895EDDF803219F088E0F5DFCD
-:10FDC000FFCF84E1DECF1F93182FE3DF1150E9F757
-:10FDD000F2DF1F910895282E80E0E7DFEE27FF274E
-:02FDE000099484
-:02FFFE000005FC
-:040000030000FC00FD
-:00000001FF
diff --git a/optiboot/bootloaders/optiboot/optiboot_atmega644p.lst b/optiboot/bootloaders/optiboot/optiboot_atmega644p.lst
deleted file mode 100644
index 9a157a8..0000000
--- a/optiboot/bootloaders/optiboot/optiboot_atmega644p.lst
+++ /dev/null
@@ -1,586 +0,0 @@
-
-optiboot_atmega644p.elf:     file format elf32-avr
-
-Sections:
-Idx Name          Size      VMA       LMA       File off  Algn
-  0 .text         000001e2  0000fc00  0000fc00  00000054  2**1
-                  CONTENTS, ALLOC, LOAD, READONLY, CODE
-  1 .version      00000002  0000fffe  0000fffe  00000236  2**0
-                  CONTENTS, READONLY
-  2 .debug_aranges 00000028  00000000  00000000  00000238  2**0
-                  CONTENTS, READONLY, DEBUGGING
-  3 .debug_pubnames 0000005f  00000000  00000000  00000260  2**0
-                  CONTENTS, READONLY, DEBUGGING
-  4 .debug_info   00000294  00000000  00000000  000002bf  2**0
-                  CONTENTS, READONLY, DEBUGGING
-  5 .debug_abbrev 0000016b  00000000  00000000  00000553  2**0
-                  CONTENTS, READONLY, DEBUGGING
-  6 .debug_line   00000421  00000000  00000000  000006be  2**0
-                  CONTENTS, READONLY, DEBUGGING
-  7 .debug_frame  00000080  00000000  00000000  00000ae0  2**2
-                  CONTENTS, READONLY, DEBUGGING
-  8 .debug_str    00000131  00000000  00000000  00000b60  2**0
-                  CONTENTS, READONLY, DEBUGGING
-  9 .debug_loc    00000266  00000000  00000000  00000c91  2**0
-                  CONTENTS, READONLY, DEBUGGING
- 10 .debug_ranges 00000078  00000000  00000000  00000ef7  2**0
-                  CONTENTS, READONLY, DEBUGGING
-
-Disassembly of section .text:
-
-0000fc00 <main>:
-# define UART_SRL UBRR3L
-# define UART_UDR UDR3
-#endif
-
-/* main program starts here */
-int main(void) {
-    fc00:	11 24       	eor	r1, r1
-#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
-  SP=RAMEND;  // This is done by hardware reset
-#endif
-
-  // Adaboot no-wait mod
-  ch = MCUSR;
-    fc02:	84 b7       	in	r24, 0x34	; 52
-  MCUSR = 0;
-    fc04:	14 be       	out	0x34, r1	; 52
-  if (!(ch & _BV(EXTRF))) appStart(ch);
-    fc06:	81 ff       	sbrs	r24, 1
-    fc08:	e6 d0       	rcall	.+460    	; 0xfdd6 <appStart>
-
-#if LED_START_FLASHES > 0
-  // Set up Timer 1 for timeout counter
-  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
-    fc0a:	85 e0       	ldi	r24, 0x05	; 5
-    fc0c:	80 93 81 00 	sts	0x0081, r24
-  UCSRA = _BV(U2X); //Double speed mode USART
-  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
-  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
-  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
-#else
-  UART_SRA = _BV(U2X0); //Double speed mode USART0
-    fc10:	82 e0       	ldi	r24, 0x02	; 2
-    fc12:	80 93 c0 00 	sts	0x00C0, r24
-  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
-    fc16:	88 e1       	ldi	r24, 0x18	; 24
-    fc18:	80 93 c1 00 	sts	0x00C1, r24
-  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
-    fc1c:	86 e0       	ldi	r24, 0x06	; 6
-    fc1e:	80 93 c2 00 	sts	0x00C2, r24
-  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
-    fc22:	80 e1       	ldi	r24, 0x10	; 16
-    fc24:	80 93 c4 00 	sts	0x00C4, r24
-#endif
-#endif
-
-  // Set up watchdog to trigger after 500ms
-  watchdogConfig(WATCHDOG_1S);
-    fc28:	8e e0       	ldi	r24, 0x0E	; 14
-    fc2a:	bf d0       	rcall	.+382    	; 0xfdaa <watchdogConfig>
-
-#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
-  /* Set LED pin as output */
-  LED_DDR |= _BV(LED);
-    fc2c:	20 9a       	sbi	0x04, 0	; 4
-    fc2e:	86 e0       	ldi	r24, 0x06	; 6
-}
-
-#if LED_START_FLASHES > 0
-void flash_led(uint8_t count) {
-  do {
-    TCNT1 = -(F_CPU/(1024*16));
-    fc30:	20 e3       	ldi	r18, 0x30	; 48
-    fc32:	3c ef       	ldi	r19, 0xFC	; 252
-    TIFR1 = _BV(TOV1);
-    fc34:	91 e0       	ldi	r25, 0x01	; 1
-}
-
-#if LED_START_FLASHES > 0
-void flash_led(uint8_t count) {
-  do {
-    TCNT1 = -(F_CPU/(1024*16));
-    fc36:	30 93 85 00 	sts	0x0085, r19
-    fc3a:	20 93 84 00 	sts	0x0084, r18
-    TIFR1 = _BV(TOV1);
-    fc3e:	96 bb       	out	0x16, r25	; 22
-    while(!(TIFR1 & _BV(TOV1)));
-    fc40:	b0 9b       	sbis	0x16, 0	; 22
-    fc42:	fe cf       	rjmp	.-4      	; 0xfc40 <main+0x40>
-#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
-    LED_PORT ^= _BV(LED);
-#else
-    LED_PIN |= _BV(LED);
-    fc44:	18 9a       	sbi	0x03, 0	; 3
-}
-#endif
-
-// Watchdog functions. These are only safe with interrupts turned off.
-void watchdogReset() {
-  __asm__ __volatile__ (
-    fc46:	a8 95       	wdr
-    LED_PORT ^= _BV(LED);
-#else
-    LED_PIN |= _BV(LED);
-#endif
-    watchdogReset();
-  } while (--count);
-    fc48:	81 50       	subi	r24, 0x01	; 1
-    fc4a:	a9 f7       	brne	.-22     	; 0xfc36 <main+0x36>
-    fc4c:	ee 24       	eor	r14, r14
-    fc4e:	ff 24       	eor	r15, r15
-      ch = SPM_PAGESIZE / 2;
-      do {
-        uint16_t a;
-        a = *bufPtr++;
-        a |= (*bufPtr++) << 8;
-        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    fc50:	aa 24       	eor	r10, r10
-    fc52:	a3 94       	inc	r10
-        addrPtr += 2;
-      } while (--ch);
-
-      // Write from programming buffer
-      __boot_page_write_short((uint16_t)(void*)address);
-    fc54:	b5 e0       	ldi	r27, 0x05	; 5
-    fc56:	cb 2e       	mov	r12, r27
-      boot_spm_busy_wait();
-
-#if defined(RWWSRE)
-      // Reenable read access to flash
-      boot_rww_enable();
-    fc58:	a1 e1       	ldi	r26, 0x11	; 17
-    fc5a:	ba 2e       	mov	r11, r26
-
-      // If we are in NRWW section, page erase has to be delayed until now.
-      // Todo: Take RAMPZ into account (not doing so just means that we will
-      //  treat the top of both "pages" of flash as NRWW, for a slight speed
-      //  decrease, so fixing this is not urgent.)
-      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    fc5c:	f3 e0       	ldi	r31, 0x03	; 3
-    fc5e:	df 2e       	mov	r13, r31
-#endif
-
-  /* Forever loop */
-  for (;;) {
-    /* get character from UART */
-    ch = getch();
-    fc60:	98 d0       	rcall	.+304    	; 0xfd92 <getch>
-
-    if(ch == STK_GET_PARAMETER) {
-    fc62:	81 34       	cpi	r24, 0x41	; 65
-    fc64:	61 f4       	brne	.+24     	; 0xfc7e <main+0x7e>
-      unsigned char which = getch();
-    fc66:	95 d0       	rcall	.+298    	; 0xfd92 <getch>
-    fc68:	08 2f       	mov	r16, r24
-      verifySpace();
-    fc6a:	a5 d0       	rcall	.+330    	; 0xfdb6 <verifySpace>
-      if (which == 0x82) {
-    fc6c:	02 38       	cpi	r16, 0x82	; 130
-    fc6e:	29 f1       	breq	.+74     	; 0xfcba <main+0xba>
-	/*
-	 * Send optiboot version as "minor SW version"
-	 */
-	putch(OPTIBOOT_MINVER);
-      } else if (which == 0x81) {
-    fc70:	01 38       	cpi	r16, 0x81	; 129
-    fc72:	11 f4       	brne	.+4      	; 0xfc78 <main+0x78>
-	  putch(OPTIBOOT_MAJVER);
-    fc74:	85 e0       	ldi	r24, 0x05	; 5
-    fc76:	01 c0       	rjmp	.+2      	; 0xfc7a <main+0x7a>
-      } else {
-	/*
-	 * GET PARAMETER returns a generic 0x03 reply for
-         * other parameters - enough to keep Avrdude happy
-	 */
-	putch(0x03);
-    fc78:	83 e0       	ldi	r24, 0x03	; 3
-    fc7a:	83 d0       	rcall	.+262    	; 0xfd82 <putch>
-    fc7c:	7f c0       	rjmp	.+254    	; 0xfd7c <main+0x17c>
-      }
-    }
-    else if(ch == STK_SET_DEVICE) {
-    fc7e:	82 34       	cpi	r24, 0x42	; 66
-    fc80:	11 f4       	brne	.+4      	; 0xfc86 <main+0x86>
-      // SET DEVICE is ignored
-      getNch(20);
-    fc82:	84 e1       	ldi	r24, 0x14	; 20
-    fc84:	03 c0       	rjmp	.+6      	; 0xfc8c <main+0x8c>
-    }
-    else if(ch == STK_SET_DEVICE_EXT) {
-    fc86:	85 34       	cpi	r24, 0x45	; 69
-    fc88:	19 f4       	brne	.+6      	; 0xfc90 <main+0x90>
-      // SET DEVICE EXT is ignored
-      getNch(5);
-    fc8a:	85 e0       	ldi	r24, 0x05	; 5
-    fc8c:	9c d0       	rcall	.+312    	; 0xfdc6 <getNch>
-    fc8e:	76 c0       	rjmp	.+236    	; 0xfd7c <main+0x17c>
-    }
-    else if(ch == STK_LOAD_ADDRESS) {
-    fc90:	85 35       	cpi	r24, 0x55	; 85
-    fc92:	79 f4       	brne	.+30     	; 0xfcb2 <main+0xb2>
-      // LOAD ADDRESS
-      uint16_t newAddress;
-      newAddress = getch();
-    fc94:	7e d0       	rcall	.+252    	; 0xfd92 <getch>
-      newAddress = (newAddress & 0xff) | (getch() << 8);
-    fc96:	e8 2e       	mov	r14, r24
-    fc98:	ff 24       	eor	r15, r15
-    fc9a:	7b d0       	rcall	.+246    	; 0xfd92 <getch>
-    fc9c:	08 2f       	mov	r16, r24
-    fc9e:	10 e0       	ldi	r17, 0x00	; 0
-    fca0:	10 2f       	mov	r17, r16
-    fca2:	00 27       	eor	r16, r16
-    fca4:	0e 29       	or	r16, r14
-    fca6:	1f 29       	or	r17, r15
-#ifdef RAMPZ
-      // Transfer top bit to RAMPZ
-      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
-#endif
-      newAddress += newAddress; // Convert from word address to byte address
-    fca8:	00 0f       	add	r16, r16
-    fcaa:	11 1f       	adc	r17, r17
-      address = newAddress;
-      verifySpace();
-    fcac:	84 d0       	rcall	.+264    	; 0xfdb6 <verifySpace>
-    fcae:	78 01       	movw	r14, r16
-    fcb0:	65 c0       	rjmp	.+202    	; 0xfd7c <main+0x17c>
-    }
-    else if(ch == STK_UNIVERSAL) {
-    fcb2:	86 35       	cpi	r24, 0x56	; 86
-    fcb4:	21 f4       	brne	.+8      	; 0xfcbe <main+0xbe>
-      // UNIVERSAL command is ignored
-      getNch(4);
-    fcb6:	84 e0       	ldi	r24, 0x04	; 4
-    fcb8:	86 d0       	rcall	.+268    	; 0xfdc6 <getNch>
-      putch(0x00);
-    fcba:	80 e0       	ldi	r24, 0x00	; 0
-    fcbc:	de cf       	rjmp	.-68     	; 0xfc7a <main+0x7a>
-    }
-    /* Write memory, length is big endian and is in bytes */
-    else if(ch == STK_PROG_PAGE) {
-    fcbe:	84 36       	cpi	r24, 0x64	; 100
-    fcc0:	09 f0       	breq	.+2      	; 0xfcc4 <main+0xc4>
-    fcc2:	40 c0       	rjmp	.+128    	; 0xfd44 <main+0x144>
-      // PROGRAM PAGE - we support flash programming only, not EEPROM
-      uint8_t *bufPtr;
-      uint16_t addrPtr;
-
-      getch();			/* getlen() */
-    fcc4:	66 d0       	rcall	.+204    	; 0xfd92 <getch>
-      length = getch();
-    fcc6:	65 d0       	rcall	.+202    	; 0xfd92 <getch>
-    fcc8:	08 2f       	mov	r16, r24
-      getch();
-    fcca:	63 d0       	rcall	.+198    	; 0xfd92 <getch>
-
-      // If we are in RWW section, immediately start page erase
-      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    fccc:	80 e0       	ldi	r24, 0x00	; 0
-    fcce:	e8 16       	cp	r14, r24
-    fcd0:	80 ee       	ldi	r24, 0xE0	; 224
-    fcd2:	f8 06       	cpc	r15, r24
-    fcd4:	18 f4       	brcc	.+6      	; 0xfcdc <main+0xdc>
-    fcd6:	f7 01       	movw	r30, r14
-    fcd8:	d7 be       	out	0x37, r13	; 55
-    fcda:	e8 95       	spm
-    fcdc:	c0 e0       	ldi	r28, 0x00	; 0
-    fcde:	d1 e0       	ldi	r29, 0x01	; 1
-
-      // While that is going on, read in page contents
-      bufPtr = buff;
-      do *bufPtr++ = getch();
-    fce0:	58 d0       	rcall	.+176    	; 0xfd92 <getch>
-    fce2:	89 93       	st	Y+, r24
-      while (--length);
-    fce4:	0c 17       	cp	r16, r28
-    fce6:	e1 f7       	brne	.-8      	; 0xfce0 <main+0xe0>
-
-      // If we are in NRWW section, page erase has to be delayed until now.
-      // Todo: Take RAMPZ into account (not doing so just means that we will
-      //  treat the top of both "pages" of flash as NRWW, for a slight speed
-      //  decrease, so fixing this is not urgent.)
-      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    fce8:	f0 e0       	ldi	r31, 0x00	; 0
-    fcea:	ef 16       	cp	r14, r31
-    fcec:	f0 ee       	ldi	r31, 0xE0	; 224
-    fcee:	ff 06       	cpc	r15, r31
-    fcf0:	18 f0       	brcs	.+6      	; 0xfcf8 <main+0xf8>
-    fcf2:	f7 01       	movw	r30, r14
-    fcf4:	d7 be       	out	0x37, r13	; 55
-    fcf6:	e8 95       	spm
-
-      // Read command terminator, start reply
-      verifySpace();
-    fcf8:	5e d0       	rcall	.+188    	; 0xfdb6 <verifySpace>
-
-      // If only a partial page is to be programmed, the erase might not be complete.
-      // So check that here
-      boot_spm_busy_wait();
-    fcfa:	07 b6       	in	r0, 0x37	; 55
-    fcfc:	00 fc       	sbrc	r0, 0
-    fcfe:	fd cf       	rjmp	.-6      	; 0xfcfa <main+0xfa>
-    fd00:	a7 01       	movw	r20, r14
-    fd02:	a0 e0       	ldi	r26, 0x00	; 0
-    fd04:	b1 e0       	ldi	r27, 0x01	; 1
-      bufPtr = buff;
-      addrPtr = (uint16_t)(void*)address;
-      ch = SPM_PAGESIZE / 2;
-      do {
-        uint16_t a;
-        a = *bufPtr++;
-    fd06:	2c 91       	ld	r18, X
-    fd08:	30 e0       	ldi	r19, 0x00	; 0
-        a |= (*bufPtr++) << 8;
-    fd0a:	11 96       	adiw	r26, 0x01	; 1
-    fd0c:	8c 91       	ld	r24, X
-    fd0e:	11 97       	sbiw	r26, 0x01	; 1
-    fd10:	90 e0       	ldi	r25, 0x00	; 0
-    fd12:	98 2f       	mov	r25, r24
-    fd14:	88 27       	eor	r24, r24
-    fd16:	82 2b       	or	r24, r18
-    fd18:	93 2b       	or	r25, r19
-# define UART_SRL UBRR3L
-# define UART_UDR UDR3
-#endif
-
-/* main program starts here */
-int main(void) {
-    fd1a:	12 96       	adiw	r26, 0x02	; 2
-      ch = SPM_PAGESIZE / 2;
-      do {
-        uint16_t a;
-        a = *bufPtr++;
-        a |= (*bufPtr++) << 8;
-        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    fd1c:	fa 01       	movw	r30, r20
-    fd1e:	0c 01       	movw	r0, r24
-    fd20:	a7 be       	out	0x37, r10	; 55
-    fd22:	e8 95       	spm
-    fd24:	11 24       	eor	r1, r1
-        addrPtr += 2;
-    fd26:	4e 5f       	subi	r20, 0xFE	; 254
-    fd28:	5f 4f       	sbci	r21, 0xFF	; 255
-      } while (--ch);
-    fd2a:	f2 e0       	ldi	r31, 0x02	; 2
-    fd2c:	a0 30       	cpi	r26, 0x00	; 0
-    fd2e:	bf 07       	cpc	r27, r31
-    fd30:	51 f7       	brne	.-44     	; 0xfd06 <main+0x106>
-
-      // Write from programming buffer
-      __boot_page_write_short((uint16_t)(void*)address);
-    fd32:	f7 01       	movw	r30, r14
-    fd34:	c7 be       	out	0x37, r12	; 55
-    fd36:	e8 95       	spm
-      boot_spm_busy_wait();
-    fd38:	07 b6       	in	r0, 0x37	; 55
-    fd3a:	00 fc       	sbrc	r0, 0
-    fd3c:	fd cf       	rjmp	.-6      	; 0xfd38 <main+0x138>
-
-#if defined(RWWSRE)
-      // Reenable read access to flash
-      boot_rww_enable();
-    fd3e:	b7 be       	out	0x37, r11	; 55
-    fd40:	e8 95       	spm
-    fd42:	1c c0       	rjmp	.+56     	; 0xfd7c <main+0x17c>
-#endif
-
-    }
-    /* Read memory block mode, length is big endian.  */
-    else if(ch == STK_READ_PAGE) {
-    fd44:	84 37       	cpi	r24, 0x74	; 116
-    fd46:	61 f4       	brne	.+24     	; 0xfd60 <main+0x160>
-      // READ PAGE - we only read flash
-      getch();			/* getlen() */
-    fd48:	24 d0       	rcall	.+72     	; 0xfd92 <getch>
-      length = getch();
-    fd4a:	23 d0       	rcall	.+70     	; 0xfd92 <getch>
-    fd4c:	08 2f       	mov	r16, r24
-      getch();
-    fd4e:	21 d0       	rcall	.+66     	; 0xfd92 <getch>
-
-      verifySpace();
-    fd50:	32 d0       	rcall	.+100    	; 0xfdb6 <verifySpace>
-        __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
-#else
-        // read a Flash byte and increment the address
-        __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
-#endif
-        putch(ch);
-    fd52:	f7 01       	movw	r30, r14
-    fd54:	85 91       	lpm	r24, Z+
-    fd56:	7f 01       	movw	r14, r30
-    fd58:	14 d0       	rcall	.+40     	; 0xfd82 <putch>
-      } while (--length);
-    fd5a:	01 50       	subi	r16, 0x01	; 1
-    fd5c:	d1 f7       	brne	.-12     	; 0xfd52 <main+0x152>
-    fd5e:	0e c0       	rjmp	.+28     	; 0xfd7c <main+0x17c>
-    }
-
-    /* Get device signature bytes  */
-    else if(ch == STK_READ_SIGN) {
-    fd60:	85 37       	cpi	r24, 0x75	; 117
-    fd62:	39 f4       	brne	.+14     	; 0xfd72 <main+0x172>
-      // READ SIGN - return what Avrdude wants to hear
-      verifySpace();
-    fd64:	28 d0       	rcall	.+80     	; 0xfdb6 <verifySpace>
-      putch(SIGNATURE_0);
-    fd66:	8e e1       	ldi	r24, 0x1E	; 30
-    fd68:	0c d0       	rcall	.+24     	; 0xfd82 <putch>
-      putch(SIGNATURE_1);
-    fd6a:	86 e9       	ldi	r24, 0x96	; 150
-    fd6c:	0a d0       	rcall	.+20     	; 0xfd82 <putch>
-      putch(SIGNATURE_2);
-    fd6e:	8a e0       	ldi	r24, 0x0A	; 10
-    fd70:	84 cf       	rjmp	.-248    	; 0xfc7a <main+0x7a>
-    }
-    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
-    fd72:	81 35       	cpi	r24, 0x51	; 81
-    fd74:	11 f4       	brne	.+4      	; 0xfd7a <main+0x17a>
-      // Adaboot no-wait mod
-      watchdogConfig(WATCHDOG_16MS);
-    fd76:	88 e0       	ldi	r24, 0x08	; 8
-    fd78:	18 d0       	rcall	.+48     	; 0xfdaa <watchdogConfig>
-      verifySpace();
-    }
-    else {
-      // This covers the response to commands like STK_ENTER_PROGMODE
-      verifySpace();
-    fd7a:	1d d0       	rcall	.+58     	; 0xfdb6 <verifySpace>
-    }
-    putch(STK_OK);
-    fd7c:	80 e1       	ldi	r24, 0x10	; 16
-    fd7e:	01 d0       	rcall	.+2      	; 0xfd82 <putch>
-    fd80:	6f cf       	rjmp	.-290    	; 0xfc60 <main+0x60>
-
-0000fd82 <putch>:
-  }
-}
-
-void putch(char ch) {
-    fd82:	98 2f       	mov	r25, r24
-#ifndef SOFT_UART
-  while (!(UART_SRA & _BV(UDRE0)));
-    fd84:	80 91 c0 00 	lds	r24, 0x00C0
-    fd88:	85 ff       	sbrs	r24, 5
-    fd8a:	fc cf       	rjmp	.-8      	; 0xfd84 <putch+0x2>
-  UART_UDR = ch;
-    fd8c:	90 93 c6 00 	sts	0x00C6, r25
-      [uartBit] "I" (UART_TX_BIT)
-    :
-      "r25"
-  );
-#endif
-}
-    fd90:	08 95       	ret
-
-0000fd92 <getch>:
-      [uartBit] "I" (UART_RX_BIT)
-    :
-      "r25"
-);
-#else
-  while(!(UART_SRA & _BV(RXC0)))
-    fd92:	80 91 c0 00 	lds	r24, 0x00C0
-    fd96:	87 ff       	sbrs	r24, 7
-    fd98:	fc cf       	rjmp	.-8      	; 0xfd92 <getch>
-    ;
-  if (!(UART_SRA & _BV(FE0))) {
-    fd9a:	80 91 c0 00 	lds	r24, 0x00C0
-    fd9e:	84 fd       	sbrc	r24, 4
-    fda0:	01 c0       	rjmp	.+2      	; 0xfda4 <getch+0x12>
-}
-#endif
-
-// Watchdog functions. These are only safe with interrupts turned off.
-void watchdogReset() {
-  __asm__ __volatile__ (
-    fda2:	a8 95       	wdr
-       * don't care that an invalid char is returned...)
-       */
-    watchdogReset();
-  }
-  
-  ch = UART_UDR;
-    fda4:	80 91 c6 00 	lds	r24, 0x00C6
-  LED_PIN |= _BV(LED);
-#endif
-#endif
-
-  return ch;
-}
-    fda8:	08 95       	ret
-
-0000fdaa <watchdogConfig>:
-    "wdr\n"
-  );
-}
-
-void watchdogConfig(uint8_t x) {
-  WDTCSR = _BV(WDCE) | _BV(WDE);
-    fdaa:	e0 e6       	ldi	r30, 0x60	; 96
-    fdac:	f0 e0       	ldi	r31, 0x00	; 0
-    fdae:	98 e1       	ldi	r25, 0x18	; 24
-    fdb0:	90 83       	st	Z, r25
-  WDTCSR = x;
-    fdb2:	80 83       	st	Z, r24
-}
-    fdb4:	08 95       	ret
-
-0000fdb6 <verifySpace>:
-  do getch(); while (--count);
-  verifySpace();
-}
-
-void verifySpace() {
-  if (getch() != CRC_EOP) {
-    fdb6:	ed df       	rcall	.-38     	; 0xfd92 <getch>
-    fdb8:	80 32       	cpi	r24, 0x20	; 32
-    fdba:	19 f0       	breq	.+6      	; 0xfdc2 <verifySpace+0xc>
-    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
-    fdbc:	88 e0       	ldi	r24, 0x08	; 8
-    fdbe:	f5 df       	rcall	.-22     	; 0xfdaa <watchdogConfig>
-    fdc0:	ff cf       	rjmp	.-2      	; 0xfdc0 <verifySpace+0xa>
-    while (1)			      // and busy-loop so that WD causes
-      ;				      //  a reset and app start.
-  }
-  putch(STK_INSYNC);
-    fdc2:	84 e1       	ldi	r24, 0x14	; 20
-}
-    fdc4:	de cf       	rjmp	.-68     	; 0xfd82 <putch>
-
-0000fdc6 <getNch>:
-    ::[count] "M" (UART_B_VALUE)
-  );
-}
-#endif
-
-void getNch(uint8_t count) {
-    fdc6:	1f 93       	push	r17
-    fdc8:	18 2f       	mov	r17, r24
-  do getch(); while (--count);
-    fdca:	e3 df       	rcall	.-58     	; 0xfd92 <getch>
-    fdcc:	11 50       	subi	r17, 0x01	; 1
-    fdce:	e9 f7       	brne	.-6      	; 0xfdca <getNch+0x4>
-  verifySpace();
-    fdd0:	f2 df       	rcall	.-28     	; 0xfdb6 <verifySpace>
-}
-    fdd2:	1f 91       	pop	r17
-    fdd4:	08 95       	ret
-
-0000fdd6 <appStart>:
-
-void appStart(uint8_t rstFlags) {
-  // save the reset flags in the designated register
-  //  This can be saved in a main program by putting code in .init0 (which
-  //  executes before normal c init code) to save R2 to a global variable.
-  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
-    fdd6:	28 2e       	mov	r2, r24
-
-  watchdogConfig(WATCHDOG_OFF);
-    fdd8:	80 e0       	ldi	r24, 0x00	; 0
-    fdda:	e7 df       	rcall	.-50     	; 0xfdaa <watchdogConfig>
-  __asm__ __volatile__ (
-    fddc:	ee 27       	eor	r30, r30
-    fdde:	ff 27       	eor	r31, r31
-    fde0:	09 94       	ijmp
diff --git a/optiboot/bootloaders/optiboot/optiboot_diecimila.lst b/optiboot/bootloaders/optiboot/optiboot_diecimila.lst
index 6f31a80..54f4872 100644
--- a/optiboot/bootloaders/optiboot/optiboot_diecimila.lst
+++ b/optiboot/bootloaders/optiboot/optiboot_diecimila.lst
@@ -3,27 +3,27 @@ optiboot_atmega168.elf:     file format elf32-avr
 
 Sections:
 Idx Name          Size      VMA       LMA       File off  Algn
-  0 .text         000001e2  00003e00  00003e00  00000054  2**1
+  0 .data         00000000  00800100  00003fe2  00000256  2**0
+                  CONTENTS, ALLOC, LOAD, DATA
+  1 .text         000001e2  00003e00  00003e00  00000074  2**1
                   CONTENTS, ALLOC, LOAD, READONLY, CODE
-  1 .version      00000002  00003ffe  00003ffe  00000236  2**0
+  2 .version      00000002  00003ffe  00003ffe  00000256  2**0
                   CONTENTS, READONLY
-  2 .debug_aranges 00000028  00000000  00000000  00000238  2**0
+  3 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                   CONTENTS, READONLY, DEBUGGING
-  3 .debug_pubnames 0000005f  00000000  00000000  00000260  2**0
+  4 .debug_info   00000290  00000000  00000000  00000280  2**0
                   CONTENTS, READONLY, DEBUGGING
-  4 .debug_info   00000294  00000000  00000000  000002bf  2**0
+  5 .debug_abbrev 00000176  00000000  00000000  00000510  2**0
                   CONTENTS, READONLY, DEBUGGING
-  5 .debug_abbrev 0000016b  00000000  00000000  00000553  2**0
+  6 .debug_line   00000192  00000000  00000000  00000686  2**0
                   CONTENTS, READONLY, DEBUGGING
-  6 .debug_line   00000421  00000000  00000000  000006be  2**0
+  7 .debug_frame  00000094  00000000  00000000  00000818  2**2
                   CONTENTS, READONLY, DEBUGGING
-  7 .debug_frame  00000080  00000000  00000000  00000ae0  2**2
+  8 .debug_str    00000131  00000000  00000000  000008ac  2**0
                   CONTENTS, READONLY, DEBUGGING
-  8 .debug_str    00000131  00000000  00000000  00000b60  2**0
+  9 .debug_loc    0000026e  00000000  00000000  000009dd  2**0
                   CONTENTS, READONLY, DEBUGGING
-  9 .debug_loc    00000266  00000000  00000000  00000c91  2**0
-                  CONTENTS, READONLY, DEBUGGING
- 10 .debug_ranges 00000078  00000000  00000000  00000ef7  2**0
+ 10 .debug_ranges 00000048  00000000  00000000  00000c4b  2**0
                   CONTENTS, READONLY, DEBUGGING
 
 Disassembly of section .text:
@@ -35,437 +35,443 @@ Disassembly of section .text:
 
 /* main program starts here */
 int main(void) {
-    3e00:	11 24       	eor	r1, r1
+    3e00:	0f 92       	push	r0
+    3e02:	cd b7       	in	r28, 0x3d	; 61
+    3e04:	de b7       	in	r29, 0x3e	; 62
+  //  SP points to RAMEND
+  //  r1 contains zero
+  //
+  // If not, uncomment the following instructions:
+  // cli();
+  asm volatile ("clr __zero_reg__");
+    3e06:	11 24       	eor	r1, r1
 #if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
   SP=RAMEND;  // This is done by hardware reset
 #endif
 
   // Adaboot no-wait mod
   ch = MCUSR;
-    3e02:	84 b7       	in	r24, 0x34	; 52
+    3e08:	84 b7       	in	r24, 0x34	; 52
   MCUSR = 0;
-    3e04:	14 be       	out	0x34, r1	; 52
+    3e0a:	14 be       	out	0x34, r1	; 52
   if (!(ch & _BV(EXTRF))) appStart(ch);
-    3e06:	81 ff       	sbrs	r24, 1
-    3e08:	e6 d0       	rcall	.+460    	; 0x3fd6 <appStart>
+    3e0c:	81 ff       	sbrs	r24, 1
+    3e0e:	e3 d0       	rcall	.+454    	; 0x3fd6 <appStart>
 
 #if LED_START_FLASHES > 0
   // Set up Timer 1 for timeout counter
   TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
-    3e0a:	85 e0       	ldi	r24, 0x05	; 5
-    3e0c:	80 93 81 00 	sts	0x0081, r24
+    3e10:	85 e0       	ldi	r24, 0x05	; 5
+    3e12:	80 93 81 00 	sts	0x0081, r24
   UCSRA = _BV(U2X); //Double speed mode USART
   UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
   UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
   UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
 #else
   UART_SRA = _BV(U2X0); //Double speed mode USART0
-    3e10:	82 e0       	ldi	r24, 0x02	; 2
-    3e12:	80 93 c0 00 	sts	0x00C0, r24
+    3e16:	82 e0       	ldi	r24, 0x02	; 2
+    3e18:	80 93 c0 00 	sts	0x00C0, r24
   UART_SRB = _BV(RXEN0) | _BV(TXEN0);
-    3e16:	88 e1       	ldi	r24, 0x18	; 24
-    3e18:	80 93 c1 00 	sts	0x00C1, r24
+    3e1c:	88 e1       	ldi	r24, 0x18	; 24
+    3e1e:	80 93 c1 00 	sts	0x00C1, r24
   UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
-    3e1c:	86 e0       	ldi	r24, 0x06	; 6
-    3e1e:	80 93 c2 00 	sts	0x00C2, r24
+    3e22:	86 e0       	ldi	r24, 0x06	; 6
+    3e24:	80 93 c2 00 	sts	0x00C2, r24
   UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
-    3e22:	80 e1       	ldi	r24, 0x10	; 16
-    3e24:	80 93 c4 00 	sts	0x00C4, r24
+    3e28:	80 e1       	ldi	r24, 0x10	; 16
+    3e2a:	80 93 c4 00 	sts	0x00C4, r24
 #endif
 #endif
 
   // Set up watchdog to trigger after 500ms
   watchdogConfig(WATCHDOG_1S);
-    3e28:	8e e0       	ldi	r24, 0x0E	; 14
-    3e2a:	bf d0       	rcall	.+382    	; 0x3faa <watchdogConfig>
+    3e2e:	8e e0       	ldi	r24, 0x0E	; 14
+    3e30:	bc d0       	rcall	.+376    	; 0x3faa <watchdogConfig>
 
 #if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
   /* Set LED pin as output */
   LED_DDR |= _BV(LED);
-    3e2c:	25 9a       	sbi	0x04, 5	; 4
-    3e2e:	86 e0       	ldi	r24, 0x06	; 6
+    3e32:	25 9a       	sbi	0x04, 5	; 4
+    3e34:	26 e0       	ldi	r18, 0x06	; 6
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    3e30:	20 e3       	ldi	r18, 0x30	; 48
-    3e32:	3c ef       	ldi	r19, 0xFC	; 252
+    3e36:	80 e3       	ldi	r24, 0x30	; 48
+    3e38:	9c ef       	ldi	r25, 0xFC	; 252
     TIFR1 = _BV(TOV1);
-    3e34:	91 e0       	ldi	r25, 0x01	; 1
+    3e3a:	31 e0       	ldi	r19, 0x01	; 1
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    3e36:	30 93 85 00 	sts	0x0085, r19
-    3e3a:	20 93 84 00 	sts	0x0084, r18
+    3e3c:	90 93 85 00 	sts	0x0085, r25
+    3e40:	80 93 84 00 	sts	0x0084, r24
     TIFR1 = _BV(TOV1);
-    3e3e:	96 bb       	out	0x16, r25	; 22
+    3e44:	36 bb       	out	0x16, r19	; 22
     while(!(TIFR1 & _BV(TOV1)));
-    3e40:	b0 9b       	sbis	0x16, 0	; 22
-    3e42:	fe cf       	rjmp	.-4      	; 0x3e40 <main+0x40>
+    3e46:	b0 9b       	sbis	0x16, 0	; 22
+    3e48:	fe cf       	rjmp	.-4      	; 0x3e46 <main+0x46>
 #if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
-    3e44:	1d 9a       	sbi	0x03, 5	; 3
+    3e4a:	1d 9a       	sbi	0x03, 5	; 3
 }
 #endif
 
 // Watchdog functions. These are only safe with interrupts turned off.
 void watchdogReset() {
   __asm__ __volatile__ (
-    3e46:	a8 95       	wdr
+    3e4c:	a8 95       	wdr
+    3e4e:	21 50       	subi	r18, 0x01	; 1
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
 #endif
     watchdogReset();
   } while (--count);
-    3e48:	81 50       	subi	r24, 0x01	; 1
-    3e4a:	a9 f7       	brne	.-22     	; 0x3e36 <main+0x36>
-    3e4c:	ee 24       	eor	r14, r14
-    3e4e:	ff 24       	eor	r15, r15
+    3e50:	a9 f7       	brne	.-22     	; 0x3e3c <main+0x3c>
+    3e52:	00 e0       	ldi	r16, 0x00	; 0
+    3e54:	10 e0       	ldi	r17, 0x00	; 0
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    3e50:	aa 24       	eor	r10, r10
-    3e52:	a3 94       	inc	r10
+    3e56:	ee 24       	eor	r14, r14
+    3e58:	e3 94       	inc	r14
         addrPtr += 2;
       } while (--ch);
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    3e54:	b5 e0       	ldi	r27, 0x05	; 5
-    3e56:	cb 2e       	mov	r12, r27
+    3e5a:	e5 e0       	ldi	r30, 0x05	; 5
+    3e5c:	de 2e       	mov	r13, r30
       boot_spm_busy_wait();
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    3e58:	a1 e1       	ldi	r26, 0x11	; 17
-    3e5a:	ba 2e       	mov	r11, r26
+    3e5e:	f1 e1       	ldi	r31, 0x11	; 17
+    3e60:	cf 2e       	mov	r12, r31
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3e5c:	f3 e0       	ldi	r31, 0x03	; 3
-    3e5e:	df 2e       	mov	r13, r31
+    3e62:	a3 e0       	ldi	r26, 0x03	; 3
+    3e64:	fa 2e       	mov	r15, r26
 #endif
 
   /* Forever loop */
   for (;;) {
     /* get character from UART */
     ch = getch();
-    3e60:	98 d0       	rcall	.+304    	; 0x3f92 <getch>
+    3e66:	95 d0       	rcall	.+298    	; 0x3f92 <getch>
 
     if(ch == STK_GET_PARAMETER) {
-    3e62:	81 34       	cpi	r24, 0x41	; 65
-    3e64:	61 f4       	brne	.+24     	; 0x3e7e <main+0x7e>
+    3e68:	81 34       	cpi	r24, 0x41	; 65
+    3e6a:	69 f4       	brne	.+26     	; 0x3e86 <main+0x86>
       unsigned char which = getch();
-    3e66:	95 d0       	rcall	.+298    	; 0x3f92 <getch>
-    3e68:	08 2f       	mov	r16, r24
+    3e6c:	92 d0       	rcall	.+292    	; 0x3f92 <getch>
       verifySpace();
-    3e6a:	a5 d0       	rcall	.+330    	; 0x3fb6 <verifySpace>
+    3e6e:	89 83       	std	Y+1, r24	; 0x01
+    3e70:	a2 d0       	rcall	.+324    	; 0x3fb6 <verifySpace>
       if (which == 0x82) {
-    3e6c:	02 38       	cpi	r16, 0x82	; 130
-    3e6e:	29 f1       	breq	.+74     	; 0x3eba <main+0xba>
+    3e72:	89 81       	ldd	r24, Y+1	; 0x01
+    3e74:	82 38       	cpi	r24, 0x82	; 130
+    3e76:	19 f1       	breq	.+70     	; 0x3ebe <main+0xbe>
 	/*
 	 * Send optiboot version as "minor SW version"
 	 */
 	putch(OPTIBOOT_MINVER);
       } else if (which == 0x81) {
-    3e70:	01 38       	cpi	r16, 0x81	; 129
-    3e72:	11 f4       	brne	.+4      	; 0x3e78 <main+0x78>
+    3e78:	81 38       	cpi	r24, 0x81	; 129
+    3e7a:	11 f4       	brne	.+4      	; 0x3e80 <main+0x80>
 	  putch(OPTIBOOT_MAJVER);
-    3e74:	85 e0       	ldi	r24, 0x05	; 5
-    3e76:	01 c0       	rjmp	.+2      	; 0x3e7a <main+0x7a>
+    3e7c:	85 e0       	ldi	r24, 0x05	; 5
+    3e7e:	01 c0       	rjmp	.+2      	; 0x3e82 <main+0x82>
       } else {
 	/*
 	 * GET PARAMETER returns a generic 0x03 reply for
          * other parameters - enough to keep Avrdude happy
 	 */
 	putch(0x03);
-    3e78:	83 e0       	ldi	r24, 0x03	; 3
-    3e7a:	83 d0       	rcall	.+262    	; 0x3f82 <putch>
-    3e7c:	7f c0       	rjmp	.+254    	; 0x3f7c <main+0x17c>
+    3e80:	83 e0       	ldi	r24, 0x03	; 3
+    3e82:	80 d0       	rcall	.+256    	; 0x3f84 <putch>
+    3e84:	7c c0       	rjmp	.+248    	; 0x3f7e <main+0x17e>
       }
     }
     else if(ch == STK_SET_DEVICE) {
-    3e7e:	82 34       	cpi	r24, 0x42	; 66
-    3e80:	11 f4       	brne	.+4      	; 0x3e86 <main+0x86>
+    3e86:	82 34       	cpi	r24, 0x42	; 66
+    3e88:	11 f4       	brne	.+4      	; 0x3e8e <main+0x8e>
       // SET DEVICE is ignored
       getNch(20);
-    3e82:	84 e1       	ldi	r24, 0x14	; 20
-    3e84:	03 c0       	rjmp	.+6      	; 0x3e8c <main+0x8c>
+    3e8a:	84 e1       	ldi	r24, 0x14	; 20
+    3e8c:	03 c0       	rjmp	.+6      	; 0x3e94 <main+0x94>
     }
     else if(ch == STK_SET_DEVICE_EXT) {
-    3e86:	85 34       	cpi	r24, 0x45	; 69
-    3e88:	19 f4       	brne	.+6      	; 0x3e90 <main+0x90>
+    3e8e:	85 34       	cpi	r24, 0x45	; 69
+    3e90:	19 f4       	brne	.+6      	; 0x3e98 <main+0x98>
       // SET DEVICE EXT is ignored
       getNch(5);
-    3e8a:	85 e0       	ldi	r24, 0x05	; 5
-    3e8c:	9c d0       	rcall	.+312    	; 0x3fc6 <getNch>
-    3e8e:	76 c0       	rjmp	.+236    	; 0x3f7c <main+0x17c>
+    3e92:	85 e0       	ldi	r24, 0x05	; 5
+    3e94:	98 d0       	rcall	.+304    	; 0x3fc6 <verifySpace+0x10>
+    3e96:	73 c0       	rjmp	.+230    	; 0x3f7e <main+0x17e>
     }
     else if(ch == STK_LOAD_ADDRESS) {
-    3e90:	85 35       	cpi	r24, 0x55	; 85
-    3e92:	79 f4       	brne	.+30     	; 0x3eb2 <main+0xb2>
+    3e98:	85 35       	cpi	r24, 0x55	; 85
+    3e9a:	69 f4       	brne	.+26     	; 0x3eb6 <main+0xb6>
       // LOAD ADDRESS
       uint16_t newAddress;
       newAddress = getch();
-    3e94:	7e d0       	rcall	.+252    	; 0x3f92 <getch>
+    3e9c:	7a d0       	rcall	.+244    	; 0x3f92 <getch>
+    3e9e:	88 2e       	mov	r8, r24
+    3ea0:	99 24       	eor	r9, r9
       newAddress = (newAddress & 0xff) | (getch() << 8);
-    3e96:	e8 2e       	mov	r14, r24
-    3e98:	ff 24       	eor	r15, r15
-    3e9a:	7b d0       	rcall	.+246    	; 0x3f92 <getch>
-    3e9c:	08 2f       	mov	r16, r24
-    3e9e:	10 e0       	ldi	r17, 0x00	; 0
-    3ea0:	10 2f       	mov	r17, r16
-    3ea2:	00 27       	eor	r16, r16
-    3ea4:	0e 29       	or	r16, r14
-    3ea6:	1f 29       	or	r17, r15
+    3ea2:	77 d0       	rcall	.+238    	; 0x3f92 <getch>
+    3ea4:	08 2f       	mov	r16, r24
+    3ea6:	10 e0       	ldi	r17, 0x00	; 0
+    3ea8:	10 2f       	mov	r17, r16
+    3eaa:	00 27       	eor	r16, r16
+    3eac:	08 29       	or	r16, r8
+    3eae:	19 29       	or	r17, r9
 #ifdef RAMPZ
       // Transfer top bit to RAMPZ
       RAMPZ = (newAddress & 0x8000) ? 1 : 0;
 #endif
       newAddress += newAddress; // Convert from word address to byte address
-    3ea8:	00 0f       	add	r16, r16
-    3eaa:	11 1f       	adc	r17, r17
+    3eb0:	00 0f       	add	r16, r16
+    3eb2:	11 1f       	adc	r17, r17
+    3eb4:	63 c0       	rjmp	.+198    	; 0x3f7c <main+0x17c>
       address = newAddress;
       verifySpace();
-    3eac:	84 d0       	rcall	.+264    	; 0x3fb6 <verifySpace>
-    3eae:	78 01       	movw	r14, r16
-    3eb0:	65 c0       	rjmp	.+202    	; 0x3f7c <main+0x17c>
     }
     else if(ch == STK_UNIVERSAL) {
-    3eb2:	86 35       	cpi	r24, 0x56	; 86
-    3eb4:	21 f4       	brne	.+8      	; 0x3ebe <main+0xbe>
+    3eb6:	86 35       	cpi	r24, 0x56	; 86
+    3eb8:	21 f4       	brne	.+8      	; 0x3ec2 <main+0xc2>
       // UNIVERSAL command is ignored
       getNch(4);
-    3eb6:	84 e0       	ldi	r24, 0x04	; 4
-    3eb8:	86 d0       	rcall	.+268    	; 0x3fc6 <getNch>
+    3eba:	84 e0       	ldi	r24, 0x04	; 4
+    3ebc:	84 d0       	rcall	.+264    	; 0x3fc6 <verifySpace+0x10>
       putch(0x00);
-    3eba:	80 e0       	ldi	r24, 0x00	; 0
-    3ebc:	de cf       	rjmp	.-68     	; 0x3e7a <main+0x7a>
+    3ebe:	80 e0       	ldi	r24, 0x00	; 0
+    3ec0:	e0 cf       	rjmp	.-64     	; 0x3e82 <main+0x82>
     }
     /* Write memory, length is big endian and is in bytes */
     else if(ch == STK_PROG_PAGE) {
-    3ebe:	84 36       	cpi	r24, 0x64	; 100
-    3ec0:	09 f0       	breq	.+2      	; 0x3ec4 <main+0xc4>
-    3ec2:	40 c0       	rjmp	.+128    	; 0x3f44 <main+0x144>
+    3ec2:	84 36       	cpi	r24, 0x64	; 100
+    3ec4:	09 f0       	breq	.+2      	; 0x3ec8 <main+0xc8>
+    3ec6:	3f c0       	rjmp	.+126    	; 0x3f46 <main+0x146>
       // PROGRAM PAGE - we support flash programming only, not EEPROM
       uint8_t *bufPtr;
       uint16_t addrPtr;
 
       getch();			/* getlen() */
-    3ec4:	66 d0       	rcall	.+204    	; 0x3f92 <getch>
+    3ec8:	64 d0       	rcall	.+200    	; 0x3f92 <getch>
       length = getch();
-    3ec6:	65 d0       	rcall	.+202    	; 0x3f92 <getch>
-    3ec8:	08 2f       	mov	r16, r24
-      getch();
     3eca:	63 d0       	rcall	.+198    	; 0x3f92 <getch>
+    3ecc:	b8 2e       	mov	r11, r24
+      getch();
+    3ece:	61 d0       	rcall	.+194    	; 0x3f92 <getch>
 
       // If we are in RWW section, immediately start page erase
       if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3ecc:	80 e0       	ldi	r24, 0x00	; 0
-    3ece:	e8 16       	cp	r14, r24
     3ed0:	88 e3       	ldi	r24, 0x38	; 56
-    3ed2:	f8 06       	cpc	r15, r24
-    3ed4:	18 f4       	brcc	.+6      	; 0x3edc <main+0xdc>
-    3ed6:	f7 01       	movw	r30, r14
-    3ed8:	d7 be       	out	0x37, r13	; 55
-    3eda:	e8 95       	spm
-    3edc:	c0 e0       	ldi	r28, 0x00	; 0
-    3ede:	d1 e0       	ldi	r29, 0x01	; 1
+    3ed2:	00 30       	cpi	r16, 0x00	; 0
+    3ed4:	18 07       	cpc	r17, r24
+    3ed6:	18 f4       	brcc	.+6      	; 0x3ede <main+0xde>
+    3ed8:	f8 01       	movw	r30, r16
+    3eda:	f7 be       	out	0x37, r15	; 55
+    3edc:	e8 95       	spm
+    3ede:	81 2c       	mov	r8, r1
+    3ee0:	51 e0       	ldi	r21, 0x01	; 1
+    3ee2:	95 2e       	mov	r9, r21
 
       // While that is going on, read in page contents
       bufPtr = buff;
       do *bufPtr++ = getch();
-    3ee0:	58 d0       	rcall	.+176    	; 0x3f92 <getch>
-    3ee2:	89 93       	st	Y+, r24
+    3ee4:	56 d0       	rcall	.+172    	; 0x3f92 <getch>
+    3ee6:	f4 01       	movw	r30, r8
+    3ee8:	81 93       	st	Z+, r24
+    3eea:	4f 01       	movw	r8, r30
       while (--length);
-    3ee4:	0c 17       	cp	r16, r28
-    3ee6:	e1 f7       	brne	.-8      	; 0x3ee0 <main+0xe0>
+    3eec:	be 16       	cp	r11, r30
+    3eee:	d1 f7       	brne	.-12     	; 0x3ee4 <main+0xe4>
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
-    3eea:	ef 16       	cp	r14, r31
-    3eec:	f8 e3       	ldi	r31, 0x38	; 56
-    3eee:	ff 06       	cpc	r15, r31
-    3ef0:	18 f0       	brcs	.+6      	; 0x3ef8 <main+0xf8>
-    3ef2:	f7 01       	movw	r30, r14
-    3ef4:	d7 be       	out	0x37, r13	; 55
-    3ef6:	e8 95       	spm
+    3ef0:	f8 e3       	ldi	r31, 0x38	; 56
+    3ef2:	00 30       	cpi	r16, 0x00	; 0
+    3ef4:	1f 07       	cpc	r17, r31
+    3ef6:	18 f0       	brcs	.+6      	; 0x3efe <main+0xfe>
+    3ef8:	f8 01       	movw	r30, r16
+    3efa:	f7 be       	out	0x37, r15	; 55
+    3efc:	e8 95       	spm
 
       // Read command terminator, start reply
       verifySpace();
-    3ef8:	5e d0       	rcall	.+188    	; 0x3fb6 <verifySpace>
+    3efe:	5b d0       	rcall	.+182    	; 0x3fb6 <verifySpace>
 
       // If only a partial page is to be programmed, the erase might not be complete.
       // So check that here
       boot_spm_busy_wait();
-    3efa:	07 b6       	in	r0, 0x37	; 55
-    3efc:	00 fc       	sbrc	r0, 0
-    3efe:	fd cf       	rjmp	.-6      	; 0x3efa <main+0xfa>
-    3f00:	a7 01       	movw	r20, r14
-    3f02:	a0 e0       	ldi	r26, 0x00	; 0
-    3f04:	b1 e0       	ldi	r27, 0x01	; 1
+    3f00:	07 b6       	in	r0, 0x37	; 55
+    3f02:	00 fc       	sbrc	r0, 0
+    3f04:	fd cf       	rjmp	.-6      	; 0x3f00 <main+0x100>
+    3f06:	f8 01       	movw	r30, r16
+    3f08:	a0 e0       	ldi	r26, 0x00	; 0
+    3f0a:	b1 e0       	ldi	r27, 0x01	; 1
       bufPtr = buff;
       addrPtr = (uint16_t)(void*)address;
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
-    3f06:	2c 91       	ld	r18, X
-    3f08:	30 e0       	ldi	r19, 0x00	; 0
+    3f0c:	2c 91       	ld	r18, X
+    3f0e:	30 e0       	ldi	r19, 0x00	; 0
         a |= (*bufPtr++) << 8;
-    3f0a:	11 96       	adiw	r26, 0x01	; 1
-    3f0c:	8c 91       	ld	r24, X
-    3f0e:	11 97       	sbiw	r26, 0x01	; 1
-    3f10:	90 e0       	ldi	r25, 0x00	; 0
-    3f12:	98 2f       	mov	r25, r24
-    3f14:	88 27       	eor	r24, r24
-    3f16:	82 2b       	or	r24, r18
-    3f18:	93 2b       	or	r25, r19
+    3f10:	11 96       	adiw	r26, 0x01	; 1
+    3f12:	8c 91       	ld	r24, X
+    3f14:	11 97       	sbiw	r26, 0x01	; 1
+    3f16:	90 e0       	ldi	r25, 0x00	; 0
+    3f18:	98 2f       	mov	r25, r24
+    3f1a:	88 27       	eor	r24, r24
+    3f1c:	82 2b       	or	r24, r18
+    3f1e:	93 2b       	or	r25, r19
 # define UART_SRL UBRR3L
 # define UART_UDR UDR3
 #endif
 
 /* main program starts here */
 int main(void) {
-    3f1a:	12 96       	adiw	r26, 0x02	; 2
+    3f20:	12 96       	adiw	r26, 0x02	; 2
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    3f1c:	fa 01       	movw	r30, r20
-    3f1e:	0c 01       	movw	r0, r24
-    3f20:	a7 be       	out	0x37, r10	; 55
-    3f22:	e8 95       	spm
-    3f24:	11 24       	eor	r1, r1
+    3f22:	0c 01       	movw	r0, r24
+    3f24:	e7 be       	out	0x37, r14	; 55
+    3f26:	e8 95       	spm
+    3f28:	11 24       	eor	r1, r1
         addrPtr += 2;
-    3f26:	4e 5f       	subi	r20, 0xFE	; 254
-    3f28:	5f 4f       	sbci	r21, 0xFF	; 255
+    3f2a:	32 96       	adiw	r30, 0x02	; 2
       } while (--ch);
-    3f2a:	f1 e0       	ldi	r31, 0x01	; 1
-    3f2c:	a0 38       	cpi	r26, 0x80	; 128
-    3f2e:	bf 07       	cpc	r27, r31
-    3f30:	51 f7       	brne	.-44     	; 0x3f06 <main+0x106>
+    3f2c:	81 e0       	ldi	r24, 0x01	; 1
+    3f2e:	a0 38       	cpi	r26, 0x80	; 128
+    3f30:	b8 07       	cpc	r27, r24
+    3f32:	61 f7       	brne	.-40     	; 0x3f0c <main+0x10c>
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    3f32:	f7 01       	movw	r30, r14
-    3f34:	c7 be       	out	0x37, r12	; 55
-    3f36:	e8 95       	spm
+    3f34:	f8 01       	movw	r30, r16
+    3f36:	d7 be       	out	0x37, r13	; 55
+    3f38:	e8 95       	spm
       boot_spm_busy_wait();
-    3f38:	07 b6       	in	r0, 0x37	; 55
-    3f3a:	00 fc       	sbrc	r0, 0
-    3f3c:	fd cf       	rjmp	.-6      	; 0x3f38 <main+0x138>
+    3f3a:	07 b6       	in	r0, 0x37	; 55
+    3f3c:	00 fc       	sbrc	r0, 0
+    3f3e:	fd cf       	rjmp	.-6      	; 0x3f3a <main+0x13a>
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    3f3e:	b7 be       	out	0x37, r11	; 55
-    3f40:	e8 95       	spm
-    3f42:	1c c0       	rjmp	.+56     	; 0x3f7c <main+0x17c>
+    3f40:	c7 be       	out	0x37, r12	; 55
+    3f42:	e8 95       	spm
+    3f44:	1c c0       	rjmp	.+56     	; 0x3f7e <main+0x17e>
 #endif
 
     }
     /* Read memory block mode, length is big endian.  */
     else if(ch == STK_READ_PAGE) {
-    3f44:	84 37       	cpi	r24, 0x74	; 116
-    3f46:	61 f4       	brne	.+24     	; 0x3f60 <main+0x160>
+    3f46:	84 37       	cpi	r24, 0x74	; 116
+    3f48:	61 f4       	brne	.+24     	; 0x3f62 <main+0x162>
       // READ PAGE - we only read flash
       getch();			/* getlen() */
-    3f48:	24 d0       	rcall	.+72     	; 0x3f92 <getch>
-      length = getch();
     3f4a:	23 d0       	rcall	.+70     	; 0x3f92 <getch>
-    3f4c:	08 2f       	mov	r16, r24
+      length = getch();
+    3f4c:	22 d0       	rcall	.+68     	; 0x3f92 <getch>
+    3f4e:	b8 2e       	mov	r11, r24
       getch();
-    3f4e:	21 d0       	rcall	.+66     	; 0x3f92 <getch>
+    3f50:	20 d0       	rcall	.+64     	; 0x3f92 <getch>
 
       verifySpace();
-    3f50:	32 d0       	rcall	.+100    	; 0x3fb6 <verifySpace>
+    3f52:	31 d0       	rcall	.+98     	; 0x3fb6 <verifySpace>
         __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #else
         // read a Flash byte and increment the address
         __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #endif
         putch(ch);
-    3f52:	f7 01       	movw	r30, r14
-    3f54:	85 91       	lpm	r24, Z+
-    3f56:	7f 01       	movw	r14, r30
-    3f58:	14 d0       	rcall	.+40     	; 0x3f82 <putch>
+    3f54:	f8 01       	movw	r30, r16
+    3f56:	85 91       	lpm	r24, Z+
+    3f58:	8f 01       	movw	r16, r30
+    3f5a:	14 d0       	rcall	.+40     	; 0x3f84 <putch>
       } while (--length);
-    3f5a:	01 50       	subi	r16, 0x01	; 1
-    3f5c:	d1 f7       	brne	.-12     	; 0x3f52 <main+0x152>
-    3f5e:	0e c0       	rjmp	.+28     	; 0x3f7c <main+0x17c>
+    3f5c:	ba 94       	dec	r11
+    3f5e:	d1 f7       	brne	.-12     	; 0x3f54 <main+0x154>
+    3f60:	0e c0       	rjmp	.+28     	; 0x3f7e <main+0x17e>
     }
 
     /* Get device signature bytes  */
     else if(ch == STK_READ_SIGN) {
-    3f60:	85 37       	cpi	r24, 0x75	; 117
-    3f62:	39 f4       	brne	.+14     	; 0x3f72 <main+0x172>
+    3f62:	85 37       	cpi	r24, 0x75	; 117
+    3f64:	39 f4       	brne	.+14     	; 0x3f74 <main+0x174>
       // READ SIGN - return what Avrdude wants to hear
       verifySpace();
-    3f64:	28 d0       	rcall	.+80     	; 0x3fb6 <verifySpace>
+    3f66:	27 d0       	rcall	.+78     	; 0x3fb6 <verifySpace>
       putch(SIGNATURE_0);
-    3f66:	8e e1       	ldi	r24, 0x1E	; 30
-    3f68:	0c d0       	rcall	.+24     	; 0x3f82 <putch>
+    3f68:	8e e1       	ldi	r24, 0x1E	; 30
+    3f6a:	0c d0       	rcall	.+24     	; 0x3f84 <putch>
       putch(SIGNATURE_1);
-    3f6a:	84 e9       	ldi	r24, 0x94	; 148
-    3f6c:	0a d0       	rcall	.+20     	; 0x3f82 <putch>
+    3f6c:	84 e9       	ldi	r24, 0x94	; 148
+    3f6e:	0a d0       	rcall	.+20     	; 0x3f84 <putch>
       putch(SIGNATURE_2);
-    3f6e:	86 e0       	ldi	r24, 0x06	; 6
-    3f70:	84 cf       	rjmp	.-248    	; 0x3e7a <main+0x7a>
+    3f70:	86 e0       	ldi	r24, 0x06	; 6
+    3f72:	87 cf       	rjmp	.-242    	; 0x3e82 <main+0x82>
     }
     else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
-    3f72:	81 35       	cpi	r24, 0x51	; 81
-    3f74:	11 f4       	brne	.+4      	; 0x3f7a <main+0x17a>
+    3f74:	81 35       	cpi	r24, 0x51	; 81
+    3f76:	11 f4       	brne	.+4      	; 0x3f7c <main+0x17c>
       // Adaboot no-wait mod
       watchdogConfig(WATCHDOG_16MS);
-    3f76:	88 e0       	ldi	r24, 0x08	; 8
-    3f78:	18 d0       	rcall	.+48     	; 0x3faa <watchdogConfig>
+    3f78:	88 e0       	ldi	r24, 0x08	; 8
+    3f7a:	17 d0       	rcall	.+46     	; 0x3faa <watchdogConfig>
       verifySpace();
     }
     else {
       // This covers the response to commands like STK_ENTER_PROGMODE
       verifySpace();
-    3f7a:	1d d0       	rcall	.+58     	; 0x3fb6 <verifySpace>
+    3f7c:	1c d0       	rcall	.+56     	; 0x3fb6 <verifySpace>
     }
     putch(STK_OK);
-    3f7c:	80 e1       	ldi	r24, 0x10	; 16
-    3f7e:	01 d0       	rcall	.+2      	; 0x3f82 <putch>
-    3f80:	6f cf       	rjmp	.-290    	; 0x3e60 <main+0x60>
-
-00003f82 <putch>:
+    3f7e:	80 e1       	ldi	r24, 0x10	; 16
+    3f80:	01 d0       	rcall	.+2      	; 0x3f84 <putch>
   }
+    3f82:	71 cf       	rjmp	.-286    	; 0x3e66 <main+0x66>
+
+00003f84 <putch>:
 }
 
 void putch(char ch) {
-    3f82:	98 2f       	mov	r25, r24
 #ifndef SOFT_UART
   while (!(UART_SRA & _BV(UDRE0)));
-    3f84:	80 91 c0 00 	lds	r24, 0x00C0
-    3f88:	85 ff       	sbrs	r24, 5
-    3f8a:	fc cf       	rjmp	.-8      	; 0x3f84 <putch+0x2>
+    3f84:	90 91 c0 00 	lds	r25, 0x00C0
+    3f88:	95 ff       	sbrs	r25, 5
+    3f8a:	fc cf       	rjmp	.-8      	; 0x3f84 <putch>
   UART_UDR = ch;
-    3f8c:	90 93 c6 00 	sts	0x00C6, r25
+    3f8c:	80 93 c6 00 	sts	0x00C6, r24
       [uartBit] "I" (UART_TX_BIT)
     :
       "r25"
@@ -546,41 +552,41 @@ void verifySpace() {
   }
   putch(STK_INSYNC);
     3fc2:	84 e1       	ldi	r24, 0x14	; 20
+    3fc4:	df cf       	rjmp	.-66     	; 0x3f84 <putch>
 }
-    3fc4:	de cf       	rjmp	.-68     	; 0x3f82 <putch>
+    3fc6:	cf 93       	push	r28
 
-00003fc6 <getNch>:
+00003fc8 <getNch>:
     ::[count] "M" (UART_B_VALUE)
   );
 }
 #endif
 
 void getNch(uint8_t count) {
-    3fc6:	1f 93       	push	r17
-    3fc8:	18 2f       	mov	r17, r24
-  do getch(); while (--count);
+    3fc8:	c8 2f       	mov	r28, r24
     3fca:	e3 df       	rcall	.-58     	; 0x3f92 <getch>
-    3fcc:	11 50       	subi	r17, 0x01	; 1
-    3fce:	e9 f7       	brne	.-6      	; 0x3fca <getNch+0x4>
-  verifySpace();
+  do getch(); while (--count);
+    3fcc:	c1 50       	subi	r28, 0x01	; 1
+    3fce:	e9 f7       	brne	.-6      	; 0x3fca <getNch+0x2>
     3fd0:	f2 df       	rcall	.-28     	; 0x3fb6 <verifySpace>
+  verifySpace();
+    3fd2:	cf 91       	pop	r28
 }
-    3fd2:	1f 91       	pop	r17
     3fd4:	08 95       	ret
 
 00003fd6 <appStart>:
+    3fd6:	28 2e       	mov	r2, r24
 
 void appStart(uint8_t rstFlags) {
   // save the reset flags in the designated register
   //  This can be saved in a main program by putting code in .init0 (which
   //  executes before normal c init code) to save R2 to a global variable.
   __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
-    3fd6:	28 2e       	mov	r2, r24
+    3fd8:	80 e0       	ldi	r24, 0x00	; 0
 
   watchdogConfig(WATCHDOG_OFF);
-    3fd8:	80 e0       	ldi	r24, 0x00	; 0
     3fda:	e7 df       	rcall	.-50     	; 0x3faa <watchdogConfig>
-  __asm__ __volatile__ (
     3fdc:	ee 27       	eor	r30, r30
+  __asm__ __volatile__ (
     3fde:	ff 27       	eor	r31, r31
     3fe0:	09 94       	ijmp
diff --git a/optiboot/bootloaders/optiboot/optiboot_lilypad.hex b/optiboot/bootloaders/optiboot/optiboot_lilypad.hex
index b43d1ed..efd8428 100644
--- a/optiboot/bootloaders/optiboot/optiboot_lilypad.hex
+++ b/optiboot/bootloaders/optiboot/optiboot_lilypad.hex
@@ -1,33 +1,33 @@
-:103E0000112484B714BE81FFE6D085E08093810041
-:103E100082E08093C00088E18093C10086E08093B7
-:103E2000C20088E08093C4008EE0BFD0259A86E06F
-:103E300028E13EEF91E0309385002093840096BB0B
-:103E4000B09BFECF1D9AA8958150A9F7EE24FF24C0
-:103E5000AA24A394B5E0CB2EA1E1BA2EF3E0DF2E85
-:103E600098D0813461F495D0082FA5D0023829F17B
-:103E7000013811F485E001C083E083D07FC0823433
-:103E800011F484E103C0853419F485E09CD076C038
-:103E9000853579F47ED0E82EFF247BD0082F10E002
-:103EA000102F00270E291F29000F111F84D0780121
-:103EB00065C0863521F484E086D080E0DECF84368C
-:103EC00009F040C066D065D0082F63D080E0E816C6
-:103ED00088E3F80618F4F701D7BEE895C0E0D1E012
-:103EE00058D089930C17E1F7F0E0EF16F8E3FF06DE
-:103EF00018F0F701D7BEE8955ED007B600FCFDCFFD
-:103F0000A701A0E0B1E02C9130E011968C911197BF
-:103F100090E0982F8827822B932B1296FA010C01A0
-:103F2000A7BEE89511244E5F5F4FF1E0A038BF07B0
-:103F300051F7F701C7BEE89507B600FCFDCFB7BE45
-:103F4000E8951CC0843761F424D023D0082F21D0F9
-:103F500032D0F70185917F0114D00150D1F70EC006
-:103F6000853739F428D08EE10CD084E90AD086E078
-:103F700084CF813511F488E018D01DD080E101D0C4
-:103F80006FCF982F8091C00085FFFCCF9093C60023
+:103E00000F92CDB7DEB7112484B714BE81FFE3D083
+:103E100085E08093810082E08093C00088E18093F8
+:103E2000C10086E08093C20088E08093C4008EE0E9
+:103E3000BCD0259A26E088E19EEF31E09093850082
+:103E40008093840036BBB09BFECF1D9AA89521506D
+:103E5000A9F700E010E0EE24E394E5E0DE2EF1E1C6
+:103E6000CF2EA3E0FA2E95D0813469F492D08983C5
+:103E7000A2D08981823819F1813811F485E001C01E
+:103E800083E080D07CC0823411F484E103C08534A7
+:103E900019F485E098D073C0853569F47AD0882EFE
+:103EA000992477D0082F10E0102F0027082919290E
+:103EB000000F111F63C0863521F484E084D080E0B8
+:103EC000E0CF843609F03FC064D063D0B82E61D013
+:103ED00088E30030180718F4F801F7BEE895812C44
+:103EE00051E0952E56D0F40181934F01BE16D1F7C3
+:103EF000F8E300301F0718F0F801F7BEE8955BD033
+:103F000007B600FCFDCFF801A0E0B1E02C9130E055
+:103F100011968C91119790E0982F8827822B932BE4
+:103F200012960C01E7BEE8951124329681E0A03884
+:103F3000B80761F7F801D7BEE89507B600FCFDCFDA
+:103F4000C7BEE8951CC0843761F423D022D0B82EB8
+:103F500020D031D0F80185918F0114D0BA94D1F7D7
+:103F60000EC0853739F427D08EE10CD084E90AD011
+:103F700086E087CF813511F488E017D01CD080E12E
+:103F800001D071CF9091C00095FFFCCF8093C60007
 :103F900008958091C00087FFFCCF8091C00084FD10
 :103FA00001C0A8958091C6000895E0E6F0E098E190
 :103FB000908380830895EDDF803219F088E0F5DF8B
-:103FC000FFCF84E1DECF1F93182FE3DF1150E9F715
-:103FD000F2DF1F910895282E80E0E7DFEE27FF270C
+:103FC000FFCF84E1DFCFCF93C82FE3DFC150E9F704
+:103FD000F2DFCF910895282E80E0E7DFEE27FF275C
 :023FE000099442
 :023FFE000005BC
 :0400000300003E00BB
diff --git a/optiboot/bootloaders/optiboot/optiboot_lilypad.lst b/optiboot/bootloaders/optiboot/optiboot_lilypad.lst
index d2d73c8..7eab0ea 100644
--- a/optiboot/bootloaders/optiboot/optiboot_lilypad.lst
+++ b/optiboot/bootloaders/optiboot/optiboot_lilypad.lst
@@ -3,27 +3,27 @@ optiboot_atmega168.elf:     file format elf32-avr
 
 Sections:
 Idx Name          Size      VMA       LMA       File off  Algn
-  0 .text         000001e2  00003e00  00003e00  00000054  2**1
+  0 .data         00000000  00800100  00003fe2  00000256  2**0
+                  CONTENTS, ALLOC, LOAD, DATA
+  1 .text         000001e2  00003e00  00003e00  00000074  2**1
                   CONTENTS, ALLOC, LOAD, READONLY, CODE
-  1 .version      00000002  00003ffe  00003ffe  00000236  2**0
+  2 .version      00000002  00003ffe  00003ffe  00000256  2**0
                   CONTENTS, READONLY
-  2 .debug_aranges 00000028  00000000  00000000  00000238  2**0
+  3 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                   CONTENTS, READONLY, DEBUGGING
-  3 .debug_pubnames 0000005f  00000000  00000000  00000260  2**0
+  4 .debug_info   00000290  00000000  00000000  00000280  2**0
                   CONTENTS, READONLY, DEBUGGING
-  4 .debug_info   00000294  00000000  00000000  000002bf  2**0
+  5 .debug_abbrev 00000176  00000000  00000000  00000510  2**0
                   CONTENTS, READONLY, DEBUGGING
-  5 .debug_abbrev 0000016b  00000000  00000000  00000553  2**0
+  6 .debug_line   00000192  00000000  00000000  00000686  2**0
                   CONTENTS, READONLY, DEBUGGING
-  6 .debug_line   00000421  00000000  00000000  000006be  2**0
+  7 .debug_frame  00000094  00000000  00000000  00000818  2**2
                   CONTENTS, READONLY, DEBUGGING
-  7 .debug_frame  00000080  00000000  00000000  00000ae0  2**2
+  8 .debug_str    00000131  00000000  00000000  000008ac  2**0
                   CONTENTS, READONLY, DEBUGGING
-  8 .debug_str    00000131  00000000  00000000  00000b60  2**0
+  9 .debug_loc    0000026e  00000000  00000000  000009dd  2**0
                   CONTENTS, READONLY, DEBUGGING
-  9 .debug_loc    00000266  00000000  00000000  00000c91  2**0
-                  CONTENTS, READONLY, DEBUGGING
- 10 .debug_ranges 00000078  00000000  00000000  00000ef7  2**0
+ 10 .debug_ranges 00000048  00000000  00000000  00000c4b  2**0
                   CONTENTS, READONLY, DEBUGGING
 
 Disassembly of section .text:
@@ -35,437 +35,443 @@ Disassembly of section .text:
 
 /* main program starts here */
 int main(void) {
-    3e00:	11 24       	eor	r1, r1
+    3e00:	0f 92       	push	r0
+    3e02:	cd b7       	in	r28, 0x3d	; 61
+    3e04:	de b7       	in	r29, 0x3e	; 62
+  //  SP points to RAMEND
+  //  r1 contains zero
+  //
+  // If not, uncomment the following instructions:
+  // cli();
+  asm volatile ("clr __zero_reg__");
+    3e06:	11 24       	eor	r1, r1
 #if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
   SP=RAMEND;  // This is done by hardware reset
 #endif
 
   // Adaboot no-wait mod
   ch = MCUSR;
-    3e02:	84 b7       	in	r24, 0x34	; 52
+    3e08:	84 b7       	in	r24, 0x34	; 52
   MCUSR = 0;
-    3e04:	14 be       	out	0x34, r1	; 52
+    3e0a:	14 be       	out	0x34, r1	; 52
   if (!(ch & _BV(EXTRF))) appStart(ch);
-    3e06:	81 ff       	sbrs	r24, 1
-    3e08:	e6 d0       	rcall	.+460    	; 0x3fd6 <appStart>
+    3e0c:	81 ff       	sbrs	r24, 1
+    3e0e:	e3 d0       	rcall	.+454    	; 0x3fd6 <appStart>
 
 #if LED_START_FLASHES > 0
   // Set up Timer 1 for timeout counter
   TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
-    3e0a:	85 e0       	ldi	r24, 0x05	; 5
-    3e0c:	80 93 81 00 	sts	0x0081, r24
+    3e10:	85 e0       	ldi	r24, 0x05	; 5
+    3e12:	80 93 81 00 	sts	0x0081, r24
   UCSRA = _BV(U2X); //Double speed mode USART
   UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
   UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
   UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
 #else
   UART_SRA = _BV(U2X0); //Double speed mode USART0
-    3e10:	82 e0       	ldi	r24, 0x02	; 2
-    3e12:	80 93 c0 00 	sts	0x00C0, r24
+    3e16:	82 e0       	ldi	r24, 0x02	; 2
+    3e18:	80 93 c0 00 	sts	0x00C0, r24
   UART_SRB = _BV(RXEN0) | _BV(TXEN0);
-    3e16:	88 e1       	ldi	r24, 0x18	; 24
-    3e18:	80 93 c1 00 	sts	0x00C1, r24
+    3e1c:	88 e1       	ldi	r24, 0x18	; 24
+    3e1e:	80 93 c1 00 	sts	0x00C1, r24
   UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
-    3e1c:	86 e0       	ldi	r24, 0x06	; 6
-    3e1e:	80 93 c2 00 	sts	0x00C2, r24
+    3e22:	86 e0       	ldi	r24, 0x06	; 6
+    3e24:	80 93 c2 00 	sts	0x00C2, r24
   UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
-    3e22:	88 e0       	ldi	r24, 0x08	; 8
-    3e24:	80 93 c4 00 	sts	0x00C4, r24
+    3e28:	88 e0       	ldi	r24, 0x08	; 8
+    3e2a:	80 93 c4 00 	sts	0x00C4, r24
 #endif
 #endif
 
   // Set up watchdog to trigger after 500ms
   watchdogConfig(WATCHDOG_1S);
-    3e28:	8e e0       	ldi	r24, 0x0E	; 14
-    3e2a:	bf d0       	rcall	.+382    	; 0x3faa <watchdogConfig>
+    3e2e:	8e e0       	ldi	r24, 0x0E	; 14
+    3e30:	bc d0       	rcall	.+376    	; 0x3faa <watchdogConfig>
 
 #if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
   /* Set LED pin as output */
   LED_DDR |= _BV(LED);
-    3e2c:	25 9a       	sbi	0x04, 5	; 4
-    3e2e:	86 e0       	ldi	r24, 0x06	; 6
+    3e32:	25 9a       	sbi	0x04, 5	; 4
+    3e34:	26 e0       	ldi	r18, 0x06	; 6
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    3e30:	28 e1       	ldi	r18, 0x18	; 24
-    3e32:	3e ef       	ldi	r19, 0xFE	; 254
+    3e36:	88 e1       	ldi	r24, 0x18	; 24
+    3e38:	9e ef       	ldi	r25, 0xFE	; 254
     TIFR1 = _BV(TOV1);
-    3e34:	91 e0       	ldi	r25, 0x01	; 1
+    3e3a:	31 e0       	ldi	r19, 0x01	; 1
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    3e36:	30 93 85 00 	sts	0x0085, r19
-    3e3a:	20 93 84 00 	sts	0x0084, r18
+    3e3c:	90 93 85 00 	sts	0x0085, r25
+    3e40:	80 93 84 00 	sts	0x0084, r24
     TIFR1 = _BV(TOV1);
-    3e3e:	96 bb       	out	0x16, r25	; 22
+    3e44:	36 bb       	out	0x16, r19	; 22
     while(!(TIFR1 & _BV(TOV1)));
-    3e40:	b0 9b       	sbis	0x16, 0	; 22
-    3e42:	fe cf       	rjmp	.-4      	; 0x3e40 <main+0x40>
+    3e46:	b0 9b       	sbis	0x16, 0	; 22
+    3e48:	fe cf       	rjmp	.-4      	; 0x3e46 <main+0x46>
 #if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
-    3e44:	1d 9a       	sbi	0x03, 5	; 3
+    3e4a:	1d 9a       	sbi	0x03, 5	; 3
 }
 #endif
 
 // Watchdog functions. These are only safe with interrupts turned off.
 void watchdogReset() {
   __asm__ __volatile__ (
-    3e46:	a8 95       	wdr
+    3e4c:	a8 95       	wdr
+    3e4e:	21 50       	subi	r18, 0x01	; 1
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
 #endif
     watchdogReset();
   } while (--count);
-    3e48:	81 50       	subi	r24, 0x01	; 1
-    3e4a:	a9 f7       	brne	.-22     	; 0x3e36 <main+0x36>
-    3e4c:	ee 24       	eor	r14, r14
-    3e4e:	ff 24       	eor	r15, r15
+    3e50:	a9 f7       	brne	.-22     	; 0x3e3c <main+0x3c>
+    3e52:	00 e0       	ldi	r16, 0x00	; 0
+    3e54:	10 e0       	ldi	r17, 0x00	; 0
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    3e50:	aa 24       	eor	r10, r10
-    3e52:	a3 94       	inc	r10
+    3e56:	ee 24       	eor	r14, r14
+    3e58:	e3 94       	inc	r14
         addrPtr += 2;
       } while (--ch);
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    3e54:	b5 e0       	ldi	r27, 0x05	; 5
-    3e56:	cb 2e       	mov	r12, r27
+    3e5a:	e5 e0       	ldi	r30, 0x05	; 5
+    3e5c:	de 2e       	mov	r13, r30
       boot_spm_busy_wait();
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    3e58:	a1 e1       	ldi	r26, 0x11	; 17
-    3e5a:	ba 2e       	mov	r11, r26
+    3e5e:	f1 e1       	ldi	r31, 0x11	; 17
+    3e60:	cf 2e       	mov	r12, r31
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3e5c:	f3 e0       	ldi	r31, 0x03	; 3
-    3e5e:	df 2e       	mov	r13, r31
+    3e62:	a3 e0       	ldi	r26, 0x03	; 3
+    3e64:	fa 2e       	mov	r15, r26
 #endif
 
   /* Forever loop */
   for (;;) {
     /* get character from UART */
     ch = getch();
-    3e60:	98 d0       	rcall	.+304    	; 0x3f92 <getch>
+    3e66:	95 d0       	rcall	.+298    	; 0x3f92 <getch>
 
     if(ch == STK_GET_PARAMETER) {
-    3e62:	81 34       	cpi	r24, 0x41	; 65
-    3e64:	61 f4       	brne	.+24     	; 0x3e7e <main+0x7e>
+    3e68:	81 34       	cpi	r24, 0x41	; 65
+    3e6a:	69 f4       	brne	.+26     	; 0x3e86 <main+0x86>
       unsigned char which = getch();
-    3e66:	95 d0       	rcall	.+298    	; 0x3f92 <getch>
-    3e68:	08 2f       	mov	r16, r24
+    3e6c:	92 d0       	rcall	.+292    	; 0x3f92 <getch>
       verifySpace();
-    3e6a:	a5 d0       	rcall	.+330    	; 0x3fb6 <verifySpace>
+    3e6e:	89 83       	std	Y+1, r24	; 0x01
+    3e70:	a2 d0       	rcall	.+324    	; 0x3fb6 <verifySpace>
       if (which == 0x82) {
-    3e6c:	02 38       	cpi	r16, 0x82	; 130
-    3e6e:	29 f1       	breq	.+74     	; 0x3eba <main+0xba>
+    3e72:	89 81       	ldd	r24, Y+1	; 0x01
+    3e74:	82 38       	cpi	r24, 0x82	; 130
+    3e76:	19 f1       	breq	.+70     	; 0x3ebe <main+0xbe>
 	/*
 	 * Send optiboot version as "minor SW version"
 	 */
 	putch(OPTIBOOT_MINVER);
       } else if (which == 0x81) {
-    3e70:	01 38       	cpi	r16, 0x81	; 129
-    3e72:	11 f4       	brne	.+4      	; 0x3e78 <main+0x78>
+    3e78:	81 38       	cpi	r24, 0x81	; 129
+    3e7a:	11 f4       	brne	.+4      	; 0x3e80 <main+0x80>
 	  putch(OPTIBOOT_MAJVER);
-    3e74:	85 e0       	ldi	r24, 0x05	; 5
-    3e76:	01 c0       	rjmp	.+2      	; 0x3e7a <main+0x7a>
+    3e7c:	85 e0       	ldi	r24, 0x05	; 5
+    3e7e:	01 c0       	rjmp	.+2      	; 0x3e82 <main+0x82>
       } else {
 	/*
 	 * GET PARAMETER returns a generic 0x03 reply for
          * other parameters - enough to keep Avrdude happy
 	 */
 	putch(0x03);
-    3e78:	83 e0       	ldi	r24, 0x03	; 3
-    3e7a:	83 d0       	rcall	.+262    	; 0x3f82 <putch>
-    3e7c:	7f c0       	rjmp	.+254    	; 0x3f7c <main+0x17c>
+    3e80:	83 e0       	ldi	r24, 0x03	; 3
+    3e82:	80 d0       	rcall	.+256    	; 0x3f84 <putch>
+    3e84:	7c c0       	rjmp	.+248    	; 0x3f7e <main+0x17e>
       }
     }
     else if(ch == STK_SET_DEVICE) {
-    3e7e:	82 34       	cpi	r24, 0x42	; 66
-    3e80:	11 f4       	brne	.+4      	; 0x3e86 <main+0x86>
+    3e86:	82 34       	cpi	r24, 0x42	; 66
+    3e88:	11 f4       	brne	.+4      	; 0x3e8e <main+0x8e>
       // SET DEVICE is ignored
       getNch(20);
-    3e82:	84 e1       	ldi	r24, 0x14	; 20
-    3e84:	03 c0       	rjmp	.+6      	; 0x3e8c <main+0x8c>
+    3e8a:	84 e1       	ldi	r24, 0x14	; 20
+    3e8c:	03 c0       	rjmp	.+6      	; 0x3e94 <main+0x94>
     }
     else if(ch == STK_SET_DEVICE_EXT) {
-    3e86:	85 34       	cpi	r24, 0x45	; 69
-    3e88:	19 f4       	brne	.+6      	; 0x3e90 <main+0x90>
+    3e8e:	85 34       	cpi	r24, 0x45	; 69
+    3e90:	19 f4       	brne	.+6      	; 0x3e98 <main+0x98>
       // SET DEVICE EXT is ignored
       getNch(5);
-    3e8a:	85 e0       	ldi	r24, 0x05	; 5
-    3e8c:	9c d0       	rcall	.+312    	; 0x3fc6 <getNch>
-    3e8e:	76 c0       	rjmp	.+236    	; 0x3f7c <main+0x17c>
+    3e92:	85 e0       	ldi	r24, 0x05	; 5
+    3e94:	98 d0       	rcall	.+304    	; 0x3fc6 <verifySpace+0x10>
+    3e96:	73 c0       	rjmp	.+230    	; 0x3f7e <main+0x17e>
     }
     else if(ch == STK_LOAD_ADDRESS) {
-    3e90:	85 35       	cpi	r24, 0x55	; 85
-    3e92:	79 f4       	brne	.+30     	; 0x3eb2 <main+0xb2>
+    3e98:	85 35       	cpi	r24, 0x55	; 85
+    3e9a:	69 f4       	brne	.+26     	; 0x3eb6 <main+0xb6>
       // LOAD ADDRESS
       uint16_t newAddress;
       newAddress = getch();
-    3e94:	7e d0       	rcall	.+252    	; 0x3f92 <getch>
+    3e9c:	7a d0       	rcall	.+244    	; 0x3f92 <getch>
+    3e9e:	88 2e       	mov	r8, r24
+    3ea0:	99 24       	eor	r9, r9
       newAddress = (newAddress & 0xff) | (getch() << 8);
-    3e96:	e8 2e       	mov	r14, r24
-    3e98:	ff 24       	eor	r15, r15
-    3e9a:	7b d0       	rcall	.+246    	; 0x3f92 <getch>
-    3e9c:	08 2f       	mov	r16, r24
-    3e9e:	10 e0       	ldi	r17, 0x00	; 0
-    3ea0:	10 2f       	mov	r17, r16
-    3ea2:	00 27       	eor	r16, r16
-    3ea4:	0e 29       	or	r16, r14
-    3ea6:	1f 29       	or	r17, r15
+    3ea2:	77 d0       	rcall	.+238    	; 0x3f92 <getch>
+    3ea4:	08 2f       	mov	r16, r24
+    3ea6:	10 e0       	ldi	r17, 0x00	; 0
+    3ea8:	10 2f       	mov	r17, r16
+    3eaa:	00 27       	eor	r16, r16
+    3eac:	08 29       	or	r16, r8
+    3eae:	19 29       	or	r17, r9
 #ifdef RAMPZ
       // Transfer top bit to RAMPZ
       RAMPZ = (newAddress & 0x8000) ? 1 : 0;
 #endif
       newAddress += newAddress; // Convert from word address to byte address
-    3ea8:	00 0f       	add	r16, r16
-    3eaa:	11 1f       	adc	r17, r17
+    3eb0:	00 0f       	add	r16, r16
+    3eb2:	11 1f       	adc	r17, r17
+    3eb4:	63 c0       	rjmp	.+198    	; 0x3f7c <main+0x17c>
       address = newAddress;
       verifySpace();
-    3eac:	84 d0       	rcall	.+264    	; 0x3fb6 <verifySpace>
-    3eae:	78 01       	movw	r14, r16
-    3eb0:	65 c0       	rjmp	.+202    	; 0x3f7c <main+0x17c>
     }
     else if(ch == STK_UNIVERSAL) {
-    3eb2:	86 35       	cpi	r24, 0x56	; 86
-    3eb4:	21 f4       	brne	.+8      	; 0x3ebe <main+0xbe>
+    3eb6:	86 35       	cpi	r24, 0x56	; 86
+    3eb8:	21 f4       	brne	.+8      	; 0x3ec2 <main+0xc2>
       // UNIVERSAL command is ignored
       getNch(4);
-    3eb6:	84 e0       	ldi	r24, 0x04	; 4
-    3eb8:	86 d0       	rcall	.+268    	; 0x3fc6 <getNch>
+    3eba:	84 e0       	ldi	r24, 0x04	; 4
+    3ebc:	84 d0       	rcall	.+264    	; 0x3fc6 <verifySpace+0x10>
       putch(0x00);
-    3eba:	80 e0       	ldi	r24, 0x00	; 0
-    3ebc:	de cf       	rjmp	.-68     	; 0x3e7a <main+0x7a>
+    3ebe:	80 e0       	ldi	r24, 0x00	; 0
+    3ec0:	e0 cf       	rjmp	.-64     	; 0x3e82 <main+0x82>
     }
     /* Write memory, length is big endian and is in bytes */
     else if(ch == STK_PROG_PAGE) {
-    3ebe:	84 36       	cpi	r24, 0x64	; 100
-    3ec0:	09 f0       	breq	.+2      	; 0x3ec4 <main+0xc4>
-    3ec2:	40 c0       	rjmp	.+128    	; 0x3f44 <main+0x144>
+    3ec2:	84 36       	cpi	r24, 0x64	; 100
+    3ec4:	09 f0       	breq	.+2      	; 0x3ec8 <main+0xc8>
+    3ec6:	3f c0       	rjmp	.+126    	; 0x3f46 <main+0x146>
       // PROGRAM PAGE - we support flash programming only, not EEPROM
       uint8_t *bufPtr;
       uint16_t addrPtr;
 
       getch();			/* getlen() */
-    3ec4:	66 d0       	rcall	.+204    	; 0x3f92 <getch>
+    3ec8:	64 d0       	rcall	.+200    	; 0x3f92 <getch>
       length = getch();
-    3ec6:	65 d0       	rcall	.+202    	; 0x3f92 <getch>
-    3ec8:	08 2f       	mov	r16, r24
-      getch();
     3eca:	63 d0       	rcall	.+198    	; 0x3f92 <getch>
+    3ecc:	b8 2e       	mov	r11, r24
+      getch();
+    3ece:	61 d0       	rcall	.+194    	; 0x3f92 <getch>
 
       // If we are in RWW section, immediately start page erase
       if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3ecc:	80 e0       	ldi	r24, 0x00	; 0
-    3ece:	e8 16       	cp	r14, r24
     3ed0:	88 e3       	ldi	r24, 0x38	; 56
-    3ed2:	f8 06       	cpc	r15, r24
-    3ed4:	18 f4       	brcc	.+6      	; 0x3edc <main+0xdc>
-    3ed6:	f7 01       	movw	r30, r14
-    3ed8:	d7 be       	out	0x37, r13	; 55
-    3eda:	e8 95       	spm
-    3edc:	c0 e0       	ldi	r28, 0x00	; 0
-    3ede:	d1 e0       	ldi	r29, 0x01	; 1
+    3ed2:	00 30       	cpi	r16, 0x00	; 0
+    3ed4:	18 07       	cpc	r17, r24
+    3ed6:	18 f4       	brcc	.+6      	; 0x3ede <main+0xde>
+    3ed8:	f8 01       	movw	r30, r16
+    3eda:	f7 be       	out	0x37, r15	; 55
+    3edc:	e8 95       	spm
+    3ede:	81 2c       	mov	r8, r1
+    3ee0:	51 e0       	ldi	r21, 0x01	; 1
+    3ee2:	95 2e       	mov	r9, r21
 
       // While that is going on, read in page contents
       bufPtr = buff;
       do *bufPtr++ = getch();
-    3ee0:	58 d0       	rcall	.+176    	; 0x3f92 <getch>
-    3ee2:	89 93       	st	Y+, r24
+    3ee4:	56 d0       	rcall	.+172    	; 0x3f92 <getch>
+    3ee6:	f4 01       	movw	r30, r8
+    3ee8:	81 93       	st	Z+, r24
+    3eea:	4f 01       	movw	r8, r30
       while (--length);
-    3ee4:	0c 17       	cp	r16, r28
-    3ee6:	e1 f7       	brne	.-8      	; 0x3ee0 <main+0xe0>
+    3eec:	be 16       	cp	r11, r30
+    3eee:	d1 f7       	brne	.-12     	; 0x3ee4 <main+0xe4>
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
-    3eea:	ef 16       	cp	r14, r31
-    3eec:	f8 e3       	ldi	r31, 0x38	; 56
-    3eee:	ff 06       	cpc	r15, r31
-    3ef0:	18 f0       	brcs	.+6      	; 0x3ef8 <main+0xf8>
-    3ef2:	f7 01       	movw	r30, r14
-    3ef4:	d7 be       	out	0x37, r13	; 55
-    3ef6:	e8 95       	spm
+    3ef0:	f8 e3       	ldi	r31, 0x38	; 56
+    3ef2:	00 30       	cpi	r16, 0x00	; 0
+    3ef4:	1f 07       	cpc	r17, r31
+    3ef6:	18 f0       	brcs	.+6      	; 0x3efe <main+0xfe>
+    3ef8:	f8 01       	movw	r30, r16
+    3efa:	f7 be       	out	0x37, r15	; 55
+    3efc:	e8 95       	spm
 
       // Read command terminator, start reply
       verifySpace();
-    3ef8:	5e d0       	rcall	.+188    	; 0x3fb6 <verifySpace>
+    3efe:	5b d0       	rcall	.+182    	; 0x3fb6 <verifySpace>
 
       // If only a partial page is to be programmed, the erase might not be complete.
       // So check that here
       boot_spm_busy_wait();
-    3efa:	07 b6       	in	r0, 0x37	; 55
-    3efc:	00 fc       	sbrc	r0, 0
-    3efe:	fd cf       	rjmp	.-6      	; 0x3efa <main+0xfa>
-    3f00:	a7 01       	movw	r20, r14
-    3f02:	a0 e0       	ldi	r26, 0x00	; 0
-    3f04:	b1 e0       	ldi	r27, 0x01	; 1
+    3f00:	07 b6       	in	r0, 0x37	; 55
+    3f02:	00 fc       	sbrc	r0, 0
+    3f04:	fd cf       	rjmp	.-6      	; 0x3f00 <main+0x100>
+    3f06:	f8 01       	movw	r30, r16
+    3f08:	a0 e0       	ldi	r26, 0x00	; 0
+    3f0a:	b1 e0       	ldi	r27, 0x01	; 1
       bufPtr = buff;
       addrPtr = (uint16_t)(void*)address;
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
-    3f06:	2c 91       	ld	r18, X
-    3f08:	30 e0       	ldi	r19, 0x00	; 0
+    3f0c:	2c 91       	ld	r18, X
+    3f0e:	30 e0       	ldi	r19, 0x00	; 0
         a |= (*bufPtr++) << 8;
-    3f0a:	11 96       	adiw	r26, 0x01	; 1
-    3f0c:	8c 91       	ld	r24, X
-    3f0e:	11 97       	sbiw	r26, 0x01	; 1
-    3f10:	90 e0       	ldi	r25, 0x00	; 0
-    3f12:	98 2f       	mov	r25, r24
-    3f14:	88 27       	eor	r24, r24
-    3f16:	82 2b       	or	r24, r18
-    3f18:	93 2b       	or	r25, r19
+    3f10:	11 96       	adiw	r26, 0x01	; 1
+    3f12:	8c 91       	ld	r24, X
+    3f14:	11 97       	sbiw	r26, 0x01	; 1
+    3f16:	90 e0       	ldi	r25, 0x00	; 0
+    3f18:	98 2f       	mov	r25, r24
+    3f1a:	88 27       	eor	r24, r24
+    3f1c:	82 2b       	or	r24, r18
+    3f1e:	93 2b       	or	r25, r19
 # define UART_SRL UBRR3L
 # define UART_UDR UDR3
 #endif
 
 /* main program starts here */
 int main(void) {
-    3f1a:	12 96       	adiw	r26, 0x02	; 2
+    3f20:	12 96       	adiw	r26, 0x02	; 2
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    3f1c:	fa 01       	movw	r30, r20
-    3f1e:	0c 01       	movw	r0, r24
-    3f20:	a7 be       	out	0x37, r10	; 55
-    3f22:	e8 95       	spm
-    3f24:	11 24       	eor	r1, r1
+    3f22:	0c 01       	movw	r0, r24
+    3f24:	e7 be       	out	0x37, r14	; 55
+    3f26:	e8 95       	spm
+    3f28:	11 24       	eor	r1, r1
         addrPtr += 2;
-    3f26:	4e 5f       	subi	r20, 0xFE	; 254
-    3f28:	5f 4f       	sbci	r21, 0xFF	; 255
+    3f2a:	32 96       	adiw	r30, 0x02	; 2
       } while (--ch);
-    3f2a:	f1 e0       	ldi	r31, 0x01	; 1
-    3f2c:	a0 38       	cpi	r26, 0x80	; 128
-    3f2e:	bf 07       	cpc	r27, r31
-    3f30:	51 f7       	brne	.-44     	; 0x3f06 <main+0x106>
+    3f2c:	81 e0       	ldi	r24, 0x01	; 1
+    3f2e:	a0 38       	cpi	r26, 0x80	; 128
+    3f30:	b8 07       	cpc	r27, r24
+    3f32:	61 f7       	brne	.-40     	; 0x3f0c <main+0x10c>
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    3f32:	f7 01       	movw	r30, r14
-    3f34:	c7 be       	out	0x37, r12	; 55
-    3f36:	e8 95       	spm
+    3f34:	f8 01       	movw	r30, r16
+    3f36:	d7 be       	out	0x37, r13	; 55
+    3f38:	e8 95       	spm
       boot_spm_busy_wait();
-    3f38:	07 b6       	in	r0, 0x37	; 55
-    3f3a:	00 fc       	sbrc	r0, 0
-    3f3c:	fd cf       	rjmp	.-6      	; 0x3f38 <main+0x138>
+    3f3a:	07 b6       	in	r0, 0x37	; 55
+    3f3c:	00 fc       	sbrc	r0, 0
+    3f3e:	fd cf       	rjmp	.-6      	; 0x3f3a <main+0x13a>
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    3f3e:	b7 be       	out	0x37, r11	; 55
-    3f40:	e8 95       	spm
-    3f42:	1c c0       	rjmp	.+56     	; 0x3f7c <main+0x17c>
+    3f40:	c7 be       	out	0x37, r12	; 55
+    3f42:	e8 95       	spm
+    3f44:	1c c0       	rjmp	.+56     	; 0x3f7e <main+0x17e>
 #endif
 
     }
     /* Read memory block mode, length is big endian.  */
     else if(ch == STK_READ_PAGE) {
-    3f44:	84 37       	cpi	r24, 0x74	; 116
-    3f46:	61 f4       	brne	.+24     	; 0x3f60 <main+0x160>
+    3f46:	84 37       	cpi	r24, 0x74	; 116
+    3f48:	61 f4       	brne	.+24     	; 0x3f62 <main+0x162>
       // READ PAGE - we only read flash
       getch();			/* getlen() */
-    3f48:	24 d0       	rcall	.+72     	; 0x3f92 <getch>
-      length = getch();
     3f4a:	23 d0       	rcall	.+70     	; 0x3f92 <getch>
-    3f4c:	08 2f       	mov	r16, r24
+      length = getch();
+    3f4c:	22 d0       	rcall	.+68     	; 0x3f92 <getch>
+    3f4e:	b8 2e       	mov	r11, r24
       getch();
-    3f4e:	21 d0       	rcall	.+66     	; 0x3f92 <getch>
+    3f50:	20 d0       	rcall	.+64     	; 0x3f92 <getch>
 
       verifySpace();
-    3f50:	32 d0       	rcall	.+100    	; 0x3fb6 <verifySpace>
+    3f52:	31 d0       	rcall	.+98     	; 0x3fb6 <verifySpace>
         __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #else
         // read a Flash byte and increment the address
         __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #endif
         putch(ch);
-    3f52:	f7 01       	movw	r30, r14
-    3f54:	85 91       	lpm	r24, Z+
-    3f56:	7f 01       	movw	r14, r30
-    3f58:	14 d0       	rcall	.+40     	; 0x3f82 <putch>
+    3f54:	f8 01       	movw	r30, r16
+    3f56:	85 91       	lpm	r24, Z+
+    3f58:	8f 01       	movw	r16, r30
+    3f5a:	14 d0       	rcall	.+40     	; 0x3f84 <putch>
       } while (--length);
-    3f5a:	01 50       	subi	r16, 0x01	; 1
-    3f5c:	d1 f7       	brne	.-12     	; 0x3f52 <main+0x152>
-    3f5e:	0e c0       	rjmp	.+28     	; 0x3f7c <main+0x17c>
+    3f5c:	ba 94       	dec	r11
+    3f5e:	d1 f7       	brne	.-12     	; 0x3f54 <main+0x154>
+    3f60:	0e c0       	rjmp	.+28     	; 0x3f7e <main+0x17e>
     }
 
     /* Get device signature bytes  */
     else if(ch == STK_READ_SIGN) {
-    3f60:	85 37       	cpi	r24, 0x75	; 117
-    3f62:	39 f4       	brne	.+14     	; 0x3f72 <main+0x172>
+    3f62:	85 37       	cpi	r24, 0x75	; 117
+    3f64:	39 f4       	brne	.+14     	; 0x3f74 <main+0x174>
       // READ SIGN - return what Avrdude wants to hear
       verifySpace();
-    3f64:	28 d0       	rcall	.+80     	; 0x3fb6 <verifySpace>
+    3f66:	27 d0       	rcall	.+78     	; 0x3fb6 <verifySpace>
       putch(SIGNATURE_0);
-    3f66:	8e e1       	ldi	r24, 0x1E	; 30
-    3f68:	0c d0       	rcall	.+24     	; 0x3f82 <putch>
+    3f68:	8e e1       	ldi	r24, 0x1E	; 30
+    3f6a:	0c d0       	rcall	.+24     	; 0x3f84 <putch>
       putch(SIGNATURE_1);
-    3f6a:	84 e9       	ldi	r24, 0x94	; 148
-    3f6c:	0a d0       	rcall	.+20     	; 0x3f82 <putch>
+    3f6c:	84 e9       	ldi	r24, 0x94	; 148
+    3f6e:	0a d0       	rcall	.+20     	; 0x3f84 <putch>
       putch(SIGNATURE_2);
-    3f6e:	86 e0       	ldi	r24, 0x06	; 6
-    3f70:	84 cf       	rjmp	.-248    	; 0x3e7a <main+0x7a>
+    3f70:	86 e0       	ldi	r24, 0x06	; 6
+    3f72:	87 cf       	rjmp	.-242    	; 0x3e82 <main+0x82>
     }
     else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
-    3f72:	81 35       	cpi	r24, 0x51	; 81
-    3f74:	11 f4       	brne	.+4      	; 0x3f7a <main+0x17a>
+    3f74:	81 35       	cpi	r24, 0x51	; 81
+    3f76:	11 f4       	brne	.+4      	; 0x3f7c <main+0x17c>
       // Adaboot no-wait mod
       watchdogConfig(WATCHDOG_16MS);
-    3f76:	88 e0       	ldi	r24, 0x08	; 8
-    3f78:	18 d0       	rcall	.+48     	; 0x3faa <watchdogConfig>
+    3f78:	88 e0       	ldi	r24, 0x08	; 8
+    3f7a:	17 d0       	rcall	.+46     	; 0x3faa <watchdogConfig>
       verifySpace();
     }
     else {
       // This covers the response to commands like STK_ENTER_PROGMODE
       verifySpace();
-    3f7a:	1d d0       	rcall	.+58     	; 0x3fb6 <verifySpace>
+    3f7c:	1c d0       	rcall	.+56     	; 0x3fb6 <verifySpace>
     }
     putch(STK_OK);
-    3f7c:	80 e1       	ldi	r24, 0x10	; 16
-    3f7e:	01 d0       	rcall	.+2      	; 0x3f82 <putch>
-    3f80:	6f cf       	rjmp	.-290    	; 0x3e60 <main+0x60>
-
-00003f82 <putch>:
+    3f7e:	80 e1       	ldi	r24, 0x10	; 16
+    3f80:	01 d0       	rcall	.+2      	; 0x3f84 <putch>
   }
+    3f82:	71 cf       	rjmp	.-286    	; 0x3e66 <main+0x66>
+
+00003f84 <putch>:
 }
 
 void putch(char ch) {
-    3f82:	98 2f       	mov	r25, r24
 #ifndef SOFT_UART
   while (!(UART_SRA & _BV(UDRE0)));
-    3f84:	80 91 c0 00 	lds	r24, 0x00C0
-    3f88:	85 ff       	sbrs	r24, 5
-    3f8a:	fc cf       	rjmp	.-8      	; 0x3f84 <putch+0x2>
+    3f84:	90 91 c0 00 	lds	r25, 0x00C0
+    3f88:	95 ff       	sbrs	r25, 5
+    3f8a:	fc cf       	rjmp	.-8      	; 0x3f84 <putch>
   UART_UDR = ch;
-    3f8c:	90 93 c6 00 	sts	0x00C6, r25
+    3f8c:	80 93 c6 00 	sts	0x00C6, r24
       [uartBit] "I" (UART_TX_BIT)
     :
       "r25"
@@ -546,41 +552,41 @@ void verifySpace() {
   }
   putch(STK_INSYNC);
     3fc2:	84 e1       	ldi	r24, 0x14	; 20
+    3fc4:	df cf       	rjmp	.-66     	; 0x3f84 <putch>
 }
-    3fc4:	de cf       	rjmp	.-68     	; 0x3f82 <putch>
+    3fc6:	cf 93       	push	r28
 
-00003fc6 <getNch>:
+00003fc8 <getNch>:
     ::[count] "M" (UART_B_VALUE)
   );
 }
 #endif
 
 void getNch(uint8_t count) {
-    3fc6:	1f 93       	push	r17
-    3fc8:	18 2f       	mov	r17, r24
-  do getch(); while (--count);
+    3fc8:	c8 2f       	mov	r28, r24
     3fca:	e3 df       	rcall	.-58     	; 0x3f92 <getch>
-    3fcc:	11 50       	subi	r17, 0x01	; 1
-    3fce:	e9 f7       	brne	.-6      	; 0x3fca <getNch+0x4>
-  verifySpace();
+  do getch(); while (--count);
+    3fcc:	c1 50       	subi	r28, 0x01	; 1
+    3fce:	e9 f7       	brne	.-6      	; 0x3fca <getNch+0x2>
     3fd0:	f2 df       	rcall	.-28     	; 0x3fb6 <verifySpace>
+  verifySpace();
+    3fd2:	cf 91       	pop	r28
 }
-    3fd2:	1f 91       	pop	r17
     3fd4:	08 95       	ret
 
 00003fd6 <appStart>:
+    3fd6:	28 2e       	mov	r2, r24
 
 void appStart(uint8_t rstFlags) {
   // save the reset flags in the designated register
   //  This can be saved in a main program by putting code in .init0 (which
   //  executes before normal c init code) to save R2 to a global variable.
   __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
-    3fd6:	28 2e       	mov	r2, r24
+    3fd8:	80 e0       	ldi	r24, 0x00	; 0
 
   watchdogConfig(WATCHDOG_OFF);
-    3fd8:	80 e0       	ldi	r24, 0x00	; 0
     3fda:	e7 df       	rcall	.-50     	; 0x3faa <watchdogConfig>
-  __asm__ __volatile__ (
     3fdc:	ee 27       	eor	r30, r30
+  __asm__ __volatile__ (
     3fde:	ff 27       	eor	r31, r31
     3fe0:	09 94       	ijmp
diff --git a/optiboot/bootloaders/optiboot/optiboot_luminet.hex b/optiboot/bootloaders/optiboot/optiboot_luminet.hex
index 861ae0c..64f2c32 100644
--- a/optiboot/bootloaders/optiboot/optiboot_luminet.hex
+++ b/optiboot/bootloaders/optiboot/optiboot_luminet.hex
@@ -1,41 +1,42 @@
-:101D0000112484B714BE81FF24D185E08EBD8EE0FE
-:101D10000CD1D49AD29A86E023EC3FEF91E03DBDFE
-:101D20002CBD9BB9589BFECFCC9AA8958150B9F792
-:101D3000EE24FF2493E0992EBB24B39485E0A82ED3
-:101D40000FE7D02E1EECC12EDDD0813461F4DAD045
-:101D5000082FEFD0023829F1013811F485E001C0D5
-:101D600083E0C1D0BDC0823411F484E103C0853466
-:101D700019F485E0E6D0B4C0853579F4C3D0E82EF7
-:101D8000FF24C0D0082F10E0102F00270E291F2994
-:101D9000000F111FCED07801A3C0863521F484E056
-:101DA000D0D080E0DECF843609F05FC0ABD0AAD0BF
-:101DB000182FA8D0C0E0D1E0A5D089931C17E1F777
-:101DC000F70197BEE895B5D007B600FCFDCFE1144A
-:101DD000F10411F0A7012AC08091000120910101B6
-:101DE00030E0322F222790E0282B392B30938501C9
-:101DF00020938401409108018091090190E0982F7F
-:101E0000882750E0842B952B90938701809386013F
-:101E10002450304020930801232F332720930901B9
-:101E2000D0920001C092010140E050E0A0E0B1E09A
+:101D00000F92CDB7DEB7112484B714BE81FF24D162
+:101D100085E08EBD8EE00CD1D49AD29A26E083EC79
+:101D20009FEF31E09DBD8CBD3BB9589BFECFCC9A57
+:101D3000A8952150B9F700E010E0B3E0FB2EEE24A7
+:101D4000E39485E0D82E9FE7C92E2EECB22EDDD08D
+:101D5000813469F4DAD08983EFD08981823819F12E
+:101D6000813811F485E001C083E0C0D0BCC082346A
+:101D700011F484E103C0853419F485E0E5D0B3C0E3
+:101D8000853569F4C2D0682E7724BFD0082F10E0C3
+:101D9000102F002706291729000F111FA3C0863511
+:101DA00021F484E0D1D080E0E0CF843609F05BC03C
+:101DB000ACD0ABD0A82EA9D0612CE1E07E2EA5D06E
+:101DC000F30181933F01AE16D1F7F801F7BEE89514
+:101DD000B3D007B600FCFDCF0115110531F54091D8
+:101DE000010150E0542F44278091000190E0482BDE
+:101DF000592B50938501409384018091090190E013
+:101E0000982F88272091080130E0822B932B909304
+:101E100087018093860144505040409308015093BD
+:101E20000901C0920001B0920101F801A0E0B1E007
 :101E30002C9130E011968C91119790E0982F882783
-:101E4000822B932B1296FA010C01B7BEE895112450
-:101E50004E5F5F4FF1E0A034BF0751F7F701A7BE17
-:101E6000E89507B600FCFDCF3BC0843759F54AD052
-:101E700049D0182F47D05DD0E701012F209719F4E2
-:101E80008091840114C0C130D10519F4809185017D
-:101E90000EC0C830D10519F48091860108C0C93040
-:101EA000D10519F48091870102C0FE018491219629
-:101EB0001AD0015019F70894E11CF11C1150E10EE1
-:101EC000F11C0EC0853739F434D08EE10CD083E993
-:101ED0000AD08CE046CF813511F488E026D029D095
-:101EE00080E101D031CF2AE030E08095089410F4F1
-:101EF000DA9802C0DA9A000014D013D086952A9599
-:101F0000B1F7089529E030E0CB99FECF0AD009D08F
-:101F100008D08894CB9908942A9511F08795F7CF2B
-:101F200008959EE09A95F1F7089598E191BD81BDDD
-:101F30000895E8DF803219F088E0F7DFFFCF84E111
-:101F4000D2CF1F93182FDEDF1150E9F7F2DF1F9178
-:0E1F50000895282E80E0E9DFE4E0FF270994E1
+:101E4000822B932B12960C01E7BEE8951124329653
+:101E500081E0A034B80761F7F801D7BEE89507B66E
+:101E600000FCFDCF40C0843781F54FD04ED0982E76
+:101E70004CD062D0A92C38016114710419F48091FE
+:101E8000840117C0F1E06F16710419F48091850187
+:101E900010C088E06816710419F48091860109C0A9
+:101EA000E9E06E16710419F48091870102C0F30114
+:101EB00084910894611C711C19D0AA94E9F60F5FF3
+:101EC0001F4F9A94090D111D0EC0853739F434D077
+:101ED0008EE10CD083E90AD08CE047CF813511F434
+:101EE00088E026D029D080E101D031CF2AE030E04F
+:101EF0008095089410F4DA9802C0DA9A000014D0A1
+:101F000013D086952A95B1F7089529E030E0CB9952
+:101F1000FECF0AD009D008D08894CB9908942A958E
+:101F200011F08795F7CF08959EE09A95F1F70895FF
+:101F300098E191BD81BD0895E8DF803219F088E015
+:101F4000F7DFFFCF84E1D2CFCF93C82FDEDFC150C0
+:101F5000E9F7F2DFCF910895282E80E0E9DFE4E091
+:041F6000FF270994BA
 :021EFE000005DD
 :0400000300001D00DC
 :00000001FF
diff --git a/optiboot/bootloaders/optiboot/optiboot_luminet.lst b/optiboot/bootloaders/optiboot/optiboot_luminet.lst
index a64bc76..2e54f26 100644
--- a/optiboot/bootloaders/optiboot/optiboot_luminet.lst
+++ b/optiboot/bootloaders/optiboot/optiboot_luminet.lst
@@ -3,27 +3,27 @@ optiboot_luminet.elf:     file format elf32-avr
 
 Sections:
 Idx Name          Size      VMA       LMA       File off  Algn
-  0 .text         0000025e  00001d00  00001d00  00000054  2**1
+  0 .text         00000264  00001d00  00001d00  00000074  2**1
                   CONTENTS, ALLOC, LOAD, READONLY, CODE
-  1 .version      00000002  00001efe  00001efe  000002b2  2**0
+  1 .version      00000002  00001efe  00001efe  000002d8  2**0
                   CONTENTS, READONLY
-  2 .debug_aranges 00000028  00000000  00000000  000002b4  2**0
+  2 .data         00000000  00800060  00001f64  000002d8  2**0
+                  CONTENTS, ALLOC, LOAD, DATA
+  3 .debug_aranges 00000028  00000000  00000000  000002da  2**0
                   CONTENTS, READONLY, DEBUGGING
-  3 .debug_pubnames 0000006d  00000000  00000000  000002dc  2**0
+  4 .debug_info   000002d7  00000000  00000000  00000302  2**0
                   CONTENTS, READONLY, DEBUGGING
-  4 .debug_info   000002d2  00000000  00000000  00000349  2**0
+  5 .debug_abbrev 00000181  00000000  00000000  000005d9  2**0
                   CONTENTS, READONLY, DEBUGGING
-  5 .debug_abbrev 00000176  00000000  00000000  0000061b  2**0
+  6 .debug_line   000001a9  00000000  00000000  0000075a  2**0
                   CONTENTS, READONLY, DEBUGGING
-  6 .debug_line   00000471  00000000  00000000  00000791  2**0
+  7 .debug_frame  000000a4  00000000  00000000  00000904  2**2
                   CONTENTS, READONLY, DEBUGGING
-  7 .debug_frame  00000090  00000000  00000000  00000c04  2**2
+  8 .debug_str    00000152  00000000  00000000  000009a8  2**0
                   CONTENTS, READONLY, DEBUGGING
-  8 .debug_str    00000152  00000000  00000000  00000c94  2**0
+  9 .debug_loc    00000326  00000000  00000000  00000afa  2**0
                   CONTENTS, READONLY, DEBUGGING
-  9 .debug_loc    000002b4  00000000  00000000  00000de6  2**0
-                  CONTENTS, READONLY, DEBUGGING
- 10 .debug_ranges 00000098  00000000  00000000  0000109a  2**0
+ 10 .debug_ranges 00000060  00000000  00000000  00000e20  2**0
                   CONTENTS, READONLY, DEBUGGING
 
 Disassembly of section .text:
@@ -35,326 +35,344 @@ Disassembly of section .text:
 
 /* main program starts here */
 int main(void) {
-    1d00:	11 24       	eor	r1, r1
+    1d00:	0f 92       	push	r0
+    1d02:	cd b7       	in	r28, 0x3d	; 61
+    1d04:	de b7       	in	r29, 0x3e	; 62
+  //  SP points to RAMEND
+  //  r1 contains zero
+  //
+  // If not, uncomment the following instructions:
+  // cli();
+  asm volatile ("clr __zero_reg__");
+    1d06:	11 24       	eor	r1, r1
 #if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
   SP=RAMEND;  // This is done by hardware reset
 #endif
 
   // Adaboot no-wait mod
   ch = MCUSR;
-    1d02:	84 b7       	in	r24, 0x34	; 52
+    1d08:	84 b7       	in	r24, 0x34	; 52
   MCUSR = 0;
-    1d04:	14 be       	out	0x34, r1	; 52
+    1d0a:	14 be       	out	0x34, r1	; 52
   if (!(ch & _BV(EXTRF))) appStart(ch);
-    1d06:	81 ff       	sbrs	r24, 1
-    1d08:	24 d1       	rcall	.+584    	; 0x1f52 <appStart>
+    1d0c:	81 ff       	sbrs	r24, 1
+    1d0e:	24 d1       	rcall	.+584    	; 0x1f58 <appStart>
 
 #if LED_START_FLASHES > 0
   // Set up Timer 1 for timeout counter
   TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
-    1d0a:	85 e0       	ldi	r24, 0x05	; 5
-    1d0c:	8e bd       	out	0x2e, r24	; 46
+    1d10:	85 e0       	ldi	r24, 0x05	; 5
+    1d12:	8e bd       	out	0x2e, r24	; 46
   UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
 #endif
 #endif
 
   // Set up watchdog to trigger after 500ms
   watchdogConfig(WATCHDOG_1S);
-    1d0e:	8e e0       	ldi	r24, 0x0E	; 14
-    1d10:	0c d1       	rcall	.+536    	; 0x1f2a <watchdogConfig>
+    1d14:	8e e0       	ldi	r24, 0x0E	; 14
+    1d16:	0c d1       	rcall	.+536    	; 0x1f30 <watchdogConfig>
 
 #if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
   /* Set LED pin as output */
   LED_DDR |= _BV(LED);
-    1d12:	d4 9a       	sbi	0x1a, 4	; 26
+    1d18:	d4 9a       	sbi	0x1a, 4	; 26
 #endif
 
 #ifdef SOFT_UART
   /* Set TX pin as output */
   UART_DDR |= _BV(UART_TX_BIT);
-    1d14:	d2 9a       	sbi	0x1a, 2	; 26
-    1d16:	86 e0       	ldi	r24, 0x06	; 6
+    1d1a:	d2 9a       	sbi	0x1a, 2	; 26
+    1d1c:	26 e0       	ldi	r18, 0x06	; 6
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    1d18:	23 ec       	ldi	r18, 0xC3	; 195
-    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
+    1d1e:	83 ec       	ldi	r24, 0xC3	; 195
+    1d20:	9f ef       	ldi	r25, 0xFF	; 255
     TIFR1 = _BV(TOV1);
-    1d1c:	91 e0       	ldi	r25, 0x01	; 1
+    1d22:	31 e0       	ldi	r19, 0x01	; 1
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    1d1e:	3d bd       	out	0x2d, r19	; 45
-    1d20:	2c bd       	out	0x2c, r18	; 44
+    1d24:	9d bd       	out	0x2d, r25	; 45
+    1d26:	8c bd       	out	0x2c, r24	; 44
     TIFR1 = _BV(TOV1);
-    1d22:	9b b9       	out	0x0b, r25	; 11
+    1d28:	3b b9       	out	0x0b, r19	; 11
     while(!(TIFR1 & _BV(TOV1)));
-    1d24:	58 9b       	sbis	0x0b, 0	; 11
-    1d26:	fe cf       	rjmp	.-4      	; 0x1d24 <main+0x24>
+    1d2a:	58 9b       	sbis	0x0b, 0	; 11
+    1d2c:	fe cf       	rjmp	.-4      	; 0x1d2a <main+0x2a>
 #if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
-    1d28:	cc 9a       	sbi	0x19, 4	; 25
+    1d2e:	cc 9a       	sbi	0x19, 4	; 25
 }
 #endif
 
 // Watchdog functions. These are only safe with interrupts turned off.
 void watchdogReset() {
   __asm__ __volatile__ (
-    1d2a:	a8 95       	wdr
+    1d30:	a8 95       	wdr
+    1d32:	21 50       	subi	r18, 0x01	; 1
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
 #endif
     watchdogReset();
   } while (--count);
-    1d2c:	81 50       	subi	r24, 0x01	; 1
-    1d2e:	b9 f7       	brne	.-18     	; 0x1d1e <main+0x1e>
-    1d30:	ee 24       	eor	r14, r14
-    1d32:	ff 24       	eor	r15, r15
+    1d34:	b9 f7       	brne	.-18     	; 0x1d24 <main+0x24>
+    1d36:	00 e0       	ldi	r16, 0x00	; 0
+    1d38:	10 e0       	ldi	r17, 0x00	; 0
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    1d34:	93 e0       	ldi	r25, 0x03	; 3
-    1d36:	99 2e       	mov	r9, r25
+    1d3a:	b3 e0       	ldi	r27, 0x03	; 3
+    1d3c:	fb 2e       	mov	r15, r27
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    1d38:	bb 24       	eor	r11, r11
-    1d3a:	b3 94       	inc	r11
+    1d3e:	ee 24       	eor	r14, r14
+    1d40:	e3 94       	inc	r14
         addrPtr += 2;
       } while (--ch);
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    1d3c:	85 e0       	ldi	r24, 0x05	; 5
-    1d3e:	a8 2e       	mov	r10, r24
+    1d42:	85 e0       	ldi	r24, 0x05	; 5
+    1d44:	d8 2e       	mov	r13, r24
         vect -= 4; // Instruction is a relative jump (rjmp), so recalculate.
         buff[8] = vect & 0xff;
         buff[9] = vect >> 8;
 
         // Add jump to bootloader at RESET vector
         buff[0] = 0x7f;
-    1d40:	0f e7       	ldi	r16, 0x7F	; 127
-    1d42:	d0 2e       	mov	r13, r16
+    1d46:	9f e7       	ldi	r25, 0x7F	; 127
+    1d48:	c9 2e       	mov	r12, r25
         buff[1] = 0xce; // rjmp 0x1d00 instruction
-    1d44:	1e ec       	ldi	r17, 0xCE	; 206
-    1d46:	c1 2e       	mov	r12, r17
+    1d4a:	2e ec       	ldi	r18, 0xCE	; 206
+    1d4c:	b2 2e       	mov	r11, r18
 #endif
 
   /* Forever loop */
   for (;;) {
     /* get character from UART */
     ch = getch();
-    1d48:	dd d0       	rcall	.+442    	; 0x1f04 <getch>
+    1d4e:	dd d0       	rcall	.+442    	; 0x1f0a <getch>
 
     if(ch == STK_GET_PARAMETER) {
-    1d4a:	81 34       	cpi	r24, 0x41	; 65
-    1d4c:	61 f4       	brne	.+24     	; 0x1d66 <main+0x66>
+    1d50:	81 34       	cpi	r24, 0x41	; 65
+    1d52:	69 f4       	brne	.+26     	; 0x1d6e <main+0x6e>
       unsigned char which = getch();
-    1d4e:	da d0       	rcall	.+436    	; 0x1f04 <getch>
-    1d50:	08 2f       	mov	r16, r24
+    1d54:	da d0       	rcall	.+436    	; 0x1f0a <getch>
       verifySpace();
-    1d52:	ef d0       	rcall	.+478    	; 0x1f32 <verifySpace>
+    1d56:	89 83       	std	Y+1, r24	; 0x01
+    1d58:	ef d0       	rcall	.+478    	; 0x1f38 <verifySpace>
       if (which == 0x82) {
-    1d54:	02 38       	cpi	r16, 0x82	; 130
-    1d56:	29 f1       	breq	.+74     	; 0x1da2 <main+0xa2>
+    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
+    1d5c:	82 38       	cpi	r24, 0x82	; 130
+    1d5e:	19 f1       	breq	.+70     	; 0x1da6 <main+0xa6>
 	/*
 	 * Send optiboot version as "minor SW version"
 	 */
 	putch(OPTIBOOT_MINVER);
       } else if (which == 0x81) {
-    1d58:	01 38       	cpi	r16, 0x81	; 129
-    1d5a:	11 f4       	brne	.+4      	; 0x1d60 <main+0x60>
+    1d60:	81 38       	cpi	r24, 0x81	; 129
+    1d62:	11 f4       	brne	.+4      	; 0x1d68 <main+0x68>
 	  putch(OPTIBOOT_MAJVER);
-    1d5c:	85 e0       	ldi	r24, 0x05	; 5
-    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <main+0x62>
+    1d64:	85 e0       	ldi	r24, 0x05	; 5
+    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <main+0x6a>
       } else {
 	/*
 	 * GET PARAMETER returns a generic 0x03 reply for
          * other parameters - enough to keep Avrdude happy
 	 */
 	putch(0x03);
-    1d60:	83 e0       	ldi	r24, 0x03	; 3
-    1d62:	c1 d0       	rcall	.+386    	; 0x1ee6 <putch>
-    1d64:	bd c0       	rjmp	.+378    	; 0x1ee0 <main+0x1e0>
+    1d68:	83 e0       	ldi	r24, 0x03	; 3
+    1d6a:	c0 d0       	rcall	.+384    	; 0x1eec <putch>
+    1d6c:	bc c0       	rjmp	.+376    	; 0x1ee6 <main+0x1e6>
       }
     }
     else if(ch == STK_SET_DEVICE) {
-    1d66:	82 34       	cpi	r24, 0x42	; 66
-    1d68:	11 f4       	brne	.+4      	; 0x1d6e <main+0x6e>
+    1d6e:	82 34       	cpi	r24, 0x42	; 66
+    1d70:	11 f4       	brne	.+4      	; 0x1d76 <main+0x76>
       // SET DEVICE is ignored
       getNch(20);
-    1d6a:	84 e1       	ldi	r24, 0x14	; 20
-    1d6c:	03 c0       	rjmp	.+6      	; 0x1d74 <main+0x74>
+    1d72:	84 e1       	ldi	r24, 0x14	; 20
+    1d74:	03 c0       	rjmp	.+6      	; 0x1d7c <main+0x7c>
     }
     else if(ch == STK_SET_DEVICE_EXT) {
-    1d6e:	85 34       	cpi	r24, 0x45	; 69
-    1d70:	19 f4       	brne	.+6      	; 0x1d78 <main+0x78>
+    1d76:	85 34       	cpi	r24, 0x45	; 69
+    1d78:	19 f4       	brne	.+6      	; 0x1d80 <main+0x80>
       // SET DEVICE EXT is ignored
       getNch(5);
-    1d72:	85 e0       	ldi	r24, 0x05	; 5
-    1d74:	e6 d0       	rcall	.+460    	; 0x1f42 <getNch>
-    1d76:	b4 c0       	rjmp	.+360    	; 0x1ee0 <main+0x1e0>
+    1d7a:	85 e0       	ldi	r24, 0x05	; 5
+    1d7c:	e5 d0       	rcall	.+458    	; 0x1f48 <verifySpace+0x10>
+    1d7e:	b3 c0       	rjmp	.+358    	; 0x1ee6 <main+0x1e6>
     }
     else if(ch == STK_LOAD_ADDRESS) {
-    1d78:	85 35       	cpi	r24, 0x55	; 85
-    1d7a:	79 f4       	brne	.+30     	; 0x1d9a <main+0x9a>
+    1d80:	85 35       	cpi	r24, 0x55	; 85
+    1d82:	69 f4       	brne	.+26     	; 0x1d9e <main+0x9e>
       // LOAD ADDRESS
       uint16_t newAddress;
       newAddress = getch();
-    1d7c:	c3 d0       	rcall	.+390    	; 0x1f04 <getch>
+    1d84:	c2 d0       	rcall	.+388    	; 0x1f0a <getch>
+    1d86:	68 2e       	mov	r6, r24
+    1d88:	77 24       	eor	r7, r7
       newAddress = (newAddress & 0xff) | (getch() << 8);
-    1d7e:	e8 2e       	mov	r14, r24
-    1d80:	ff 24       	eor	r15, r15
-    1d82:	c0 d0       	rcall	.+384    	; 0x1f04 <getch>
-    1d84:	08 2f       	mov	r16, r24
-    1d86:	10 e0       	ldi	r17, 0x00	; 0
-    1d88:	10 2f       	mov	r17, r16
-    1d8a:	00 27       	eor	r16, r16
-    1d8c:	0e 29       	or	r16, r14
-    1d8e:	1f 29       	or	r17, r15
+    1d8a:	bf d0       	rcall	.+382    	; 0x1f0a <getch>
+    1d8c:	08 2f       	mov	r16, r24
+    1d8e:	10 e0       	ldi	r17, 0x00	; 0
+    1d90:	10 2f       	mov	r17, r16
+    1d92:	00 27       	eor	r16, r16
+    1d94:	06 29       	or	r16, r6
+    1d96:	17 29       	or	r17, r7
 #ifdef RAMPZ
       // Transfer top bit to RAMPZ
       RAMPZ = (newAddress & 0x8000) ? 1 : 0;
 #endif
       newAddress += newAddress; // Convert from word address to byte address
-    1d90:	00 0f       	add	r16, r16
-    1d92:	11 1f       	adc	r17, r17
+    1d98:	00 0f       	add	r16, r16
+    1d9a:	11 1f       	adc	r17, r17
+    1d9c:	a3 c0       	rjmp	.+326    	; 0x1ee4 <main+0x1e4>
       address = newAddress;
       verifySpace();
-    1d94:	ce d0       	rcall	.+412    	; 0x1f32 <verifySpace>
-    1d96:	78 01       	movw	r14, r16
-    1d98:	a3 c0       	rjmp	.+326    	; 0x1ee0 <main+0x1e0>
     }
     else if(ch == STK_UNIVERSAL) {
-    1d9a:	86 35       	cpi	r24, 0x56	; 86
-    1d9c:	21 f4       	brne	.+8      	; 0x1da6 <main+0xa6>
+    1d9e:	86 35       	cpi	r24, 0x56	; 86
+    1da0:	21 f4       	brne	.+8      	; 0x1daa <main+0xaa>
       // UNIVERSAL command is ignored
       getNch(4);
-    1d9e:	84 e0       	ldi	r24, 0x04	; 4
-    1da0:	d0 d0       	rcall	.+416    	; 0x1f42 <getNch>
+    1da2:	84 e0       	ldi	r24, 0x04	; 4
+    1da4:	d1 d0       	rcall	.+418    	; 0x1f48 <verifySpace+0x10>
       putch(0x00);
-    1da2:	80 e0       	ldi	r24, 0x00	; 0
-    1da4:	de cf       	rjmp	.-68     	; 0x1d62 <main+0x62>
+    1da6:	80 e0       	ldi	r24, 0x00	; 0
+    1da8:	e0 cf       	rjmp	.-64     	; 0x1d6a <main+0x6a>
     }
     /* Write memory, length is big endian and is in bytes */
     else if(ch == STK_PROG_PAGE) {
-    1da6:	84 36       	cpi	r24, 0x64	; 100
-    1da8:	09 f0       	breq	.+2      	; 0x1dac <main+0xac>
-    1daa:	5f c0       	rjmp	.+190    	; 0x1e6a <main+0x16a>
+    1daa:	84 36       	cpi	r24, 0x64	; 100
+    1dac:	09 f0       	breq	.+2      	; 0x1db0 <main+0xb0>
+    1dae:	5b c0       	rjmp	.+182    	; 0x1e66 <main+0x166>
       // PROGRAM PAGE - we support flash programming only, not EEPROM
       uint8_t *bufPtr;
       uint16_t addrPtr;
 
       getch();			/* getlen() */
-    1dac:	ab d0       	rcall	.+342    	; 0x1f04 <getch>
+    1db0:	ac d0       	rcall	.+344    	; 0x1f0a <getch>
       length = getch();
-    1dae:	aa d0       	rcall	.+340    	; 0x1f04 <getch>
-    1db0:	18 2f       	mov	r17, r24
+    1db2:	ab d0       	rcall	.+342    	; 0x1f0a <getch>
+    1db4:	a8 2e       	mov	r10, r24
       getch();
-    1db2:	a8 d0       	rcall	.+336    	; 0x1f04 <getch>
-    1db4:	c0 e0       	ldi	r28, 0x00	; 0
-    1db6:	d1 e0       	ldi	r29, 0x01	; 1
+    1db6:	a9 d0       	rcall	.+338    	; 0x1f0a <getch>
+
       // If we are in RWW section, immediately start page erase
       if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
 
       // While that is going on, read in page contents
       bufPtr = buff;
+    1db8:	61 2c       	mov	r6, r1
+    1dba:	e1 e0       	ldi	r30, 0x01	; 1
+    1dbc:	7e 2e       	mov	r7, r30
       do *bufPtr++ = getch();
-    1db8:	a5 d0       	rcall	.+330    	; 0x1f04 <getch>
-    1dba:	89 93       	st	Y+, r24
+    1dbe:	a5 d0       	rcall	.+330    	; 0x1f0a <getch>
+    1dc0:	f3 01       	movw	r30, r6
+    1dc2:	81 93       	st	Z+, r24
+    1dc4:	3f 01       	movw	r6, r30
       while (--length);
-    1dbc:	1c 17       	cp	r17, r28
-    1dbe:	e1 f7       	brne	.-8      	; 0x1db8 <main+0xb8>
+    1dc6:	ae 16       	cp	r10, r30
+    1dc8:	d1 f7       	brne	.-12     	; 0x1dbe <main+0xbe>
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    1dc0:	f7 01       	movw	r30, r14
-    1dc2:	97 be       	out	0x37, r9	; 55
-    1dc4:	e8 95       	spm
+    1dca:	f8 01       	movw	r30, r16
+    1dcc:	f7 be       	out	0x37, r15	; 55
+    1dce:	e8 95       	spm
 
       // Read command terminator, start reply
       verifySpace();
-    1dc6:	b5 d0       	rcall	.+362    	; 0x1f32 <verifySpace>
+    1dd0:	b3 d0       	rcall	.+358    	; 0x1f38 <verifySpace>
 
       // If only a partial page is to be programmed, the erase might not be complete.
       // So check that here
       boot_spm_busy_wait();
-    1dc8:	07 b6       	in	r0, 0x37	; 55
-    1dca:	00 fc       	sbrc	r0, 0
-    1dcc:	fd cf       	rjmp	.-6      	; 0x1dc8 <main+0xc8>
+    1dd2:	07 b6       	in	r0, 0x37	; 55
+    1dd4:	00 fc       	sbrc	r0, 0
+    1dd6:	fd cf       	rjmp	.-6      	; 0x1dd2 <main+0xd2>
 
 #ifdef VIRTUAL_BOOT_PARTITION
       if ((uint16_t)(void*)address == 0) {
-    1dce:	e1 14       	cp	r14, r1
-    1dd0:	f1 04       	cpc	r15, r1
-    1dd2:	11 f0       	breq	.+4      	; 0x1dd8 <main+0xd8>
-    1dd4:	a7 01       	movw	r20, r14
-    1dd6:	2a c0       	rjmp	.+84     	; 0x1e2c <main+0x12c>
+    1dd8:	01 15       	cp	r16, r1
+    1dda:	11 05       	cpc	r17, r1
+    1ddc:	31 f5       	brne	.+76     	; 0x1e2a <main+0x12a>
         // This is the reset vector page. We need to live-patch the code so the
         // bootloader runs.
         //
         // Move RESET vector to WDT vector
         uint16_t vect = buff[0] | (buff[1]<<8);
-    1dd8:	80 91 00 01 	lds	r24, 0x0100
-    1ddc:	20 91 01 01 	lds	r18, 0x0101
-    1de0:	30 e0       	ldi	r19, 0x00	; 0
-    1de2:	32 2f       	mov	r19, r18
-    1de4:	22 27       	eor	r18, r18
-    1de6:	90 e0       	ldi	r25, 0x00	; 0
-    1de8:	28 2b       	or	r18, r24
-    1dea:	39 2b       	or	r19, r25
+    1dde:	40 91 01 01 	lds	r20, 0x0101
+    1de2:	50 e0       	ldi	r21, 0x00	; 0
+    1de4:	54 2f       	mov	r21, r20
+    1de6:	44 27       	eor	r20, r20
+    1de8:	80 91 00 01 	lds	r24, 0x0100
+    1dec:	90 e0       	ldi	r25, 0x00	; 0
+    1dee:	48 2b       	or	r20, r24
+    1df0:	59 2b       	or	r21, r25
         rstVect = vect;
-    1dec:	30 93 85 01 	sts	0x0185, r19
-    1df0:	20 93 84 01 	sts	0x0184, r18
+    1df2:	50 93 85 01 	sts	0x0185, r21
+    1df6:	40 93 84 01 	sts	0x0184, r20
         wdtVect = buff[8] | (buff[9]<<8);
-    1df4:	40 91 08 01 	lds	r20, 0x0108
-    1df8:	80 91 09 01 	lds	r24, 0x0109
-    1dfc:	90 e0       	ldi	r25, 0x00	; 0
-    1dfe:	98 2f       	mov	r25, r24
-    1e00:	88 27       	eor	r24, r24
-    1e02:	50 e0       	ldi	r21, 0x00	; 0
-    1e04:	84 2b       	or	r24, r20
-    1e06:	95 2b       	or	r25, r21
-    1e08:	90 93 87 01 	sts	0x0187, r25
-    1e0c:	80 93 86 01 	sts	0x0186, r24
+    1dfa:	80 91 09 01 	lds	r24, 0x0109
+    1dfe:	90 e0       	ldi	r25, 0x00	; 0
+    1e00:	98 2f       	mov	r25, r24
+    1e02:	88 27       	eor	r24, r24
+    1e04:	20 91 08 01 	lds	r18, 0x0108
+    1e08:	30 e0       	ldi	r19, 0x00	; 0
+    1e0a:	82 2b       	or	r24, r18
+    1e0c:	93 2b       	or	r25, r19
+    1e0e:	90 93 87 01 	sts	0x0187, r25
+    1e12:	80 93 86 01 	sts	0x0186, r24
         vect -= 4; // Instruction is a relative jump (rjmp), so recalculate.
-    1e10:	24 50       	subi	r18, 0x04	; 4
-    1e12:	30 40       	sbci	r19, 0x00	; 0
+    1e16:	44 50       	subi	r20, 0x04	; 4
+    1e18:	50 40       	sbci	r21, 0x00	; 0
         buff[8] = vect & 0xff;
-    1e14:	20 93 08 01 	sts	0x0108, r18
+    1e1a:	40 93 08 01 	sts	0x0108, r20
         buff[9] = vect >> 8;
-    1e18:	23 2f       	mov	r18, r19
-    1e1a:	33 27       	eor	r19, r19
-    1e1c:	20 93 09 01 	sts	0x0109, r18
+    1e1e:	50 93 09 01 	sts	0x0109, r21
 
         // Add jump to bootloader at RESET vector
         buff[0] = 0x7f;
-    1e20:	d0 92 00 01 	sts	0x0100, r13
+    1e22:	c0 92 00 01 	sts	0x0100, r12
+        buff[1] = 0xce; // rjmp 0x1d00 instruction
+    1e26:	b0 92 01 01 	sts	0x0101, r11
+
+      // If we are in RWW section, immediately start page erase
+      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
+
+      // While that is going on, read in page contents
+      bufPtr = buff;
+    1e2a:	f8 01       	movw	r30, r16
         buff[1] = 0xce; // rjmp 0x1d00 instruction
-    1e24:	c0 92 01 01 	sts	0x0101, r12
-    1e28:	40 e0       	ldi	r20, 0x00	; 0
-    1e2a:	50 e0       	ldi	r21, 0x00	; 0
+      }
+#endif
+
+      // Copy buffer into programming buffer
+      bufPtr = buff;
     1e2c:	a0 e0       	ldi	r26, 0x00	; 0
     1e2e:	b1 e0       	ldi	r27, 0x01	; 1
-      bufPtr = buff;
       addrPtr = (uint16_t)(void*)address;
       ch = SPM_PAGESIZE / 2;
       do {
@@ -384,277 +402,290 @@ int main(void) {
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    1e46:	fa 01       	movw	r30, r20
-    1e48:	0c 01       	movw	r0, r24
-    1e4a:	b7 be       	out	0x37, r11	; 55
-    1e4c:	e8 95       	spm
-    1e4e:	11 24       	eor	r1, r1
+    1e46:	0c 01       	movw	r0, r24
+    1e48:	e7 be       	out	0x37, r14	; 55
+    1e4a:	e8 95       	spm
+    1e4c:	11 24       	eor	r1, r1
         addrPtr += 2;
-    1e50:	4e 5f       	subi	r20, 0xFE	; 254
-    1e52:	5f 4f       	sbci	r21, 0xFF	; 255
+    1e4e:	32 96       	adiw	r30, 0x02	; 2
       } while (--ch);
-    1e54:	f1 e0       	ldi	r31, 0x01	; 1
-    1e56:	a0 34       	cpi	r26, 0x40	; 64
-    1e58:	bf 07       	cpc	r27, r31
-    1e5a:	51 f7       	brne	.-44     	; 0x1e30 <main+0x130>
+    1e50:	81 e0       	ldi	r24, 0x01	; 1
+    1e52:	a0 34       	cpi	r26, 0x40	; 64
+    1e54:	b8 07       	cpc	r27, r24
+    1e56:	61 f7       	brne	.-40     	; 0x1e30 <main+0x130>
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    1e5c:	f7 01       	movw	r30, r14
-    1e5e:	a7 be       	out	0x37, r10	; 55
-    1e60:	e8 95       	spm
+    1e58:	f8 01       	movw	r30, r16
+    1e5a:	d7 be       	out	0x37, r13	; 55
+    1e5c:	e8 95       	spm
       boot_spm_busy_wait();
-    1e62:	07 b6       	in	r0, 0x37	; 55
-    1e64:	00 fc       	sbrc	r0, 0
-    1e66:	fd cf       	rjmp	.-6      	; 0x1e62 <main+0x162>
-    1e68:	3b c0       	rjmp	.+118    	; 0x1ee0 <main+0x1e0>
+    1e5e:	07 b6       	in	r0, 0x37	; 55
+    1e60:	00 fc       	sbrc	r0, 0
+    1e62:	fd cf       	rjmp	.-6      	; 0x1e5e <main+0x15e>
+    1e64:	40 c0       	rjmp	.+128    	; 0x1ee6 <main+0x1e6>
       boot_rww_enable();
 #endif
 
     }
     /* Read memory block mode, length is big endian.  */
     else if(ch == STK_READ_PAGE) {
-    1e6a:	84 37       	cpi	r24, 0x74	; 116
-    1e6c:	59 f5       	brne	.+86     	; 0x1ec4 <main+0x1c4>
+    1e66:	84 37       	cpi	r24, 0x74	; 116
+    1e68:	81 f5       	brne	.+96     	; 0x1eca <main+0x1ca>
+      // READ PAGE - we only read flash
+      getch();			/* getlen() */
+    1e6a:	4f d0       	rcall	.+158    	; 0x1f0a <getch>
+      length = getch();
+    1e6c:	4e d0       	rcall	.+156    	; 0x1f0a <getch>
+    1e6e:	98 2e       	mov	r9, r24
+      getch();
+    1e70:	4c d0       	rcall	.+152    	; 0x1f0a <getch>
+
+      verifySpace();
+    1e72:	62 d0       	rcall	.+196    	; 0x1f38 <verifySpace>
+    }
+    /* Read memory block mode, length is big endian.  */
+    else if(ch == STK_READ_PAGE) {
       // READ PAGE - we only read flash
       getch();			/* getlen() */
-    1e6e:	4a d0       	rcall	.+148    	; 0x1f04 <getch>
       length = getch();
-    1e70:	49 d0       	rcall	.+146    	; 0x1f04 <getch>
-    1e72:	18 2f       	mov	r17, r24
+    1e74:	a9 2c       	mov	r10, r9
       getch();
-    1e74:	47 d0       	rcall	.+142    	; 0x1f04 <getch>
 
       verifySpace();
-    1e76:	5d d0       	rcall	.+186    	; 0x1f32 <verifySpace>
-    1e78:	e7 01       	movw	r28, r14
-    1e7a:	01 2f       	mov	r16, r17
+    1e76:	38 01       	movw	r6, r16
       do {
 #ifdef VIRTUAL_BOOT_PARTITION
         // Undo vector patch in bottom page so verify passes
         if (address == 0)       ch=rstVect & 0xff;
-    1e7c:	20 97       	sbiw	r28, 0x00	; 0
-    1e7e:	19 f4       	brne	.+6      	; 0x1e86 <main+0x186>
-    1e80:	80 91 84 01 	lds	r24, 0x0184
-    1e84:	14 c0       	rjmp	.+40     	; 0x1eae <main+0x1ae>
+    1e78:	61 14       	cp	r6, r1
+    1e7a:	71 04       	cpc	r7, r1
+    1e7c:	19 f4       	brne	.+6      	; 0x1e84 <main+0x184>
+    1e7e:	80 91 84 01 	lds	r24, 0x0184
+    1e82:	17 c0       	rjmp	.+46     	; 0x1eb2 <main+0x1b2>
         else if (address == 1)  ch=rstVect >> 8;
-    1e86:	c1 30       	cpi	r28, 0x01	; 1
-    1e88:	d1 05       	cpc	r29, r1
+    1e84:	f1 e0       	ldi	r31, 0x01	; 1
+    1e86:	6f 16       	cp	r6, r31
+    1e88:	71 04       	cpc	r7, r1
     1e8a:	19 f4       	brne	.+6      	; 0x1e92 <main+0x192>
     1e8c:	80 91 85 01 	lds	r24, 0x0185
-    1e90:	0e c0       	rjmp	.+28     	; 0x1eae <main+0x1ae>
+    1e90:	10 c0       	rjmp	.+32     	; 0x1eb2 <main+0x1b2>
         else if (address == 8)  ch=wdtVect & 0xff;
-    1e92:	c8 30       	cpi	r28, 0x08	; 8
-    1e94:	d1 05       	cpc	r29, r1
-    1e96:	19 f4       	brne	.+6      	; 0x1e9e <main+0x19e>
-    1e98:	80 91 86 01 	lds	r24, 0x0186
-    1e9c:	08 c0       	rjmp	.+16     	; 0x1eae <main+0x1ae>
+    1e92:	88 e0       	ldi	r24, 0x08	; 8
+    1e94:	68 16       	cp	r6, r24
+    1e96:	71 04       	cpc	r7, r1
+    1e98:	19 f4       	brne	.+6      	; 0x1ea0 <main+0x1a0>
+    1e9a:	80 91 86 01 	lds	r24, 0x0186
+    1e9e:	09 c0       	rjmp	.+18     	; 0x1eb2 <main+0x1b2>
         else if (address == 9) ch=wdtVect >> 8;
-    1e9e:	c9 30       	cpi	r28, 0x09	; 9
-    1ea0:	d1 05       	cpc	r29, r1
-    1ea2:	19 f4       	brne	.+6      	; 0x1eaa <main+0x1aa>
-    1ea4:	80 91 87 01 	lds	r24, 0x0187
-    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <main+0x1ae>
+    1ea0:	e9 e0       	ldi	r30, 0x09	; 9
+    1ea2:	6e 16       	cp	r6, r30
+    1ea4:	71 04       	cpc	r7, r1
+    1ea6:	19 f4       	brne	.+6      	; 0x1eae <main+0x1ae>
+    1ea8:	80 91 87 01 	lds	r24, 0x0187
+    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <main+0x1b2>
         else ch = pgm_read_byte_near(address);
-    1eaa:	fe 01       	movw	r30, r28
-    1eac:	84 91       	lpm	r24, Z+
+    1eae:	f3 01       	movw	r30, r6
+    1eb0:	84 91       	lpm	r24, Z
         address++;
-    1eae:	21 96       	adiw	r28, 0x01	; 1
+    1eb2:	08 94       	sec
+    1eb4:	61 1c       	adc	r6, r1
+    1eb6:	71 1c       	adc	r7, r1
         __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #else
         // read a Flash byte and increment the address
         __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #endif
         putch(ch);
-    1eb0:	1a d0       	rcall	.+52     	; 0x1ee6 <putch>
+    1eb8:	19 d0       	rcall	.+50     	; 0x1eec <putch>
       } while (--length);
-    1eb2:	01 50       	subi	r16, 0x01	; 1
-    1eb4:	19 f7       	brne	.-58     	; 0x1e7c <main+0x17c>
+    1eba:	aa 94       	dec	r10
+    1ebc:	e9 f6       	brne	.-70     	; 0x1e78 <main+0x178>
 # define UART_SRL UBRR3L
 # define UART_UDR UDR3
 #endif
 
 /* main program starts here */
 int main(void) {
-    1eb6:	08 94       	sec
-    1eb8:	e1 1c       	adc	r14, r1
-    1eba:	f1 1c       	adc	r15, r1
-    1ebc:	11 50       	subi	r17, 0x01	; 1
-    1ebe:	e1 0e       	add	r14, r17
-    1ec0:	f1 1c       	adc	r15, r1
-    1ec2:	0e c0       	rjmp	.+28     	; 0x1ee0 <main+0x1e0>
+    1ebe:	0f 5f       	subi	r16, 0xFF	; 255
+    1ec0:	1f 4f       	sbci	r17, 0xFF	; 255
+    1ec2:	9a 94       	dec	r9
+    1ec4:	09 0d       	add	r16, r9
+    1ec6:	11 1d       	adc	r17, r1
+    1ec8:	0e c0       	rjmp	.+28     	; 0x1ee6 <main+0x1e6>
         putch(ch);
       } while (--length);
     }
 
     /* Get device signature bytes  */
     else if(ch == STK_READ_SIGN) {
-    1ec4:	85 37       	cpi	r24, 0x75	; 117
-    1ec6:	39 f4       	brne	.+14     	; 0x1ed6 <main+0x1d6>
+    1eca:	85 37       	cpi	r24, 0x75	; 117
+    1ecc:	39 f4       	brne	.+14     	; 0x1edc <main+0x1dc>
       // READ SIGN - return what Avrdude wants to hear
       verifySpace();
-    1ec8:	34 d0       	rcall	.+104    	; 0x1f32 <verifySpace>
+    1ece:	34 d0       	rcall	.+104    	; 0x1f38 <verifySpace>
       putch(SIGNATURE_0);
-    1eca:	8e e1       	ldi	r24, 0x1E	; 30
-    1ecc:	0c d0       	rcall	.+24     	; 0x1ee6 <putch>
+    1ed0:	8e e1       	ldi	r24, 0x1E	; 30
+    1ed2:	0c d0       	rcall	.+24     	; 0x1eec <putch>
       putch(SIGNATURE_1);
-    1ece:	83 e9       	ldi	r24, 0x93	; 147
-    1ed0:	0a d0       	rcall	.+20     	; 0x1ee6 <putch>
+    1ed4:	83 e9       	ldi	r24, 0x93	; 147
+    1ed6:	0a d0       	rcall	.+20     	; 0x1eec <putch>
       putch(SIGNATURE_2);
-    1ed2:	8c e0       	ldi	r24, 0x0C	; 12
-    1ed4:	46 cf       	rjmp	.-372    	; 0x1d62 <main+0x62>
+    1ed8:	8c e0       	ldi	r24, 0x0C	; 12
+    1eda:	47 cf       	rjmp	.-370    	; 0x1d6a <main+0x6a>
     }
     else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
-    1ed6:	81 35       	cpi	r24, 0x51	; 81
-    1ed8:	11 f4       	brne	.+4      	; 0x1ede <main+0x1de>
+    1edc:	81 35       	cpi	r24, 0x51	; 81
+    1ede:	11 f4       	brne	.+4      	; 0x1ee4 <main+0x1e4>
       // Adaboot no-wait mod
       watchdogConfig(WATCHDOG_16MS);
-    1eda:	88 e0       	ldi	r24, 0x08	; 8
-    1edc:	26 d0       	rcall	.+76     	; 0x1f2a <watchdogConfig>
+    1ee0:	88 e0       	ldi	r24, 0x08	; 8
+    1ee2:	26 d0       	rcall	.+76     	; 0x1f30 <watchdogConfig>
       verifySpace();
     }
     else {
       // This covers the response to commands like STK_ENTER_PROGMODE
       verifySpace();
-    1ede:	29 d0       	rcall	.+82     	; 0x1f32 <verifySpace>
+    1ee4:	29 d0       	rcall	.+82     	; 0x1f38 <verifySpace>
     }
     putch(STK_OK);
-    1ee0:	80 e1       	ldi	r24, 0x10	; 16
-    1ee2:	01 d0       	rcall	.+2      	; 0x1ee6 <putch>
-    1ee4:	31 cf       	rjmp	.-414    	; 0x1d48 <main+0x48>
+    1ee6:	80 e1       	ldi	r24, 0x10	; 16
+    1ee8:	01 d0       	rcall	.+2      	; 0x1eec <putch>
+  }
+    1eea:	31 cf       	rjmp	.-414    	; 0x1d4e <main+0x4e>
 
-00001ee6 <putch>:
+00001eec <putch>:
 void putch(char ch) {
 #ifndef SOFT_UART
   while (!(UART_SRA & _BV(UDRE0)));
   UART_UDR = ch;
 #else
   __asm__ __volatile__ (
-    1ee6:	2a e0       	ldi	r18, 0x0A	; 10
-    1ee8:	30 e0       	ldi	r19, 0x00	; 0
-    1eea:	80 95       	com	r24
-    1eec:	08 94       	sec
-    1eee:	10 f4       	brcc	.+4      	; 0x1ef4 <putch+0xe>
-    1ef0:	da 98       	cbi	0x1b, 2	; 27
-    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <putch+0x12>
-    1ef4:	da 9a       	sbi	0x1b, 2	; 27
-    1ef6:	00 00       	nop
-    1ef8:	14 d0       	rcall	.+40     	; 0x1f22 <uartDelay>
-    1efa:	13 d0       	rcall	.+38     	; 0x1f22 <uartDelay>
-    1efc:	86 95       	lsr	r24
-    1efe:	2a 95       	dec	r18
-    1f00:	b1 f7       	brne	.-20     	; 0x1eee <putch+0x8>
+    1eec:	2a e0       	ldi	r18, 0x0A	; 10
+    1eee:	30 e0       	ldi	r19, 0x00	; 0
+    1ef0:	80 95       	com	r24
+    1ef2:	08 94       	sec
+    1ef4:	10 f4       	brcc	.+4      	; 0x1efa <putch+0xe>
+    1ef6:	da 98       	cbi	0x1b, 2	; 27
+    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <optiboot_version>
+    1efa:	da 9a       	sbi	0x1b, 2	; 27
+    1efc:	00 00       	nop
+    1efe:	14 d0       	rcall	.+40     	; 0x1f28 <uartDelay>
+    1f00:	13 d0       	rcall	.+38     	; 0x1f28 <uartDelay>
+    1f02:	86 95       	lsr	r24
+    1f04:	2a 95       	dec	r18
+    1f06:	b1 f7       	brne	.-20     	; 0x1ef4 <putch+0x8>
       [uartBit] "I" (UART_TX_BIT)
     :
       "r25"
   );
 #endif
 }
-    1f02:	08 95       	ret
+    1f08:	08 95       	ret
 
-00001f04 <getch>:
+00001f0a <getch>:
   LED_PIN |= _BV(LED);
 #endif
 #endif
 
   return ch;
 }
-    1f04:	29 e0       	ldi	r18, 0x09	; 9
-    1f06:	30 e0       	ldi	r19, 0x00	; 0
-    1f08:	cb 99       	sbic	0x19, 3	; 25
-    1f0a:	fe cf       	rjmp	.-4      	; 0x1f08 <getch+0x4>
-    1f0c:	0a d0       	rcall	.+20     	; 0x1f22 <uartDelay>
-    1f0e:	09 d0       	rcall	.+18     	; 0x1f22 <uartDelay>
-    1f10:	08 d0       	rcall	.+16     	; 0x1f22 <uartDelay>
-    1f12:	88 94       	clc
-    1f14:	cb 99       	sbic	0x19, 3	; 25
-    1f16:	08 94       	sec
-    1f18:	2a 95       	dec	r18
-    1f1a:	11 f0       	breq	.+4      	; 0x1f20 <getch+0x1c>
-    1f1c:	87 95       	ror	r24
-    1f1e:	f7 cf       	rjmp	.-18     	; 0x1f0e <getch+0xa>
-    1f20:	08 95       	ret
-
-00001f22 <uartDelay>:
+    1f0a:	29 e0       	ldi	r18, 0x09	; 9
+    1f0c:	30 e0       	ldi	r19, 0x00	; 0
+    1f0e:	cb 99       	sbic	0x19, 3	; 25
+    1f10:	fe cf       	rjmp	.-4      	; 0x1f0e <getch+0x4>
+    1f12:	0a d0       	rcall	.+20     	; 0x1f28 <uartDelay>
+    1f14:	09 d0       	rcall	.+18     	; 0x1f28 <uartDelay>
+    1f16:	08 d0       	rcall	.+16     	; 0x1f28 <uartDelay>
+    1f18:	88 94       	clc
+    1f1a:	cb 99       	sbic	0x19, 3	; 25
+    1f1c:	08 94       	sec
+    1f1e:	2a 95       	dec	r18
+    1f20:	11 f0       	breq	.+4      	; 0x1f26 <getch+0x1c>
+    1f22:	87 95       	ror	r24
+    1f24:	f7 cf       	rjmp	.-18     	; 0x1f14 <getch+0xa>
+    1f26:	08 95       	ret
+
+00001f28 <uartDelay>:
 #if UART_B_VALUE > 255
 #error Baud rate too slow for soft UART
 #endif
 
 void uartDelay() {
   __asm__ __volatile__ (
-    1f22:	9e e0       	ldi	r25, 0x0E	; 14
-    1f24:	9a 95       	dec	r25
-    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <uartDelay+0x2>
-    1f28:	08 95       	ret
+    1f28:	9e e0       	ldi	r25, 0x0E	; 14
+    1f2a:	9a 95       	dec	r25
+    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <uartDelay+0x2>
+    1f2e:	08 95       	ret
 
-00001f2a <watchdogConfig>:
+00001f30 <watchdogConfig>:
     "wdr\n"
   );
 }
 
 void watchdogConfig(uint8_t x) {
   WDTCSR = _BV(WDCE) | _BV(WDE);
-    1f2a:	98 e1       	ldi	r25, 0x18	; 24
-    1f2c:	91 bd       	out	0x21, r25	; 33
+    1f30:	98 e1       	ldi	r25, 0x18	; 24
+    1f32:	91 bd       	out	0x21, r25	; 33
   WDTCSR = x;
-    1f2e:	81 bd       	out	0x21, r24	; 33
+    1f34:	81 bd       	out	0x21, r24	; 33
 }
-    1f30:	08 95       	ret
+    1f36:	08 95       	ret
 
-00001f32 <verifySpace>:
+00001f38 <verifySpace>:
   do getch(); while (--count);
   verifySpace();
 }
 
 void verifySpace() {
   if (getch() != CRC_EOP) {
-    1f32:	e8 df       	rcall	.-48     	; 0x1f04 <getch>
-    1f34:	80 32       	cpi	r24, 0x20	; 32
-    1f36:	19 f0       	breq	.+6      	; 0x1f3e <verifySpace+0xc>
+    1f38:	e8 df       	rcall	.-48     	; 0x1f0a <getch>
+    1f3a:	80 32       	cpi	r24, 0x20	; 32
+    1f3c:	19 f0       	breq	.+6      	; 0x1f44 <verifySpace+0xc>
     watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
-    1f38:	88 e0       	ldi	r24, 0x08	; 8
-    1f3a:	f7 df       	rcall	.-18     	; 0x1f2a <watchdogConfig>
-    1f3c:	ff cf       	rjmp	.-2      	; 0x1f3c <verifySpace+0xa>
+    1f3e:	88 e0       	ldi	r24, 0x08	; 8
+    1f40:	f7 df       	rcall	.-18     	; 0x1f30 <watchdogConfig>
+    1f42:	ff cf       	rjmp	.-2      	; 0x1f42 <verifySpace+0xa>
     while (1)			      // and busy-loop so that WD causes
       ;				      //  a reset and app start.
   }
   putch(STK_INSYNC);
-    1f3e:	84 e1       	ldi	r24, 0x14	; 20
+    1f44:	84 e1       	ldi	r24, 0x14	; 20
+    1f46:	d2 cf       	rjmp	.-92     	; 0x1eec <putch>
 }
-    1f40:	d2 cf       	rjmp	.-92     	; 0x1ee6 <putch>
+    1f48:	cf 93       	push	r28
 
-00001f42 <getNch>:
+00001f4a <getNch>:
     ::[count] "M" (UART_B_VALUE)
   );
 }
 #endif
 
 void getNch(uint8_t count) {
-    1f42:	1f 93       	push	r17
-    1f44:	18 2f       	mov	r17, r24
+    1f4a:	c8 2f       	mov	r28, r24
+    1f4c:	de df       	rcall	.-68     	; 0x1f0a <getch>
   do getch(); while (--count);
-    1f46:	de df       	rcall	.-68     	; 0x1f04 <getch>
-    1f48:	11 50       	subi	r17, 0x01	; 1
-    1f4a:	e9 f7       	brne	.-6      	; 0x1f46 <getNch+0x4>
+    1f4e:	c1 50       	subi	r28, 0x01	; 1
+    1f50:	e9 f7       	brne	.-6      	; 0x1f4c <getNch+0x2>
+    1f52:	f2 df       	rcall	.-28     	; 0x1f38 <verifySpace>
   verifySpace();
-    1f4c:	f2 df       	rcall	.-28     	; 0x1f32 <verifySpace>
+    1f54:	cf 91       	pop	r28
 }
-    1f4e:	1f 91       	pop	r17
-    1f50:	08 95       	ret
+    1f56:	08 95       	ret
 
-00001f52 <appStart>:
+00001f58 <appStart>:
+    1f58:	28 2e       	mov	r2, r24
 
 void appStart(uint8_t rstFlags) {
   // save the reset flags in the designated register
   //  This can be saved in a main program by putting code in .init0 (which
   //  executes before normal c init code) to save R2 to a global variable.
   __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
-    1f52:	28 2e       	mov	r2, r24
+    1f5a:	80 e0       	ldi	r24, 0x00	; 0
 
   watchdogConfig(WATCHDOG_OFF);
-    1f54:	80 e0       	ldi	r24, 0x00	; 0
-    1f56:	e9 df       	rcall	.-46     	; 0x1f2a <watchdogConfig>
+    1f5c:	e9 df       	rcall	.-46     	; 0x1f30 <watchdogConfig>
+    1f5e:	e4 e0       	ldi	r30, 0x04	; 4
   __asm__ __volatile__ (
-    1f58:	e4 e0       	ldi	r30, 0x04	; 4
-    1f5a:	ff 27       	eor	r31, r31
-    1f5c:	09 94       	ijmp
+    1f60:	ff 27       	eor	r31, r31
+    1f62:	09 94       	ijmp
diff --git a/optiboot/bootloaders/optiboot/optiboot_pro_16MHz.hex b/optiboot/bootloaders/optiboot/optiboot_pro_16MHz.hex
index e4457f6..3af2dfa 100644
--- a/optiboot/bootloaders/optiboot/optiboot_pro_16MHz.hex
+++ b/optiboot/bootloaders/optiboot/optiboot_pro_16MHz.hex
@@ -1,33 +1,33 @@
-:103E0000112484B714BE81FFE6D085E08093810041
-:103E100082E08093C00088E18093C10086E08093B7
-:103E2000C20080E18093C4008EE0BFD0259A86E076
-:103E300020E33CEF91E0309385002093840096BB13
-:103E4000B09BFECF1D9AA8958150A9F7EE24FF24C0
-:103E5000AA24A394B5E0CB2EA1E1BA2EF3E0DF2E85
-:103E600098D0813461F495D0082FA5D0023829F17B
-:103E7000013811F485E001C083E083D07FC0823433
-:103E800011F484E103C0853419F485E09CD076C038
-:103E9000853579F47ED0E82EFF247BD0082F10E002
-:103EA000102F00270E291F29000F111F84D0780121
-:103EB00065C0863521F484E086D080E0DECF84368C
-:103EC00009F040C066D065D0082F63D080E0E816C6
-:103ED00088E3F80618F4F701D7BEE895C0E0D1E012
-:103EE00058D089930C17E1F7F0E0EF16F8E3FF06DE
-:103EF00018F0F701D7BEE8955ED007B600FCFDCFFD
-:103F0000A701A0E0B1E02C9130E011968C911197BF
-:103F100090E0982F8827822B932B1296FA010C01A0
-:103F2000A7BEE89511244E5F5F4FF1E0A038BF07B0
-:103F300051F7F701C7BEE89507B600FCFDCFB7BE45
-:103F4000E8951CC0843761F424D023D0082F21D0F9
-:103F500032D0F70185917F0114D00150D1F70EC006
-:103F6000853739F428D08EE10CD084E90AD086E078
-:103F700084CF813511F488E018D01DD080E101D0C4
-:103F80006FCF982F8091C00085FFFCCF9093C60023
+:103E00000F92CDB7DEB7112484B714BE81FFE3D083
+:103E100085E08093810082E08093C00088E18093F8
+:103E2000C10086E08093C20080E18093C4008EE0F0
+:103E3000BCD0259A26E080E39CEF31E0909385008A
+:103E40008093840036BBB09BFECF1D9AA89521506D
+:103E5000A9F700E010E0EE24E394E5E0DE2EF1E1C6
+:103E6000CF2EA3E0FA2E95D0813469F492D08983C5
+:103E7000A2D08981823819F1813811F485E001C01E
+:103E800083E080D07CC0823411F484E103C08534A7
+:103E900019F485E098D073C0853569F47AD0882EFE
+:103EA000992477D0082F10E0102F0027082919290E
+:103EB000000F111F63C0863521F484E084D080E0B8
+:103EC000E0CF843609F03FC064D063D0B82E61D013
+:103ED00088E30030180718F4F801F7BEE895812C44
+:103EE00051E0952E56D0F40181934F01BE16D1F7C3
+:103EF000F8E300301F0718F0F801F7BEE8955BD033
+:103F000007B600FCFDCFF801A0E0B1E02C9130E055
+:103F100011968C91119790E0982F8827822B932BE4
+:103F200012960C01E7BEE8951124329681E0A03884
+:103F3000B80761F7F801D7BEE89507B600FCFDCFDA
+:103F4000C7BEE8951CC0843761F423D022D0B82EB8
+:103F500020D031D0F80185918F0114D0BA94D1F7D7
+:103F60000EC0853739F427D08EE10CD084E90AD011
+:103F700086E087CF813511F488E017D01CD080E12E
+:103F800001D071CF9091C00095FFFCCF8093C60007
 :103F900008958091C00087FFFCCF8091C00084FD10
 :103FA00001C0A8958091C6000895E0E6F0E098E190
 :103FB000908380830895EDDF803219F088E0F5DF8B
-:103FC000FFCF84E1DECF1F93182FE3DF1150E9F715
-:103FD000F2DF1F910895282E80E0E7DFEE27FF270C
+:103FC000FFCF84E1DFCFCF93C82FE3DFC150E9F704
+:103FD000F2DFCF910895282E80E0E7DFEE27FF275C
 :023FE000099442
 :023FFE000005BC
 :0400000300003E00BB
diff --git a/optiboot/bootloaders/optiboot/optiboot_pro_16MHz.lst b/optiboot/bootloaders/optiboot/optiboot_pro_16MHz.lst
index 6f31a80..54f4872 100644
--- a/optiboot/bootloaders/optiboot/optiboot_pro_16MHz.lst
+++ b/optiboot/bootloaders/optiboot/optiboot_pro_16MHz.lst
@@ -3,27 +3,27 @@ optiboot_atmega168.elf:     file format elf32-avr
 
 Sections:
 Idx Name          Size      VMA       LMA       File off  Algn
-  0 .text         000001e2  00003e00  00003e00  00000054  2**1
+  0 .data         00000000  00800100  00003fe2  00000256  2**0
+                  CONTENTS, ALLOC, LOAD, DATA
+  1 .text         000001e2  00003e00  00003e00  00000074  2**1
                   CONTENTS, ALLOC, LOAD, READONLY, CODE
-  1 .version      00000002  00003ffe  00003ffe  00000236  2**0
+  2 .version      00000002  00003ffe  00003ffe  00000256  2**0
                   CONTENTS, READONLY
-  2 .debug_aranges 00000028  00000000  00000000  00000238  2**0
+  3 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                   CONTENTS, READONLY, DEBUGGING
-  3 .debug_pubnames 0000005f  00000000  00000000  00000260  2**0
+  4 .debug_info   00000290  00000000  00000000  00000280  2**0
                   CONTENTS, READONLY, DEBUGGING
-  4 .debug_info   00000294  00000000  00000000  000002bf  2**0
+  5 .debug_abbrev 00000176  00000000  00000000  00000510  2**0
                   CONTENTS, READONLY, DEBUGGING
-  5 .debug_abbrev 0000016b  00000000  00000000  00000553  2**0
+  6 .debug_line   00000192  00000000  00000000  00000686  2**0
                   CONTENTS, READONLY, DEBUGGING
-  6 .debug_line   00000421  00000000  00000000  000006be  2**0
+  7 .debug_frame  00000094  00000000  00000000  00000818  2**2
                   CONTENTS, READONLY, DEBUGGING
-  7 .debug_frame  00000080  00000000  00000000  00000ae0  2**2
+  8 .debug_str    00000131  00000000  00000000  000008ac  2**0
                   CONTENTS, READONLY, DEBUGGING
-  8 .debug_str    00000131  00000000  00000000  00000b60  2**0
+  9 .debug_loc    0000026e  00000000  00000000  000009dd  2**0
                   CONTENTS, READONLY, DEBUGGING
-  9 .debug_loc    00000266  00000000  00000000  00000c91  2**0
-                  CONTENTS, READONLY, DEBUGGING
- 10 .debug_ranges 00000078  00000000  00000000  00000ef7  2**0
+ 10 .debug_ranges 00000048  00000000  00000000  00000c4b  2**0
                   CONTENTS, READONLY, DEBUGGING
 
 Disassembly of section .text:
@@ -35,437 +35,443 @@ Disassembly of section .text:
 
 /* main program starts here */
 int main(void) {
-    3e00:	11 24       	eor	r1, r1
+    3e00:	0f 92       	push	r0
+    3e02:	cd b7       	in	r28, 0x3d	; 61
+    3e04:	de b7       	in	r29, 0x3e	; 62
+  //  SP points to RAMEND
+  //  r1 contains zero
+  //
+  // If not, uncomment the following instructions:
+  // cli();
+  asm volatile ("clr __zero_reg__");
+    3e06:	11 24       	eor	r1, r1
 #if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
   SP=RAMEND;  // This is done by hardware reset
 #endif
 
   // Adaboot no-wait mod
   ch = MCUSR;
-    3e02:	84 b7       	in	r24, 0x34	; 52
+    3e08:	84 b7       	in	r24, 0x34	; 52
   MCUSR = 0;
-    3e04:	14 be       	out	0x34, r1	; 52
+    3e0a:	14 be       	out	0x34, r1	; 52
   if (!(ch & _BV(EXTRF))) appStart(ch);
-    3e06:	81 ff       	sbrs	r24, 1
-    3e08:	e6 d0       	rcall	.+460    	; 0x3fd6 <appStart>
+    3e0c:	81 ff       	sbrs	r24, 1
+    3e0e:	e3 d0       	rcall	.+454    	; 0x3fd6 <appStart>
 
 #if LED_START_FLASHES > 0
   // Set up Timer 1 for timeout counter
   TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
-    3e0a:	85 e0       	ldi	r24, 0x05	; 5
-    3e0c:	80 93 81 00 	sts	0x0081, r24
+    3e10:	85 e0       	ldi	r24, 0x05	; 5
+    3e12:	80 93 81 00 	sts	0x0081, r24
   UCSRA = _BV(U2X); //Double speed mode USART
   UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
   UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
   UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
 #else
   UART_SRA = _BV(U2X0); //Double speed mode USART0
-    3e10:	82 e0       	ldi	r24, 0x02	; 2
-    3e12:	80 93 c0 00 	sts	0x00C0, r24
+    3e16:	82 e0       	ldi	r24, 0x02	; 2
+    3e18:	80 93 c0 00 	sts	0x00C0, r24
   UART_SRB = _BV(RXEN0) | _BV(TXEN0);
-    3e16:	88 e1       	ldi	r24, 0x18	; 24
-    3e18:	80 93 c1 00 	sts	0x00C1, r24
+    3e1c:	88 e1       	ldi	r24, 0x18	; 24
+    3e1e:	80 93 c1 00 	sts	0x00C1, r24
   UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
-    3e1c:	86 e0       	ldi	r24, 0x06	; 6
-    3e1e:	80 93 c2 00 	sts	0x00C2, r24
+    3e22:	86 e0       	ldi	r24, 0x06	; 6
+    3e24:	80 93 c2 00 	sts	0x00C2, r24
   UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
-    3e22:	80 e1       	ldi	r24, 0x10	; 16
-    3e24:	80 93 c4 00 	sts	0x00C4, r24
+    3e28:	80 e1       	ldi	r24, 0x10	; 16
+    3e2a:	80 93 c4 00 	sts	0x00C4, r24
 #endif
 #endif
 
   // Set up watchdog to trigger after 500ms
   watchdogConfig(WATCHDOG_1S);
-    3e28:	8e e0       	ldi	r24, 0x0E	; 14
-    3e2a:	bf d0       	rcall	.+382    	; 0x3faa <watchdogConfig>
+    3e2e:	8e e0       	ldi	r24, 0x0E	; 14
+    3e30:	bc d0       	rcall	.+376    	; 0x3faa <watchdogConfig>
 
 #if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
   /* Set LED pin as output */
   LED_DDR |= _BV(LED);
-    3e2c:	25 9a       	sbi	0x04, 5	; 4
-    3e2e:	86 e0       	ldi	r24, 0x06	; 6
+    3e32:	25 9a       	sbi	0x04, 5	; 4
+    3e34:	26 e0       	ldi	r18, 0x06	; 6
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    3e30:	20 e3       	ldi	r18, 0x30	; 48
-    3e32:	3c ef       	ldi	r19, 0xFC	; 252
+    3e36:	80 e3       	ldi	r24, 0x30	; 48
+    3e38:	9c ef       	ldi	r25, 0xFC	; 252
     TIFR1 = _BV(TOV1);
-    3e34:	91 e0       	ldi	r25, 0x01	; 1
+    3e3a:	31 e0       	ldi	r19, 0x01	; 1
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    3e36:	30 93 85 00 	sts	0x0085, r19
-    3e3a:	20 93 84 00 	sts	0x0084, r18
+    3e3c:	90 93 85 00 	sts	0x0085, r25
+    3e40:	80 93 84 00 	sts	0x0084, r24
     TIFR1 = _BV(TOV1);
-    3e3e:	96 bb       	out	0x16, r25	; 22
+    3e44:	36 bb       	out	0x16, r19	; 22
     while(!(TIFR1 & _BV(TOV1)));
-    3e40:	b0 9b       	sbis	0x16, 0	; 22
-    3e42:	fe cf       	rjmp	.-4      	; 0x3e40 <main+0x40>
+    3e46:	b0 9b       	sbis	0x16, 0	; 22
+    3e48:	fe cf       	rjmp	.-4      	; 0x3e46 <main+0x46>
 #if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
-    3e44:	1d 9a       	sbi	0x03, 5	; 3
+    3e4a:	1d 9a       	sbi	0x03, 5	; 3
 }
 #endif
 
 // Watchdog functions. These are only safe with interrupts turned off.
 void watchdogReset() {
   __asm__ __volatile__ (
-    3e46:	a8 95       	wdr
+    3e4c:	a8 95       	wdr
+    3e4e:	21 50       	subi	r18, 0x01	; 1
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
 #endif
     watchdogReset();
   } while (--count);
-    3e48:	81 50       	subi	r24, 0x01	; 1
-    3e4a:	a9 f7       	brne	.-22     	; 0x3e36 <main+0x36>
-    3e4c:	ee 24       	eor	r14, r14
-    3e4e:	ff 24       	eor	r15, r15
+    3e50:	a9 f7       	brne	.-22     	; 0x3e3c <main+0x3c>
+    3e52:	00 e0       	ldi	r16, 0x00	; 0
+    3e54:	10 e0       	ldi	r17, 0x00	; 0
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    3e50:	aa 24       	eor	r10, r10
-    3e52:	a3 94       	inc	r10
+    3e56:	ee 24       	eor	r14, r14
+    3e58:	e3 94       	inc	r14
         addrPtr += 2;
       } while (--ch);
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    3e54:	b5 e0       	ldi	r27, 0x05	; 5
-    3e56:	cb 2e       	mov	r12, r27
+    3e5a:	e5 e0       	ldi	r30, 0x05	; 5
+    3e5c:	de 2e       	mov	r13, r30
       boot_spm_busy_wait();
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    3e58:	a1 e1       	ldi	r26, 0x11	; 17
-    3e5a:	ba 2e       	mov	r11, r26
+    3e5e:	f1 e1       	ldi	r31, 0x11	; 17
+    3e60:	cf 2e       	mov	r12, r31
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3e5c:	f3 e0       	ldi	r31, 0x03	; 3
-    3e5e:	df 2e       	mov	r13, r31
+    3e62:	a3 e0       	ldi	r26, 0x03	; 3
+    3e64:	fa 2e       	mov	r15, r26
 #endif
 
   /* Forever loop */
   for (;;) {
     /* get character from UART */
     ch = getch();
-    3e60:	98 d0       	rcall	.+304    	; 0x3f92 <getch>
+    3e66:	95 d0       	rcall	.+298    	; 0x3f92 <getch>
 
     if(ch == STK_GET_PARAMETER) {
-    3e62:	81 34       	cpi	r24, 0x41	; 65
-    3e64:	61 f4       	brne	.+24     	; 0x3e7e <main+0x7e>
+    3e68:	81 34       	cpi	r24, 0x41	; 65
+    3e6a:	69 f4       	brne	.+26     	; 0x3e86 <main+0x86>
       unsigned char which = getch();
-    3e66:	95 d0       	rcall	.+298    	; 0x3f92 <getch>
-    3e68:	08 2f       	mov	r16, r24
+    3e6c:	92 d0       	rcall	.+292    	; 0x3f92 <getch>
       verifySpace();
-    3e6a:	a5 d0       	rcall	.+330    	; 0x3fb6 <verifySpace>
+    3e6e:	89 83       	std	Y+1, r24	; 0x01
+    3e70:	a2 d0       	rcall	.+324    	; 0x3fb6 <verifySpace>
       if (which == 0x82) {
-    3e6c:	02 38       	cpi	r16, 0x82	; 130
-    3e6e:	29 f1       	breq	.+74     	; 0x3eba <main+0xba>
+    3e72:	89 81       	ldd	r24, Y+1	; 0x01
+    3e74:	82 38       	cpi	r24, 0x82	; 130
+    3e76:	19 f1       	breq	.+70     	; 0x3ebe <main+0xbe>
 	/*
 	 * Send optiboot version as "minor SW version"
 	 */
 	putch(OPTIBOOT_MINVER);
       } else if (which == 0x81) {
-    3e70:	01 38       	cpi	r16, 0x81	; 129
-    3e72:	11 f4       	brne	.+4      	; 0x3e78 <main+0x78>
+    3e78:	81 38       	cpi	r24, 0x81	; 129
+    3e7a:	11 f4       	brne	.+4      	; 0x3e80 <main+0x80>
 	  putch(OPTIBOOT_MAJVER);
-    3e74:	85 e0       	ldi	r24, 0x05	; 5
-    3e76:	01 c0       	rjmp	.+2      	; 0x3e7a <main+0x7a>
+    3e7c:	85 e0       	ldi	r24, 0x05	; 5
+    3e7e:	01 c0       	rjmp	.+2      	; 0x3e82 <main+0x82>
       } else {
 	/*
 	 * GET PARAMETER returns a generic 0x03 reply for
          * other parameters - enough to keep Avrdude happy
 	 */
 	putch(0x03);
-    3e78:	83 e0       	ldi	r24, 0x03	; 3
-    3e7a:	83 d0       	rcall	.+262    	; 0x3f82 <putch>
-    3e7c:	7f c0       	rjmp	.+254    	; 0x3f7c <main+0x17c>
+    3e80:	83 e0       	ldi	r24, 0x03	; 3
+    3e82:	80 d0       	rcall	.+256    	; 0x3f84 <putch>
+    3e84:	7c c0       	rjmp	.+248    	; 0x3f7e <main+0x17e>
       }
     }
     else if(ch == STK_SET_DEVICE) {
-    3e7e:	82 34       	cpi	r24, 0x42	; 66
-    3e80:	11 f4       	brne	.+4      	; 0x3e86 <main+0x86>
+    3e86:	82 34       	cpi	r24, 0x42	; 66
+    3e88:	11 f4       	brne	.+4      	; 0x3e8e <main+0x8e>
       // SET DEVICE is ignored
       getNch(20);
-    3e82:	84 e1       	ldi	r24, 0x14	; 20
-    3e84:	03 c0       	rjmp	.+6      	; 0x3e8c <main+0x8c>
+    3e8a:	84 e1       	ldi	r24, 0x14	; 20
+    3e8c:	03 c0       	rjmp	.+6      	; 0x3e94 <main+0x94>
     }
     else if(ch == STK_SET_DEVICE_EXT) {
-    3e86:	85 34       	cpi	r24, 0x45	; 69
-    3e88:	19 f4       	brne	.+6      	; 0x3e90 <main+0x90>
+    3e8e:	85 34       	cpi	r24, 0x45	; 69
+    3e90:	19 f4       	brne	.+6      	; 0x3e98 <main+0x98>
       // SET DEVICE EXT is ignored
       getNch(5);
-    3e8a:	85 e0       	ldi	r24, 0x05	; 5
-    3e8c:	9c d0       	rcall	.+312    	; 0x3fc6 <getNch>
-    3e8e:	76 c0       	rjmp	.+236    	; 0x3f7c <main+0x17c>
+    3e92:	85 e0       	ldi	r24, 0x05	; 5
+    3e94:	98 d0       	rcall	.+304    	; 0x3fc6 <verifySpace+0x10>
+    3e96:	73 c0       	rjmp	.+230    	; 0x3f7e <main+0x17e>
     }
     else if(ch == STK_LOAD_ADDRESS) {
-    3e90:	85 35       	cpi	r24, 0x55	; 85
-    3e92:	79 f4       	brne	.+30     	; 0x3eb2 <main+0xb2>
+    3e98:	85 35       	cpi	r24, 0x55	; 85
+    3e9a:	69 f4       	brne	.+26     	; 0x3eb6 <main+0xb6>
       // LOAD ADDRESS
       uint16_t newAddress;
       newAddress = getch();
-    3e94:	7e d0       	rcall	.+252    	; 0x3f92 <getch>
+    3e9c:	7a d0       	rcall	.+244    	; 0x3f92 <getch>
+    3e9e:	88 2e       	mov	r8, r24
+    3ea0:	99 24       	eor	r9, r9
       newAddress = (newAddress & 0xff) | (getch() << 8);
-    3e96:	e8 2e       	mov	r14, r24
-    3e98:	ff 24       	eor	r15, r15
-    3e9a:	7b d0       	rcall	.+246    	; 0x3f92 <getch>
-    3e9c:	08 2f       	mov	r16, r24
-    3e9e:	10 e0       	ldi	r17, 0x00	; 0
-    3ea0:	10 2f       	mov	r17, r16
-    3ea2:	00 27       	eor	r16, r16
-    3ea4:	0e 29       	or	r16, r14
-    3ea6:	1f 29       	or	r17, r15
+    3ea2:	77 d0       	rcall	.+238    	; 0x3f92 <getch>
+    3ea4:	08 2f       	mov	r16, r24
+    3ea6:	10 e0       	ldi	r17, 0x00	; 0
+    3ea8:	10 2f       	mov	r17, r16
+    3eaa:	00 27       	eor	r16, r16
+    3eac:	08 29       	or	r16, r8
+    3eae:	19 29       	or	r17, r9
 #ifdef RAMPZ
       // Transfer top bit to RAMPZ
       RAMPZ = (newAddress & 0x8000) ? 1 : 0;
 #endif
       newAddress += newAddress; // Convert from word address to byte address
-    3ea8:	00 0f       	add	r16, r16
-    3eaa:	11 1f       	adc	r17, r17
+    3eb0:	00 0f       	add	r16, r16
+    3eb2:	11 1f       	adc	r17, r17
+    3eb4:	63 c0       	rjmp	.+198    	; 0x3f7c <main+0x17c>
       address = newAddress;
       verifySpace();
-    3eac:	84 d0       	rcall	.+264    	; 0x3fb6 <verifySpace>
-    3eae:	78 01       	movw	r14, r16
-    3eb0:	65 c0       	rjmp	.+202    	; 0x3f7c <main+0x17c>
     }
     else if(ch == STK_UNIVERSAL) {
-    3eb2:	86 35       	cpi	r24, 0x56	; 86
-    3eb4:	21 f4       	brne	.+8      	; 0x3ebe <main+0xbe>
+    3eb6:	86 35       	cpi	r24, 0x56	; 86
+    3eb8:	21 f4       	brne	.+8      	; 0x3ec2 <main+0xc2>
       // UNIVERSAL command is ignored
       getNch(4);
-    3eb6:	84 e0       	ldi	r24, 0x04	; 4
-    3eb8:	86 d0       	rcall	.+268    	; 0x3fc6 <getNch>
+    3eba:	84 e0       	ldi	r24, 0x04	; 4
+    3ebc:	84 d0       	rcall	.+264    	; 0x3fc6 <verifySpace+0x10>
       putch(0x00);
-    3eba:	80 e0       	ldi	r24, 0x00	; 0
-    3ebc:	de cf       	rjmp	.-68     	; 0x3e7a <main+0x7a>
+    3ebe:	80 e0       	ldi	r24, 0x00	; 0
+    3ec0:	e0 cf       	rjmp	.-64     	; 0x3e82 <main+0x82>
     }
     /* Write memory, length is big endian and is in bytes */
     else if(ch == STK_PROG_PAGE) {
-    3ebe:	84 36       	cpi	r24, 0x64	; 100
-    3ec0:	09 f0       	breq	.+2      	; 0x3ec4 <main+0xc4>
-    3ec2:	40 c0       	rjmp	.+128    	; 0x3f44 <main+0x144>
+    3ec2:	84 36       	cpi	r24, 0x64	; 100
+    3ec4:	09 f0       	breq	.+2      	; 0x3ec8 <main+0xc8>
+    3ec6:	3f c0       	rjmp	.+126    	; 0x3f46 <main+0x146>
       // PROGRAM PAGE - we support flash programming only, not EEPROM
       uint8_t *bufPtr;
       uint16_t addrPtr;
 
       getch();			/* getlen() */
-    3ec4:	66 d0       	rcall	.+204    	; 0x3f92 <getch>
+    3ec8:	64 d0       	rcall	.+200    	; 0x3f92 <getch>
       length = getch();
-    3ec6:	65 d0       	rcall	.+202    	; 0x3f92 <getch>
-    3ec8:	08 2f       	mov	r16, r24
-      getch();
     3eca:	63 d0       	rcall	.+198    	; 0x3f92 <getch>
+    3ecc:	b8 2e       	mov	r11, r24
+      getch();
+    3ece:	61 d0       	rcall	.+194    	; 0x3f92 <getch>
 
       // If we are in RWW section, immediately start page erase
       if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3ecc:	80 e0       	ldi	r24, 0x00	; 0
-    3ece:	e8 16       	cp	r14, r24
     3ed0:	88 e3       	ldi	r24, 0x38	; 56
-    3ed2:	f8 06       	cpc	r15, r24
-    3ed4:	18 f4       	brcc	.+6      	; 0x3edc <main+0xdc>
-    3ed6:	f7 01       	movw	r30, r14
-    3ed8:	d7 be       	out	0x37, r13	; 55
-    3eda:	e8 95       	spm
-    3edc:	c0 e0       	ldi	r28, 0x00	; 0
-    3ede:	d1 e0       	ldi	r29, 0x01	; 1
+    3ed2:	00 30       	cpi	r16, 0x00	; 0
+    3ed4:	18 07       	cpc	r17, r24
+    3ed6:	18 f4       	brcc	.+6      	; 0x3ede <main+0xde>
+    3ed8:	f8 01       	movw	r30, r16
+    3eda:	f7 be       	out	0x37, r15	; 55
+    3edc:	e8 95       	spm
+    3ede:	81 2c       	mov	r8, r1
+    3ee0:	51 e0       	ldi	r21, 0x01	; 1
+    3ee2:	95 2e       	mov	r9, r21
 
       // While that is going on, read in page contents
       bufPtr = buff;
       do *bufPtr++ = getch();
-    3ee0:	58 d0       	rcall	.+176    	; 0x3f92 <getch>
-    3ee2:	89 93       	st	Y+, r24
+    3ee4:	56 d0       	rcall	.+172    	; 0x3f92 <getch>
+    3ee6:	f4 01       	movw	r30, r8
+    3ee8:	81 93       	st	Z+, r24
+    3eea:	4f 01       	movw	r8, r30
       while (--length);
-    3ee4:	0c 17       	cp	r16, r28
-    3ee6:	e1 f7       	brne	.-8      	; 0x3ee0 <main+0xe0>
+    3eec:	be 16       	cp	r11, r30
+    3eee:	d1 f7       	brne	.-12     	; 0x3ee4 <main+0xe4>
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
-    3eea:	ef 16       	cp	r14, r31
-    3eec:	f8 e3       	ldi	r31, 0x38	; 56
-    3eee:	ff 06       	cpc	r15, r31
-    3ef0:	18 f0       	brcs	.+6      	; 0x3ef8 <main+0xf8>
-    3ef2:	f7 01       	movw	r30, r14
-    3ef4:	d7 be       	out	0x37, r13	; 55
-    3ef6:	e8 95       	spm
+    3ef0:	f8 e3       	ldi	r31, 0x38	; 56
+    3ef2:	00 30       	cpi	r16, 0x00	; 0
+    3ef4:	1f 07       	cpc	r17, r31
+    3ef6:	18 f0       	brcs	.+6      	; 0x3efe <main+0xfe>
+    3ef8:	f8 01       	movw	r30, r16
+    3efa:	f7 be       	out	0x37, r15	; 55
+    3efc:	e8 95       	spm
 
       // Read command terminator, start reply
       verifySpace();
-    3ef8:	5e d0       	rcall	.+188    	; 0x3fb6 <verifySpace>
+    3efe:	5b d0       	rcall	.+182    	; 0x3fb6 <verifySpace>
 
       // If only a partial page is to be programmed, the erase might not be complete.
       // So check that here
       boot_spm_busy_wait();
-    3efa:	07 b6       	in	r0, 0x37	; 55
-    3efc:	00 fc       	sbrc	r0, 0
-    3efe:	fd cf       	rjmp	.-6      	; 0x3efa <main+0xfa>
-    3f00:	a7 01       	movw	r20, r14
-    3f02:	a0 e0       	ldi	r26, 0x00	; 0
-    3f04:	b1 e0       	ldi	r27, 0x01	; 1
+    3f00:	07 b6       	in	r0, 0x37	; 55
+    3f02:	00 fc       	sbrc	r0, 0
+    3f04:	fd cf       	rjmp	.-6      	; 0x3f00 <main+0x100>
+    3f06:	f8 01       	movw	r30, r16
+    3f08:	a0 e0       	ldi	r26, 0x00	; 0
+    3f0a:	b1 e0       	ldi	r27, 0x01	; 1
       bufPtr = buff;
       addrPtr = (uint16_t)(void*)address;
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
-    3f06:	2c 91       	ld	r18, X
-    3f08:	30 e0       	ldi	r19, 0x00	; 0
+    3f0c:	2c 91       	ld	r18, X
+    3f0e:	30 e0       	ldi	r19, 0x00	; 0
         a |= (*bufPtr++) << 8;
-    3f0a:	11 96       	adiw	r26, 0x01	; 1
-    3f0c:	8c 91       	ld	r24, X
-    3f0e:	11 97       	sbiw	r26, 0x01	; 1
-    3f10:	90 e0       	ldi	r25, 0x00	; 0
-    3f12:	98 2f       	mov	r25, r24
-    3f14:	88 27       	eor	r24, r24
-    3f16:	82 2b       	or	r24, r18
-    3f18:	93 2b       	or	r25, r19
+    3f10:	11 96       	adiw	r26, 0x01	; 1
+    3f12:	8c 91       	ld	r24, X
+    3f14:	11 97       	sbiw	r26, 0x01	; 1
+    3f16:	90 e0       	ldi	r25, 0x00	; 0
+    3f18:	98 2f       	mov	r25, r24
+    3f1a:	88 27       	eor	r24, r24
+    3f1c:	82 2b       	or	r24, r18
+    3f1e:	93 2b       	or	r25, r19
 # define UART_SRL UBRR3L
 # define UART_UDR UDR3
 #endif
 
 /* main program starts here */
 int main(void) {
-    3f1a:	12 96       	adiw	r26, 0x02	; 2
+    3f20:	12 96       	adiw	r26, 0x02	; 2
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    3f1c:	fa 01       	movw	r30, r20
-    3f1e:	0c 01       	movw	r0, r24
-    3f20:	a7 be       	out	0x37, r10	; 55
-    3f22:	e8 95       	spm
-    3f24:	11 24       	eor	r1, r1
+    3f22:	0c 01       	movw	r0, r24
+    3f24:	e7 be       	out	0x37, r14	; 55
+    3f26:	e8 95       	spm
+    3f28:	11 24       	eor	r1, r1
         addrPtr += 2;
-    3f26:	4e 5f       	subi	r20, 0xFE	; 254
-    3f28:	5f 4f       	sbci	r21, 0xFF	; 255
+    3f2a:	32 96       	adiw	r30, 0x02	; 2
       } while (--ch);
-    3f2a:	f1 e0       	ldi	r31, 0x01	; 1
-    3f2c:	a0 38       	cpi	r26, 0x80	; 128
-    3f2e:	bf 07       	cpc	r27, r31
-    3f30:	51 f7       	brne	.-44     	; 0x3f06 <main+0x106>
+    3f2c:	81 e0       	ldi	r24, 0x01	; 1
+    3f2e:	a0 38       	cpi	r26, 0x80	; 128
+    3f30:	b8 07       	cpc	r27, r24
+    3f32:	61 f7       	brne	.-40     	; 0x3f0c <main+0x10c>
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    3f32:	f7 01       	movw	r30, r14
-    3f34:	c7 be       	out	0x37, r12	; 55
-    3f36:	e8 95       	spm
+    3f34:	f8 01       	movw	r30, r16
+    3f36:	d7 be       	out	0x37, r13	; 55
+    3f38:	e8 95       	spm
       boot_spm_busy_wait();
-    3f38:	07 b6       	in	r0, 0x37	; 55
-    3f3a:	00 fc       	sbrc	r0, 0
-    3f3c:	fd cf       	rjmp	.-6      	; 0x3f38 <main+0x138>
+    3f3a:	07 b6       	in	r0, 0x37	; 55
+    3f3c:	00 fc       	sbrc	r0, 0
+    3f3e:	fd cf       	rjmp	.-6      	; 0x3f3a <main+0x13a>
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    3f3e:	b7 be       	out	0x37, r11	; 55
-    3f40:	e8 95       	spm
-    3f42:	1c c0       	rjmp	.+56     	; 0x3f7c <main+0x17c>
+    3f40:	c7 be       	out	0x37, r12	; 55
+    3f42:	e8 95       	spm
+    3f44:	1c c0       	rjmp	.+56     	; 0x3f7e <main+0x17e>
 #endif
 
     }
     /* Read memory block mode, length is big endian.  */
     else if(ch == STK_READ_PAGE) {
-    3f44:	84 37       	cpi	r24, 0x74	; 116
-    3f46:	61 f4       	brne	.+24     	; 0x3f60 <main+0x160>
+    3f46:	84 37       	cpi	r24, 0x74	; 116
+    3f48:	61 f4       	brne	.+24     	; 0x3f62 <main+0x162>
       // READ PAGE - we only read flash
       getch();			/* getlen() */
-    3f48:	24 d0       	rcall	.+72     	; 0x3f92 <getch>
-      length = getch();
     3f4a:	23 d0       	rcall	.+70     	; 0x3f92 <getch>
-    3f4c:	08 2f       	mov	r16, r24
+      length = getch();
+    3f4c:	22 d0       	rcall	.+68     	; 0x3f92 <getch>
+    3f4e:	b8 2e       	mov	r11, r24
       getch();
-    3f4e:	21 d0       	rcall	.+66     	; 0x3f92 <getch>
+    3f50:	20 d0       	rcall	.+64     	; 0x3f92 <getch>
 
       verifySpace();
-    3f50:	32 d0       	rcall	.+100    	; 0x3fb6 <verifySpace>
+    3f52:	31 d0       	rcall	.+98     	; 0x3fb6 <verifySpace>
         __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #else
         // read a Flash byte and increment the address
         __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #endif
         putch(ch);
-    3f52:	f7 01       	movw	r30, r14
-    3f54:	85 91       	lpm	r24, Z+
-    3f56:	7f 01       	movw	r14, r30
-    3f58:	14 d0       	rcall	.+40     	; 0x3f82 <putch>
+    3f54:	f8 01       	movw	r30, r16
+    3f56:	85 91       	lpm	r24, Z+
+    3f58:	8f 01       	movw	r16, r30
+    3f5a:	14 d0       	rcall	.+40     	; 0x3f84 <putch>
       } while (--length);
-    3f5a:	01 50       	subi	r16, 0x01	; 1
-    3f5c:	d1 f7       	brne	.-12     	; 0x3f52 <main+0x152>
-    3f5e:	0e c0       	rjmp	.+28     	; 0x3f7c <main+0x17c>
+    3f5c:	ba 94       	dec	r11
+    3f5e:	d1 f7       	brne	.-12     	; 0x3f54 <main+0x154>
+    3f60:	0e c0       	rjmp	.+28     	; 0x3f7e <main+0x17e>
     }
 
     /* Get device signature bytes  */
     else if(ch == STK_READ_SIGN) {
-    3f60:	85 37       	cpi	r24, 0x75	; 117
-    3f62:	39 f4       	brne	.+14     	; 0x3f72 <main+0x172>
+    3f62:	85 37       	cpi	r24, 0x75	; 117
+    3f64:	39 f4       	brne	.+14     	; 0x3f74 <main+0x174>
       // READ SIGN - return what Avrdude wants to hear
       verifySpace();
-    3f64:	28 d0       	rcall	.+80     	; 0x3fb6 <verifySpace>
+    3f66:	27 d0       	rcall	.+78     	; 0x3fb6 <verifySpace>
       putch(SIGNATURE_0);
-    3f66:	8e e1       	ldi	r24, 0x1E	; 30
-    3f68:	0c d0       	rcall	.+24     	; 0x3f82 <putch>
+    3f68:	8e e1       	ldi	r24, 0x1E	; 30
+    3f6a:	0c d0       	rcall	.+24     	; 0x3f84 <putch>
       putch(SIGNATURE_1);
-    3f6a:	84 e9       	ldi	r24, 0x94	; 148
-    3f6c:	0a d0       	rcall	.+20     	; 0x3f82 <putch>
+    3f6c:	84 e9       	ldi	r24, 0x94	; 148
+    3f6e:	0a d0       	rcall	.+20     	; 0x3f84 <putch>
       putch(SIGNATURE_2);
-    3f6e:	86 e0       	ldi	r24, 0x06	; 6
-    3f70:	84 cf       	rjmp	.-248    	; 0x3e7a <main+0x7a>
+    3f70:	86 e0       	ldi	r24, 0x06	; 6
+    3f72:	87 cf       	rjmp	.-242    	; 0x3e82 <main+0x82>
     }
     else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
-    3f72:	81 35       	cpi	r24, 0x51	; 81
-    3f74:	11 f4       	brne	.+4      	; 0x3f7a <main+0x17a>
+    3f74:	81 35       	cpi	r24, 0x51	; 81
+    3f76:	11 f4       	brne	.+4      	; 0x3f7c <main+0x17c>
       // Adaboot no-wait mod
       watchdogConfig(WATCHDOG_16MS);
-    3f76:	88 e0       	ldi	r24, 0x08	; 8
-    3f78:	18 d0       	rcall	.+48     	; 0x3faa <watchdogConfig>
+    3f78:	88 e0       	ldi	r24, 0x08	; 8
+    3f7a:	17 d0       	rcall	.+46     	; 0x3faa <watchdogConfig>
       verifySpace();
     }
     else {
       // This covers the response to commands like STK_ENTER_PROGMODE
       verifySpace();
-    3f7a:	1d d0       	rcall	.+58     	; 0x3fb6 <verifySpace>
+    3f7c:	1c d0       	rcall	.+56     	; 0x3fb6 <verifySpace>
     }
     putch(STK_OK);
-    3f7c:	80 e1       	ldi	r24, 0x10	; 16
-    3f7e:	01 d0       	rcall	.+2      	; 0x3f82 <putch>
-    3f80:	6f cf       	rjmp	.-290    	; 0x3e60 <main+0x60>
-
-00003f82 <putch>:
+    3f7e:	80 e1       	ldi	r24, 0x10	; 16
+    3f80:	01 d0       	rcall	.+2      	; 0x3f84 <putch>
   }
+    3f82:	71 cf       	rjmp	.-286    	; 0x3e66 <main+0x66>
+
+00003f84 <putch>:
 }
 
 void putch(char ch) {
-    3f82:	98 2f       	mov	r25, r24
 #ifndef SOFT_UART
   while (!(UART_SRA & _BV(UDRE0)));
-    3f84:	80 91 c0 00 	lds	r24, 0x00C0
-    3f88:	85 ff       	sbrs	r24, 5
-    3f8a:	fc cf       	rjmp	.-8      	; 0x3f84 <putch+0x2>
+    3f84:	90 91 c0 00 	lds	r25, 0x00C0
+    3f88:	95 ff       	sbrs	r25, 5
+    3f8a:	fc cf       	rjmp	.-8      	; 0x3f84 <putch>
   UART_UDR = ch;
-    3f8c:	90 93 c6 00 	sts	0x00C6, r25
+    3f8c:	80 93 c6 00 	sts	0x00C6, r24
       [uartBit] "I" (UART_TX_BIT)
     :
       "r25"
@@ -546,41 +552,41 @@ void verifySpace() {
   }
   putch(STK_INSYNC);
     3fc2:	84 e1       	ldi	r24, 0x14	; 20
+    3fc4:	df cf       	rjmp	.-66     	; 0x3f84 <putch>
 }
-    3fc4:	de cf       	rjmp	.-68     	; 0x3f82 <putch>
+    3fc6:	cf 93       	push	r28
 
-00003fc6 <getNch>:
+00003fc8 <getNch>:
     ::[count] "M" (UART_B_VALUE)
   );
 }
 #endif
 
 void getNch(uint8_t count) {
-    3fc6:	1f 93       	push	r17
-    3fc8:	18 2f       	mov	r17, r24
-  do getch(); while (--count);
+    3fc8:	c8 2f       	mov	r28, r24
     3fca:	e3 df       	rcall	.-58     	; 0x3f92 <getch>
-    3fcc:	11 50       	subi	r17, 0x01	; 1
-    3fce:	e9 f7       	brne	.-6      	; 0x3fca <getNch+0x4>
-  verifySpace();
+  do getch(); while (--count);
+    3fcc:	c1 50       	subi	r28, 0x01	; 1
+    3fce:	e9 f7       	brne	.-6      	; 0x3fca <getNch+0x2>
     3fd0:	f2 df       	rcall	.-28     	; 0x3fb6 <verifySpace>
+  verifySpace();
+    3fd2:	cf 91       	pop	r28
 }
-    3fd2:	1f 91       	pop	r17
     3fd4:	08 95       	ret
 
 00003fd6 <appStart>:
+    3fd6:	28 2e       	mov	r2, r24
 
 void appStart(uint8_t rstFlags) {
   // save the reset flags in the designated register
   //  This can be saved in a main program by putting code in .init0 (which
   //  executes before normal c init code) to save R2 to a global variable.
   __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
-    3fd6:	28 2e       	mov	r2, r24
+    3fd8:	80 e0       	ldi	r24, 0x00	; 0
 
   watchdogConfig(WATCHDOG_OFF);
-    3fd8:	80 e0       	ldi	r24, 0x00	; 0
     3fda:	e7 df       	rcall	.-50     	; 0x3faa <watchdogConfig>
-  __asm__ __volatile__ (
     3fdc:	ee 27       	eor	r30, r30
+  __asm__ __volatile__ (
     3fde:	ff 27       	eor	r31, r31
     3fe0:	09 94       	ijmp
diff --git a/optiboot/bootloaders/optiboot/optiboot_pro_20mhz.hex b/optiboot/bootloaders/optiboot/optiboot_pro_20mhz.hex
index 4d5e8ba..07b9154 100644
--- a/optiboot/bootloaders/optiboot/optiboot_pro_20mhz.hex
+++ b/optiboot/bootloaders/optiboot/optiboot_pro_20mhz.hex
@@ -1,33 +1,33 @@
-:103E0000112484B714BE81FFE6D085E08093810041
-:103E100082E08093C00088E18093C10086E08093B7
-:103E2000C20085E18093C4008EE0BFD0259A86E071
-:103E30002CE33BEF91E0309385002093840096BB08
-:103E4000B09BFECF1D9AA8958150A9F7EE24FF24C0
-:103E5000AA24A394B5E0CB2EA1E1BA2EF3E0DF2E85
-:103E600098D0813461F495D0082FA5D0023829F17B
-:103E7000013811F485E001C083E083D07FC0823433
-:103E800011F484E103C0853419F485E09CD076C038
-:103E9000853579F47ED0E82EFF247BD0082F10E002
-:103EA000102F00270E291F29000F111F84D0780121
-:103EB00065C0863521F484E086D080E0DECF84368C
-:103EC00009F040C066D065D0082F63D080E0E816C6
-:103ED00088E3F80618F4F701D7BEE895C0E0D1E012
-:103EE00058D089930C17E1F7F0E0EF16F8E3FF06DE
-:103EF00018F0F701D7BEE8955ED007B600FCFDCFFD
-:103F0000A701A0E0B1E02C9130E011968C911197BF
-:103F100090E0982F8827822B932B1296FA010C01A0
-:103F2000A7BEE89511244E5F5F4FF1E0A038BF07B0
-:103F300051F7F701C7BEE89507B600FCFDCFB7BE45
-:103F4000E8951CC0843761F424D023D0082F21D0F9
-:103F500032D0F70185917F0114D00150D1F70EC006
-:103F6000853739F428D08EE10CD084E90AD086E078
-:103F700084CF813511F488E018D01DD080E101D0C4
-:103F80006FCF982F8091C00085FFFCCF9093C60023
+:103E00000F92CDB7DEB7112484B714BE81FFE3D083
+:103E100085E08093810082E08093C00088E18093F8
+:103E2000C10086E08093C20085E18093C4008EE0EB
+:103E3000BCD0259A26E08CE39BEF31E0909385007F
+:103E40008093840036BBB09BFECF1D9AA89521506D
+:103E5000A9F700E010E0EE24E394E5E0DE2EF1E1C6
+:103E6000CF2EA3E0FA2E95D0813469F492D08983C5
+:103E7000A2D08981823819F1813811F485E001C01E
+:103E800083E080D07CC0823411F484E103C08534A7
+:103E900019F485E098D073C0853569F47AD0882EFE
+:103EA000992477D0082F10E0102F0027082919290E
+:103EB000000F111F63C0863521F484E084D080E0B8
+:103EC000E0CF843609F03FC064D063D0B82E61D013
+:103ED00088E30030180718F4F801F7BEE895812C44
+:103EE00051E0952E56D0F40181934F01BE16D1F7C3
+:103EF000F8E300301F0718F0F801F7BEE8955BD033
+:103F000007B600FCFDCFF801A0E0B1E02C9130E055
+:103F100011968C91119790E0982F8827822B932BE4
+:103F200012960C01E7BEE8951124329681E0A03884
+:103F3000B80761F7F801D7BEE89507B600FCFDCFDA
+:103F4000C7BEE8951CC0843761F423D022D0B82EB8
+:103F500020D031D0F80185918F0114D0BA94D1F7D7
+:103F60000EC0853739F427D08EE10CD084E90AD011
+:103F700086E087CF813511F488E017D01CD080E12E
+:103F800001D071CF9091C00095FFFCCF8093C60007
 :103F900008958091C00087FFFCCF8091C00084FD10
 :103FA00001C0A8958091C6000895E0E6F0E098E190
 :103FB000908380830895EDDF803219F088E0F5DF8B
-:103FC000FFCF84E1DECF1F93182FE3DF1150E9F715
-:103FD000F2DF1F910895282E80E0E7DFEE27FF270C
+:103FC000FFCF84E1DFCFCF93C82FE3DFC150E9F704
+:103FD000F2DFCF910895282E80E0E7DFEE27FF275C
 :023FE000099442
 :023FFE000005BC
 :0400000300003E00BB
diff --git a/optiboot/bootloaders/optiboot/optiboot_pro_20mhz.lst b/optiboot/bootloaders/optiboot/optiboot_pro_20mhz.lst
index 644471e..9ef45bb 100644
--- a/optiboot/bootloaders/optiboot/optiboot_pro_20mhz.lst
+++ b/optiboot/bootloaders/optiboot/optiboot_pro_20mhz.lst
@@ -3,27 +3,27 @@ optiboot_atmega168.elf:     file format elf32-avr
 
 Sections:
 Idx Name          Size      VMA       LMA       File off  Algn
-  0 .text         000001e2  00003e00  00003e00  00000054  2**1
+  0 .data         00000000  00800100  00003fe2  00000256  2**0
+                  CONTENTS, ALLOC, LOAD, DATA
+  1 .text         000001e2  00003e00  00003e00  00000074  2**1
                   CONTENTS, ALLOC, LOAD, READONLY, CODE
-  1 .version      00000002  00003ffe  00003ffe  00000236  2**0
+  2 .version      00000002  00003ffe  00003ffe  00000256  2**0
                   CONTENTS, READONLY
-  2 .debug_aranges 00000028  00000000  00000000  00000238  2**0
+  3 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                   CONTENTS, READONLY, DEBUGGING
-  3 .debug_pubnames 0000005f  00000000  00000000  00000260  2**0
+  4 .debug_info   00000290  00000000  00000000  00000280  2**0
                   CONTENTS, READONLY, DEBUGGING
-  4 .debug_info   00000294  00000000  00000000  000002bf  2**0
+  5 .debug_abbrev 00000176  00000000  00000000  00000510  2**0
                   CONTENTS, READONLY, DEBUGGING
-  5 .debug_abbrev 0000016b  00000000  00000000  00000553  2**0
+  6 .debug_line   00000192  00000000  00000000  00000686  2**0
                   CONTENTS, READONLY, DEBUGGING
-  6 .debug_line   00000421  00000000  00000000  000006be  2**0
+  7 .debug_frame  00000094  00000000  00000000  00000818  2**2
                   CONTENTS, READONLY, DEBUGGING
-  7 .debug_frame  00000080  00000000  00000000  00000ae0  2**2
+  8 .debug_str    00000131  00000000  00000000  000008ac  2**0
                   CONTENTS, READONLY, DEBUGGING
-  8 .debug_str    00000131  00000000  00000000  00000b60  2**0
+  9 .debug_loc    0000026e  00000000  00000000  000009dd  2**0
                   CONTENTS, READONLY, DEBUGGING
-  9 .debug_loc    00000266  00000000  00000000  00000c91  2**0
-                  CONTENTS, READONLY, DEBUGGING
- 10 .debug_ranges 00000078  00000000  00000000  00000ef7  2**0
+ 10 .debug_ranges 00000048  00000000  00000000  00000c4b  2**0
                   CONTENTS, READONLY, DEBUGGING
 
 Disassembly of section .text:
@@ -35,437 +35,443 @@ Disassembly of section .text:
 
 /* main program starts here */
 int main(void) {
-    3e00:	11 24       	eor	r1, r1
+    3e00:	0f 92       	push	r0
+    3e02:	cd b7       	in	r28, 0x3d	; 61
+    3e04:	de b7       	in	r29, 0x3e	; 62
+  //  SP points to RAMEND
+  //  r1 contains zero
+  //
+  // If not, uncomment the following instructions:
+  // cli();
+  asm volatile ("clr __zero_reg__");
+    3e06:	11 24       	eor	r1, r1
 #if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
   SP=RAMEND;  // This is done by hardware reset
 #endif
 
   // Adaboot no-wait mod
   ch = MCUSR;
-    3e02:	84 b7       	in	r24, 0x34	; 52
+    3e08:	84 b7       	in	r24, 0x34	; 52
   MCUSR = 0;
-    3e04:	14 be       	out	0x34, r1	; 52
+    3e0a:	14 be       	out	0x34, r1	; 52
   if (!(ch & _BV(EXTRF))) appStart(ch);
-    3e06:	81 ff       	sbrs	r24, 1
-    3e08:	e6 d0       	rcall	.+460    	; 0x3fd6 <appStart>
+    3e0c:	81 ff       	sbrs	r24, 1
+    3e0e:	e3 d0       	rcall	.+454    	; 0x3fd6 <appStart>
 
 #if LED_START_FLASHES > 0
   // Set up Timer 1 for timeout counter
   TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
-    3e0a:	85 e0       	ldi	r24, 0x05	; 5
-    3e0c:	80 93 81 00 	sts	0x0081, r24
+    3e10:	85 e0       	ldi	r24, 0x05	; 5
+    3e12:	80 93 81 00 	sts	0x0081, r24
   UCSRA = _BV(U2X); //Double speed mode USART
   UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
   UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
   UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
 #else
   UART_SRA = _BV(U2X0); //Double speed mode USART0
-    3e10:	82 e0       	ldi	r24, 0x02	; 2
-    3e12:	80 93 c0 00 	sts	0x00C0, r24
+    3e16:	82 e0       	ldi	r24, 0x02	; 2
+    3e18:	80 93 c0 00 	sts	0x00C0, r24
   UART_SRB = _BV(RXEN0) | _BV(TXEN0);
-    3e16:	88 e1       	ldi	r24, 0x18	; 24
-    3e18:	80 93 c1 00 	sts	0x00C1, r24
+    3e1c:	88 e1       	ldi	r24, 0x18	; 24
+    3e1e:	80 93 c1 00 	sts	0x00C1, r24
   UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
-    3e1c:	86 e0       	ldi	r24, 0x06	; 6
-    3e1e:	80 93 c2 00 	sts	0x00C2, r24
+    3e22:	86 e0       	ldi	r24, 0x06	; 6
+    3e24:	80 93 c2 00 	sts	0x00C2, r24
   UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
-    3e22:	85 e1       	ldi	r24, 0x15	; 21
-    3e24:	80 93 c4 00 	sts	0x00C4, r24
+    3e28:	85 e1       	ldi	r24, 0x15	; 21
+    3e2a:	80 93 c4 00 	sts	0x00C4, r24
 #endif
 #endif
 
   // Set up watchdog to trigger after 500ms
   watchdogConfig(WATCHDOG_1S);
-    3e28:	8e e0       	ldi	r24, 0x0E	; 14
-    3e2a:	bf d0       	rcall	.+382    	; 0x3faa <watchdogConfig>
+    3e2e:	8e e0       	ldi	r24, 0x0E	; 14
+    3e30:	bc d0       	rcall	.+376    	; 0x3faa <watchdogConfig>
 
 #if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
   /* Set LED pin as output */
   LED_DDR |= _BV(LED);
-    3e2c:	25 9a       	sbi	0x04, 5	; 4
-    3e2e:	86 e0       	ldi	r24, 0x06	; 6
+    3e32:	25 9a       	sbi	0x04, 5	; 4
+    3e34:	26 e0       	ldi	r18, 0x06	; 6
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    3e30:	2c e3       	ldi	r18, 0x3C	; 60
-    3e32:	3b ef       	ldi	r19, 0xFB	; 251
+    3e36:	8c e3       	ldi	r24, 0x3C	; 60
+    3e38:	9b ef       	ldi	r25, 0xFB	; 251
     TIFR1 = _BV(TOV1);
-    3e34:	91 e0       	ldi	r25, 0x01	; 1
+    3e3a:	31 e0       	ldi	r19, 0x01	; 1
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    3e36:	30 93 85 00 	sts	0x0085, r19
-    3e3a:	20 93 84 00 	sts	0x0084, r18
+    3e3c:	90 93 85 00 	sts	0x0085, r25
+    3e40:	80 93 84 00 	sts	0x0084, r24
     TIFR1 = _BV(TOV1);
-    3e3e:	96 bb       	out	0x16, r25	; 22
+    3e44:	36 bb       	out	0x16, r19	; 22
     while(!(TIFR1 & _BV(TOV1)));
-    3e40:	b0 9b       	sbis	0x16, 0	; 22
-    3e42:	fe cf       	rjmp	.-4      	; 0x3e40 <main+0x40>
+    3e46:	b0 9b       	sbis	0x16, 0	; 22
+    3e48:	fe cf       	rjmp	.-4      	; 0x3e46 <main+0x46>
 #if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
-    3e44:	1d 9a       	sbi	0x03, 5	; 3
+    3e4a:	1d 9a       	sbi	0x03, 5	; 3
 }
 #endif
 
 // Watchdog functions. These are only safe with interrupts turned off.
 void watchdogReset() {
   __asm__ __volatile__ (
-    3e46:	a8 95       	wdr
+    3e4c:	a8 95       	wdr
+    3e4e:	21 50       	subi	r18, 0x01	; 1
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
 #endif
     watchdogReset();
   } while (--count);
-    3e48:	81 50       	subi	r24, 0x01	; 1
-    3e4a:	a9 f7       	brne	.-22     	; 0x3e36 <main+0x36>
-    3e4c:	ee 24       	eor	r14, r14
-    3e4e:	ff 24       	eor	r15, r15
+    3e50:	a9 f7       	brne	.-22     	; 0x3e3c <main+0x3c>
+    3e52:	00 e0       	ldi	r16, 0x00	; 0
+    3e54:	10 e0       	ldi	r17, 0x00	; 0
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    3e50:	aa 24       	eor	r10, r10
-    3e52:	a3 94       	inc	r10
+    3e56:	ee 24       	eor	r14, r14
+    3e58:	e3 94       	inc	r14
         addrPtr += 2;
       } while (--ch);
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    3e54:	b5 e0       	ldi	r27, 0x05	; 5
-    3e56:	cb 2e       	mov	r12, r27
+    3e5a:	e5 e0       	ldi	r30, 0x05	; 5
+    3e5c:	de 2e       	mov	r13, r30
       boot_spm_busy_wait();
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    3e58:	a1 e1       	ldi	r26, 0x11	; 17
-    3e5a:	ba 2e       	mov	r11, r26
+    3e5e:	f1 e1       	ldi	r31, 0x11	; 17
+    3e60:	cf 2e       	mov	r12, r31
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3e5c:	f3 e0       	ldi	r31, 0x03	; 3
-    3e5e:	df 2e       	mov	r13, r31
+    3e62:	a3 e0       	ldi	r26, 0x03	; 3
+    3e64:	fa 2e       	mov	r15, r26
 #endif
 
   /* Forever loop */
   for (;;) {
     /* get character from UART */
     ch = getch();
-    3e60:	98 d0       	rcall	.+304    	; 0x3f92 <getch>
+    3e66:	95 d0       	rcall	.+298    	; 0x3f92 <getch>
 
     if(ch == STK_GET_PARAMETER) {
-    3e62:	81 34       	cpi	r24, 0x41	; 65
-    3e64:	61 f4       	brne	.+24     	; 0x3e7e <main+0x7e>
+    3e68:	81 34       	cpi	r24, 0x41	; 65
+    3e6a:	69 f4       	brne	.+26     	; 0x3e86 <main+0x86>
       unsigned char which = getch();
-    3e66:	95 d0       	rcall	.+298    	; 0x3f92 <getch>
-    3e68:	08 2f       	mov	r16, r24
+    3e6c:	92 d0       	rcall	.+292    	; 0x3f92 <getch>
       verifySpace();
-    3e6a:	a5 d0       	rcall	.+330    	; 0x3fb6 <verifySpace>
+    3e6e:	89 83       	std	Y+1, r24	; 0x01
+    3e70:	a2 d0       	rcall	.+324    	; 0x3fb6 <verifySpace>
       if (which == 0x82) {
-    3e6c:	02 38       	cpi	r16, 0x82	; 130
-    3e6e:	29 f1       	breq	.+74     	; 0x3eba <main+0xba>
+    3e72:	89 81       	ldd	r24, Y+1	; 0x01
+    3e74:	82 38       	cpi	r24, 0x82	; 130
+    3e76:	19 f1       	breq	.+70     	; 0x3ebe <main+0xbe>
 	/*
 	 * Send optiboot version as "minor SW version"
 	 */
 	putch(OPTIBOOT_MINVER);
       } else if (which == 0x81) {
-    3e70:	01 38       	cpi	r16, 0x81	; 129
-    3e72:	11 f4       	brne	.+4      	; 0x3e78 <main+0x78>
+    3e78:	81 38       	cpi	r24, 0x81	; 129
+    3e7a:	11 f4       	brne	.+4      	; 0x3e80 <main+0x80>
 	  putch(OPTIBOOT_MAJVER);
-    3e74:	85 e0       	ldi	r24, 0x05	; 5
-    3e76:	01 c0       	rjmp	.+2      	; 0x3e7a <main+0x7a>
+    3e7c:	85 e0       	ldi	r24, 0x05	; 5
+    3e7e:	01 c0       	rjmp	.+2      	; 0x3e82 <main+0x82>
       } else {
 	/*
 	 * GET PARAMETER returns a generic 0x03 reply for
          * other parameters - enough to keep Avrdude happy
 	 */
 	putch(0x03);
-    3e78:	83 e0       	ldi	r24, 0x03	; 3
-    3e7a:	83 d0       	rcall	.+262    	; 0x3f82 <putch>
-    3e7c:	7f c0       	rjmp	.+254    	; 0x3f7c <main+0x17c>
+    3e80:	83 e0       	ldi	r24, 0x03	; 3
+    3e82:	80 d0       	rcall	.+256    	; 0x3f84 <putch>
+    3e84:	7c c0       	rjmp	.+248    	; 0x3f7e <main+0x17e>
       }
     }
     else if(ch == STK_SET_DEVICE) {
-    3e7e:	82 34       	cpi	r24, 0x42	; 66
-    3e80:	11 f4       	brne	.+4      	; 0x3e86 <main+0x86>
+    3e86:	82 34       	cpi	r24, 0x42	; 66
+    3e88:	11 f4       	brne	.+4      	; 0x3e8e <main+0x8e>
       // SET DEVICE is ignored
       getNch(20);
-    3e82:	84 e1       	ldi	r24, 0x14	; 20
-    3e84:	03 c0       	rjmp	.+6      	; 0x3e8c <main+0x8c>
+    3e8a:	84 e1       	ldi	r24, 0x14	; 20
+    3e8c:	03 c0       	rjmp	.+6      	; 0x3e94 <main+0x94>
     }
     else if(ch == STK_SET_DEVICE_EXT) {
-    3e86:	85 34       	cpi	r24, 0x45	; 69
-    3e88:	19 f4       	brne	.+6      	; 0x3e90 <main+0x90>
+    3e8e:	85 34       	cpi	r24, 0x45	; 69
+    3e90:	19 f4       	brne	.+6      	; 0x3e98 <main+0x98>
       // SET DEVICE EXT is ignored
       getNch(5);
-    3e8a:	85 e0       	ldi	r24, 0x05	; 5
-    3e8c:	9c d0       	rcall	.+312    	; 0x3fc6 <getNch>
-    3e8e:	76 c0       	rjmp	.+236    	; 0x3f7c <main+0x17c>
+    3e92:	85 e0       	ldi	r24, 0x05	; 5
+    3e94:	98 d0       	rcall	.+304    	; 0x3fc6 <verifySpace+0x10>
+    3e96:	73 c0       	rjmp	.+230    	; 0x3f7e <main+0x17e>
     }
     else if(ch == STK_LOAD_ADDRESS) {
-    3e90:	85 35       	cpi	r24, 0x55	; 85
-    3e92:	79 f4       	brne	.+30     	; 0x3eb2 <main+0xb2>
+    3e98:	85 35       	cpi	r24, 0x55	; 85
+    3e9a:	69 f4       	brne	.+26     	; 0x3eb6 <main+0xb6>
       // LOAD ADDRESS
       uint16_t newAddress;
       newAddress = getch();
-    3e94:	7e d0       	rcall	.+252    	; 0x3f92 <getch>
+    3e9c:	7a d0       	rcall	.+244    	; 0x3f92 <getch>
+    3e9e:	88 2e       	mov	r8, r24
+    3ea0:	99 24       	eor	r9, r9
       newAddress = (newAddress & 0xff) | (getch() << 8);
-    3e96:	e8 2e       	mov	r14, r24
-    3e98:	ff 24       	eor	r15, r15
-    3e9a:	7b d0       	rcall	.+246    	; 0x3f92 <getch>
-    3e9c:	08 2f       	mov	r16, r24
-    3e9e:	10 e0       	ldi	r17, 0x00	; 0
-    3ea0:	10 2f       	mov	r17, r16
-    3ea2:	00 27       	eor	r16, r16
-    3ea4:	0e 29       	or	r16, r14
-    3ea6:	1f 29       	or	r17, r15
+    3ea2:	77 d0       	rcall	.+238    	; 0x3f92 <getch>
+    3ea4:	08 2f       	mov	r16, r24
+    3ea6:	10 e0       	ldi	r17, 0x00	; 0
+    3ea8:	10 2f       	mov	r17, r16
+    3eaa:	00 27       	eor	r16, r16
+    3eac:	08 29       	or	r16, r8
+    3eae:	19 29       	or	r17, r9
 #ifdef RAMPZ
       // Transfer top bit to RAMPZ
       RAMPZ = (newAddress & 0x8000) ? 1 : 0;
 #endif
       newAddress += newAddress; // Convert from word address to byte address
-    3ea8:	00 0f       	add	r16, r16
-    3eaa:	11 1f       	adc	r17, r17
+    3eb0:	00 0f       	add	r16, r16
+    3eb2:	11 1f       	adc	r17, r17
+    3eb4:	63 c0       	rjmp	.+198    	; 0x3f7c <main+0x17c>
       address = newAddress;
       verifySpace();
-    3eac:	84 d0       	rcall	.+264    	; 0x3fb6 <verifySpace>
-    3eae:	78 01       	movw	r14, r16
-    3eb0:	65 c0       	rjmp	.+202    	; 0x3f7c <main+0x17c>
     }
     else if(ch == STK_UNIVERSAL) {
-    3eb2:	86 35       	cpi	r24, 0x56	; 86
-    3eb4:	21 f4       	brne	.+8      	; 0x3ebe <main+0xbe>
+    3eb6:	86 35       	cpi	r24, 0x56	; 86
+    3eb8:	21 f4       	brne	.+8      	; 0x3ec2 <main+0xc2>
       // UNIVERSAL command is ignored
       getNch(4);
-    3eb6:	84 e0       	ldi	r24, 0x04	; 4
-    3eb8:	86 d0       	rcall	.+268    	; 0x3fc6 <getNch>
+    3eba:	84 e0       	ldi	r24, 0x04	; 4
+    3ebc:	84 d0       	rcall	.+264    	; 0x3fc6 <verifySpace+0x10>
       putch(0x00);
-    3eba:	80 e0       	ldi	r24, 0x00	; 0
-    3ebc:	de cf       	rjmp	.-68     	; 0x3e7a <main+0x7a>
+    3ebe:	80 e0       	ldi	r24, 0x00	; 0
+    3ec0:	e0 cf       	rjmp	.-64     	; 0x3e82 <main+0x82>
     }
     /* Write memory, length is big endian and is in bytes */
     else if(ch == STK_PROG_PAGE) {
-    3ebe:	84 36       	cpi	r24, 0x64	; 100
-    3ec0:	09 f0       	breq	.+2      	; 0x3ec4 <main+0xc4>
-    3ec2:	40 c0       	rjmp	.+128    	; 0x3f44 <main+0x144>
+    3ec2:	84 36       	cpi	r24, 0x64	; 100
+    3ec4:	09 f0       	breq	.+2      	; 0x3ec8 <main+0xc8>
+    3ec6:	3f c0       	rjmp	.+126    	; 0x3f46 <main+0x146>
       // PROGRAM PAGE - we support flash programming only, not EEPROM
       uint8_t *bufPtr;
       uint16_t addrPtr;
 
       getch();			/* getlen() */
-    3ec4:	66 d0       	rcall	.+204    	; 0x3f92 <getch>
+    3ec8:	64 d0       	rcall	.+200    	; 0x3f92 <getch>
       length = getch();
-    3ec6:	65 d0       	rcall	.+202    	; 0x3f92 <getch>
-    3ec8:	08 2f       	mov	r16, r24
-      getch();
     3eca:	63 d0       	rcall	.+198    	; 0x3f92 <getch>
+    3ecc:	b8 2e       	mov	r11, r24
+      getch();
+    3ece:	61 d0       	rcall	.+194    	; 0x3f92 <getch>
 
       // If we are in RWW section, immediately start page erase
       if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3ecc:	80 e0       	ldi	r24, 0x00	; 0
-    3ece:	e8 16       	cp	r14, r24
     3ed0:	88 e3       	ldi	r24, 0x38	; 56
-    3ed2:	f8 06       	cpc	r15, r24
-    3ed4:	18 f4       	brcc	.+6      	; 0x3edc <main+0xdc>
-    3ed6:	f7 01       	movw	r30, r14
-    3ed8:	d7 be       	out	0x37, r13	; 55
-    3eda:	e8 95       	spm
-    3edc:	c0 e0       	ldi	r28, 0x00	; 0
-    3ede:	d1 e0       	ldi	r29, 0x01	; 1
+    3ed2:	00 30       	cpi	r16, 0x00	; 0
+    3ed4:	18 07       	cpc	r17, r24
+    3ed6:	18 f4       	brcc	.+6      	; 0x3ede <main+0xde>
+    3ed8:	f8 01       	movw	r30, r16
+    3eda:	f7 be       	out	0x37, r15	; 55
+    3edc:	e8 95       	spm
+    3ede:	81 2c       	mov	r8, r1
+    3ee0:	51 e0       	ldi	r21, 0x01	; 1
+    3ee2:	95 2e       	mov	r9, r21
 
       // While that is going on, read in page contents
       bufPtr = buff;
       do *bufPtr++ = getch();
-    3ee0:	58 d0       	rcall	.+176    	; 0x3f92 <getch>
-    3ee2:	89 93       	st	Y+, r24
+    3ee4:	56 d0       	rcall	.+172    	; 0x3f92 <getch>
+    3ee6:	f4 01       	movw	r30, r8
+    3ee8:	81 93       	st	Z+, r24
+    3eea:	4f 01       	movw	r8, r30
       while (--length);
-    3ee4:	0c 17       	cp	r16, r28
-    3ee6:	e1 f7       	brne	.-8      	; 0x3ee0 <main+0xe0>
+    3eec:	be 16       	cp	r11, r30
+    3eee:	d1 f7       	brne	.-12     	; 0x3ee4 <main+0xe4>
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
-    3eea:	ef 16       	cp	r14, r31
-    3eec:	f8 e3       	ldi	r31, 0x38	; 56
-    3eee:	ff 06       	cpc	r15, r31
-    3ef0:	18 f0       	brcs	.+6      	; 0x3ef8 <main+0xf8>
-    3ef2:	f7 01       	movw	r30, r14
-    3ef4:	d7 be       	out	0x37, r13	; 55
-    3ef6:	e8 95       	spm
+    3ef0:	f8 e3       	ldi	r31, 0x38	; 56
+    3ef2:	00 30       	cpi	r16, 0x00	; 0
+    3ef4:	1f 07       	cpc	r17, r31
+    3ef6:	18 f0       	brcs	.+6      	; 0x3efe <main+0xfe>
+    3ef8:	f8 01       	movw	r30, r16
+    3efa:	f7 be       	out	0x37, r15	; 55
+    3efc:	e8 95       	spm
 
       // Read command terminator, start reply
       verifySpace();
-    3ef8:	5e d0       	rcall	.+188    	; 0x3fb6 <verifySpace>
+    3efe:	5b d0       	rcall	.+182    	; 0x3fb6 <verifySpace>
 
       // If only a partial page is to be programmed, the erase might not be complete.
       // So check that here
       boot_spm_busy_wait();
-    3efa:	07 b6       	in	r0, 0x37	; 55
-    3efc:	00 fc       	sbrc	r0, 0
-    3efe:	fd cf       	rjmp	.-6      	; 0x3efa <main+0xfa>
-    3f00:	a7 01       	movw	r20, r14
-    3f02:	a0 e0       	ldi	r26, 0x00	; 0
-    3f04:	b1 e0       	ldi	r27, 0x01	; 1
+    3f00:	07 b6       	in	r0, 0x37	; 55
+    3f02:	00 fc       	sbrc	r0, 0
+    3f04:	fd cf       	rjmp	.-6      	; 0x3f00 <main+0x100>
+    3f06:	f8 01       	movw	r30, r16
+    3f08:	a0 e0       	ldi	r26, 0x00	; 0
+    3f0a:	b1 e0       	ldi	r27, 0x01	; 1
       bufPtr = buff;
       addrPtr = (uint16_t)(void*)address;
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
-    3f06:	2c 91       	ld	r18, X
-    3f08:	30 e0       	ldi	r19, 0x00	; 0
+    3f0c:	2c 91       	ld	r18, X
+    3f0e:	30 e0       	ldi	r19, 0x00	; 0
         a |= (*bufPtr++) << 8;
-    3f0a:	11 96       	adiw	r26, 0x01	; 1
-    3f0c:	8c 91       	ld	r24, X
-    3f0e:	11 97       	sbiw	r26, 0x01	; 1
-    3f10:	90 e0       	ldi	r25, 0x00	; 0
-    3f12:	98 2f       	mov	r25, r24
-    3f14:	88 27       	eor	r24, r24
-    3f16:	82 2b       	or	r24, r18
-    3f18:	93 2b       	or	r25, r19
+    3f10:	11 96       	adiw	r26, 0x01	; 1
+    3f12:	8c 91       	ld	r24, X
+    3f14:	11 97       	sbiw	r26, 0x01	; 1
+    3f16:	90 e0       	ldi	r25, 0x00	; 0
+    3f18:	98 2f       	mov	r25, r24
+    3f1a:	88 27       	eor	r24, r24
+    3f1c:	82 2b       	or	r24, r18
+    3f1e:	93 2b       	or	r25, r19
 # define UART_SRL UBRR3L
 # define UART_UDR UDR3
 #endif
 
 /* main program starts here */
 int main(void) {
-    3f1a:	12 96       	adiw	r26, 0x02	; 2
+    3f20:	12 96       	adiw	r26, 0x02	; 2
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    3f1c:	fa 01       	movw	r30, r20
-    3f1e:	0c 01       	movw	r0, r24
-    3f20:	a7 be       	out	0x37, r10	; 55
-    3f22:	e8 95       	spm
-    3f24:	11 24       	eor	r1, r1
+    3f22:	0c 01       	movw	r0, r24
+    3f24:	e7 be       	out	0x37, r14	; 55
+    3f26:	e8 95       	spm
+    3f28:	11 24       	eor	r1, r1
         addrPtr += 2;
-    3f26:	4e 5f       	subi	r20, 0xFE	; 254
-    3f28:	5f 4f       	sbci	r21, 0xFF	; 255
+    3f2a:	32 96       	adiw	r30, 0x02	; 2
       } while (--ch);
-    3f2a:	f1 e0       	ldi	r31, 0x01	; 1
-    3f2c:	a0 38       	cpi	r26, 0x80	; 128
-    3f2e:	bf 07       	cpc	r27, r31
-    3f30:	51 f7       	brne	.-44     	; 0x3f06 <main+0x106>
+    3f2c:	81 e0       	ldi	r24, 0x01	; 1
+    3f2e:	a0 38       	cpi	r26, 0x80	; 128
+    3f30:	b8 07       	cpc	r27, r24
+    3f32:	61 f7       	brne	.-40     	; 0x3f0c <main+0x10c>
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    3f32:	f7 01       	movw	r30, r14
-    3f34:	c7 be       	out	0x37, r12	; 55
-    3f36:	e8 95       	spm
+    3f34:	f8 01       	movw	r30, r16
+    3f36:	d7 be       	out	0x37, r13	; 55
+    3f38:	e8 95       	spm
       boot_spm_busy_wait();
-    3f38:	07 b6       	in	r0, 0x37	; 55
-    3f3a:	00 fc       	sbrc	r0, 0
-    3f3c:	fd cf       	rjmp	.-6      	; 0x3f38 <main+0x138>
+    3f3a:	07 b6       	in	r0, 0x37	; 55
+    3f3c:	00 fc       	sbrc	r0, 0
+    3f3e:	fd cf       	rjmp	.-6      	; 0x3f3a <main+0x13a>
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    3f3e:	b7 be       	out	0x37, r11	; 55
-    3f40:	e8 95       	spm
-    3f42:	1c c0       	rjmp	.+56     	; 0x3f7c <main+0x17c>
+    3f40:	c7 be       	out	0x37, r12	; 55
+    3f42:	e8 95       	spm
+    3f44:	1c c0       	rjmp	.+56     	; 0x3f7e <main+0x17e>
 #endif
 
     }
     /* Read memory block mode, length is big endian.  */
     else if(ch == STK_READ_PAGE) {
-    3f44:	84 37       	cpi	r24, 0x74	; 116
-    3f46:	61 f4       	brne	.+24     	; 0x3f60 <main+0x160>
+    3f46:	84 37       	cpi	r24, 0x74	; 116
+    3f48:	61 f4       	brne	.+24     	; 0x3f62 <main+0x162>
       // READ PAGE - we only read flash
       getch();			/* getlen() */
-    3f48:	24 d0       	rcall	.+72     	; 0x3f92 <getch>
-      length = getch();
     3f4a:	23 d0       	rcall	.+70     	; 0x3f92 <getch>
-    3f4c:	08 2f       	mov	r16, r24
+      length = getch();
+    3f4c:	22 d0       	rcall	.+68     	; 0x3f92 <getch>
+    3f4e:	b8 2e       	mov	r11, r24
       getch();
-    3f4e:	21 d0       	rcall	.+66     	; 0x3f92 <getch>
+    3f50:	20 d0       	rcall	.+64     	; 0x3f92 <getch>
 
       verifySpace();
-    3f50:	32 d0       	rcall	.+100    	; 0x3fb6 <verifySpace>
+    3f52:	31 d0       	rcall	.+98     	; 0x3fb6 <verifySpace>
         __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #else
         // read a Flash byte and increment the address
         __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #endif
         putch(ch);
-    3f52:	f7 01       	movw	r30, r14
-    3f54:	85 91       	lpm	r24, Z+
-    3f56:	7f 01       	movw	r14, r30
-    3f58:	14 d0       	rcall	.+40     	; 0x3f82 <putch>
+    3f54:	f8 01       	movw	r30, r16
+    3f56:	85 91       	lpm	r24, Z+
+    3f58:	8f 01       	movw	r16, r30
+    3f5a:	14 d0       	rcall	.+40     	; 0x3f84 <putch>
       } while (--length);
-    3f5a:	01 50       	subi	r16, 0x01	; 1
-    3f5c:	d1 f7       	brne	.-12     	; 0x3f52 <main+0x152>
-    3f5e:	0e c0       	rjmp	.+28     	; 0x3f7c <main+0x17c>
+    3f5c:	ba 94       	dec	r11
+    3f5e:	d1 f7       	brne	.-12     	; 0x3f54 <main+0x154>
+    3f60:	0e c0       	rjmp	.+28     	; 0x3f7e <main+0x17e>
     }
 
     /* Get device signature bytes  */
     else if(ch == STK_READ_SIGN) {
-    3f60:	85 37       	cpi	r24, 0x75	; 117
-    3f62:	39 f4       	brne	.+14     	; 0x3f72 <main+0x172>
+    3f62:	85 37       	cpi	r24, 0x75	; 117
+    3f64:	39 f4       	brne	.+14     	; 0x3f74 <main+0x174>
       // READ SIGN - return what Avrdude wants to hear
       verifySpace();
-    3f64:	28 d0       	rcall	.+80     	; 0x3fb6 <verifySpace>
+    3f66:	27 d0       	rcall	.+78     	; 0x3fb6 <verifySpace>
       putch(SIGNATURE_0);
-    3f66:	8e e1       	ldi	r24, 0x1E	; 30
-    3f68:	0c d0       	rcall	.+24     	; 0x3f82 <putch>
+    3f68:	8e e1       	ldi	r24, 0x1E	; 30
+    3f6a:	0c d0       	rcall	.+24     	; 0x3f84 <putch>
       putch(SIGNATURE_1);
-    3f6a:	84 e9       	ldi	r24, 0x94	; 148
-    3f6c:	0a d0       	rcall	.+20     	; 0x3f82 <putch>
+    3f6c:	84 e9       	ldi	r24, 0x94	; 148
+    3f6e:	0a d0       	rcall	.+20     	; 0x3f84 <putch>
       putch(SIGNATURE_2);
-    3f6e:	86 e0       	ldi	r24, 0x06	; 6
-    3f70:	84 cf       	rjmp	.-248    	; 0x3e7a <main+0x7a>
+    3f70:	86 e0       	ldi	r24, 0x06	; 6
+    3f72:	87 cf       	rjmp	.-242    	; 0x3e82 <main+0x82>
     }
     else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
-    3f72:	81 35       	cpi	r24, 0x51	; 81
-    3f74:	11 f4       	brne	.+4      	; 0x3f7a <main+0x17a>
+    3f74:	81 35       	cpi	r24, 0x51	; 81
+    3f76:	11 f4       	brne	.+4      	; 0x3f7c <main+0x17c>
       // Adaboot no-wait mod
       watchdogConfig(WATCHDOG_16MS);
-    3f76:	88 e0       	ldi	r24, 0x08	; 8
-    3f78:	18 d0       	rcall	.+48     	; 0x3faa <watchdogConfig>
+    3f78:	88 e0       	ldi	r24, 0x08	; 8
+    3f7a:	17 d0       	rcall	.+46     	; 0x3faa <watchdogConfig>
       verifySpace();
     }
     else {
       // This covers the response to commands like STK_ENTER_PROGMODE
       verifySpace();
-    3f7a:	1d d0       	rcall	.+58     	; 0x3fb6 <verifySpace>
+    3f7c:	1c d0       	rcall	.+56     	; 0x3fb6 <verifySpace>
     }
     putch(STK_OK);
-    3f7c:	80 e1       	ldi	r24, 0x10	; 16
-    3f7e:	01 d0       	rcall	.+2      	; 0x3f82 <putch>
-    3f80:	6f cf       	rjmp	.-290    	; 0x3e60 <main+0x60>
-
-00003f82 <putch>:
+    3f7e:	80 e1       	ldi	r24, 0x10	; 16
+    3f80:	01 d0       	rcall	.+2      	; 0x3f84 <putch>
   }
+    3f82:	71 cf       	rjmp	.-286    	; 0x3e66 <main+0x66>
+
+00003f84 <putch>:
 }
 
 void putch(char ch) {
-    3f82:	98 2f       	mov	r25, r24
 #ifndef SOFT_UART
   while (!(UART_SRA & _BV(UDRE0)));
-    3f84:	80 91 c0 00 	lds	r24, 0x00C0
-    3f88:	85 ff       	sbrs	r24, 5
-    3f8a:	fc cf       	rjmp	.-8      	; 0x3f84 <putch+0x2>
+    3f84:	90 91 c0 00 	lds	r25, 0x00C0
+    3f88:	95 ff       	sbrs	r25, 5
+    3f8a:	fc cf       	rjmp	.-8      	; 0x3f84 <putch>
   UART_UDR = ch;
-    3f8c:	90 93 c6 00 	sts	0x00C6, r25
+    3f8c:	80 93 c6 00 	sts	0x00C6, r24
       [uartBit] "I" (UART_TX_BIT)
     :
       "r25"
@@ -546,41 +552,41 @@ void verifySpace() {
   }
   putch(STK_INSYNC);
     3fc2:	84 e1       	ldi	r24, 0x14	; 20
+    3fc4:	df cf       	rjmp	.-66     	; 0x3f84 <putch>
 }
-    3fc4:	de cf       	rjmp	.-68     	; 0x3f82 <putch>
+    3fc6:	cf 93       	push	r28
 
-00003fc6 <getNch>:
+00003fc8 <getNch>:
     ::[count] "M" (UART_B_VALUE)
   );
 }
 #endif
 
 void getNch(uint8_t count) {
-    3fc6:	1f 93       	push	r17
-    3fc8:	18 2f       	mov	r17, r24
-  do getch(); while (--count);
+    3fc8:	c8 2f       	mov	r28, r24
     3fca:	e3 df       	rcall	.-58     	; 0x3f92 <getch>
-    3fcc:	11 50       	subi	r17, 0x01	; 1
-    3fce:	e9 f7       	brne	.-6      	; 0x3fca <getNch+0x4>
-  verifySpace();
+  do getch(); while (--count);
+    3fcc:	c1 50       	subi	r28, 0x01	; 1
+    3fce:	e9 f7       	brne	.-6      	; 0x3fca <getNch+0x2>
     3fd0:	f2 df       	rcall	.-28     	; 0x3fb6 <verifySpace>
+  verifySpace();
+    3fd2:	cf 91       	pop	r28
 }
-    3fd2:	1f 91       	pop	r17
     3fd4:	08 95       	ret
 
 00003fd6 <appStart>:
+    3fd6:	28 2e       	mov	r2, r24
 
 void appStart(uint8_t rstFlags) {
   // save the reset flags in the designated register
   //  This can be saved in a main program by putting code in .init0 (which
   //  executes before normal c init code) to save R2 to a global variable.
   __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
-    3fd6:	28 2e       	mov	r2, r24
+    3fd8:	80 e0       	ldi	r24, 0x00	; 0
 
   watchdogConfig(WATCHDOG_OFF);
-    3fd8:	80 e0       	ldi	r24, 0x00	; 0
     3fda:	e7 df       	rcall	.-50     	; 0x3faa <watchdogConfig>
-  __asm__ __volatile__ (
     3fdc:	ee 27       	eor	r30, r30
+  __asm__ __volatile__ (
     3fde:	ff 27       	eor	r31, r31
     3fe0:	09 94       	ijmp
diff --git a/optiboot/bootloaders/optiboot/optiboot_pro_8MHz.hex b/optiboot/bootloaders/optiboot/optiboot_pro_8MHz.hex
index b43d1ed..efd8428 100644
--- a/optiboot/bootloaders/optiboot/optiboot_pro_8MHz.hex
+++ b/optiboot/bootloaders/optiboot/optiboot_pro_8MHz.hex
@@ -1,33 +1,33 @@
-:103E0000112484B714BE81FFE6D085E08093810041
-:103E100082E08093C00088E18093C10086E08093B7
-:103E2000C20088E08093C4008EE0BFD0259A86E06F
-:103E300028E13EEF91E0309385002093840096BB0B
-:103E4000B09BFECF1D9AA8958150A9F7EE24FF24C0
-:103E5000AA24A394B5E0CB2EA1E1BA2EF3E0DF2E85
-:103E600098D0813461F495D0082FA5D0023829F17B
-:103E7000013811F485E001C083E083D07FC0823433
-:103E800011F484E103C0853419F485E09CD076C038
-:103E9000853579F47ED0E82EFF247BD0082F10E002
-:103EA000102F00270E291F29000F111F84D0780121
-:103EB00065C0863521F484E086D080E0DECF84368C
-:103EC00009F040C066D065D0082F63D080E0E816C6
-:103ED00088E3F80618F4F701D7BEE895C0E0D1E012
-:103EE00058D089930C17E1F7F0E0EF16F8E3FF06DE
-:103EF00018F0F701D7BEE8955ED007B600FCFDCFFD
-:103F0000A701A0E0B1E02C9130E011968C911197BF
-:103F100090E0982F8827822B932B1296FA010C01A0
-:103F2000A7BEE89511244E5F5F4FF1E0A038BF07B0
-:103F300051F7F701C7BEE89507B600FCFDCFB7BE45
-:103F4000E8951CC0843761F424D023D0082F21D0F9
-:103F500032D0F70185917F0114D00150D1F70EC006
-:103F6000853739F428D08EE10CD084E90AD086E078
-:103F700084CF813511F488E018D01DD080E101D0C4
-:103F80006FCF982F8091C00085FFFCCF9093C60023
+:103E00000F92CDB7DEB7112484B714BE81FFE3D083
+:103E100085E08093810082E08093C00088E18093F8
+:103E2000C10086E08093C20088E08093C4008EE0E9
+:103E3000BCD0259A26E088E19EEF31E09093850082
+:103E40008093840036BBB09BFECF1D9AA89521506D
+:103E5000A9F700E010E0EE24E394E5E0DE2EF1E1C6
+:103E6000CF2EA3E0FA2E95D0813469F492D08983C5
+:103E7000A2D08981823819F1813811F485E001C01E
+:103E800083E080D07CC0823411F484E103C08534A7
+:103E900019F485E098D073C0853569F47AD0882EFE
+:103EA000992477D0082F10E0102F0027082919290E
+:103EB000000F111F63C0863521F484E084D080E0B8
+:103EC000E0CF843609F03FC064D063D0B82E61D013
+:103ED00088E30030180718F4F801F7BEE895812C44
+:103EE00051E0952E56D0F40181934F01BE16D1F7C3
+:103EF000F8E300301F0718F0F801F7BEE8955BD033
+:103F000007B600FCFDCFF801A0E0B1E02C9130E055
+:103F100011968C91119790E0982F8827822B932BE4
+:103F200012960C01E7BEE8951124329681E0A03884
+:103F3000B80761F7F801D7BEE89507B600FCFDCFDA
+:103F4000C7BEE8951CC0843761F423D022D0B82EB8
+:103F500020D031D0F80185918F0114D0BA94D1F7D7
+:103F60000EC0853739F427D08EE10CD084E90AD011
+:103F700086E087CF813511F488E017D01CD080E12E
+:103F800001D071CF9091C00095FFFCCF8093C60007
 :103F900008958091C00087FFFCCF8091C00084FD10
 :103FA00001C0A8958091C6000895E0E6F0E098E190
 :103FB000908380830895EDDF803219F088E0F5DF8B
-:103FC000FFCF84E1DECF1F93182FE3DF1150E9F715
-:103FD000F2DF1F910895282E80E0E7DFEE27FF270C
+:103FC000FFCF84E1DFCFCF93C82FE3DFC150E9F704
+:103FD000F2DFCF910895282E80E0E7DFEE27FF275C
 :023FE000099442
 :023FFE000005BC
 :0400000300003E00BB
diff --git a/optiboot/bootloaders/optiboot/optiboot_pro_8MHz.lst b/optiboot/bootloaders/optiboot/optiboot_pro_8MHz.lst
index d2d73c8..7eab0ea 100644
--- a/optiboot/bootloaders/optiboot/optiboot_pro_8MHz.lst
+++ b/optiboot/bootloaders/optiboot/optiboot_pro_8MHz.lst
@@ -3,27 +3,27 @@ optiboot_atmega168.elf:     file format elf32-avr
 
 Sections:
 Idx Name          Size      VMA       LMA       File off  Algn
-  0 .text         000001e2  00003e00  00003e00  00000054  2**1
+  0 .data         00000000  00800100  00003fe2  00000256  2**0
+                  CONTENTS, ALLOC, LOAD, DATA
+  1 .text         000001e2  00003e00  00003e00  00000074  2**1
                   CONTENTS, ALLOC, LOAD, READONLY, CODE
-  1 .version      00000002  00003ffe  00003ffe  00000236  2**0
+  2 .version      00000002  00003ffe  00003ffe  00000256  2**0
                   CONTENTS, READONLY
-  2 .debug_aranges 00000028  00000000  00000000  00000238  2**0
+  3 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                   CONTENTS, READONLY, DEBUGGING
-  3 .debug_pubnames 0000005f  00000000  00000000  00000260  2**0
+  4 .debug_info   00000290  00000000  00000000  00000280  2**0
                   CONTENTS, READONLY, DEBUGGING
-  4 .debug_info   00000294  00000000  00000000  000002bf  2**0
+  5 .debug_abbrev 00000176  00000000  00000000  00000510  2**0
                   CONTENTS, READONLY, DEBUGGING
-  5 .debug_abbrev 0000016b  00000000  00000000  00000553  2**0
+  6 .debug_line   00000192  00000000  00000000  00000686  2**0
                   CONTENTS, READONLY, DEBUGGING
-  6 .debug_line   00000421  00000000  00000000  000006be  2**0
+  7 .debug_frame  00000094  00000000  00000000  00000818  2**2
                   CONTENTS, READONLY, DEBUGGING
-  7 .debug_frame  00000080  00000000  00000000  00000ae0  2**2
+  8 .debug_str    00000131  00000000  00000000  000008ac  2**0
                   CONTENTS, READONLY, DEBUGGING
-  8 .debug_str    00000131  00000000  00000000  00000b60  2**0
+  9 .debug_loc    0000026e  00000000  00000000  000009dd  2**0
                   CONTENTS, READONLY, DEBUGGING
-  9 .debug_loc    00000266  00000000  00000000  00000c91  2**0
-                  CONTENTS, READONLY, DEBUGGING
- 10 .debug_ranges 00000078  00000000  00000000  00000ef7  2**0
+ 10 .debug_ranges 00000048  00000000  00000000  00000c4b  2**0
                   CONTENTS, READONLY, DEBUGGING
 
 Disassembly of section .text:
@@ -35,437 +35,443 @@ Disassembly of section .text:
 
 /* main program starts here */
 int main(void) {
-    3e00:	11 24       	eor	r1, r1
+    3e00:	0f 92       	push	r0
+    3e02:	cd b7       	in	r28, 0x3d	; 61
+    3e04:	de b7       	in	r29, 0x3e	; 62
+  //  SP points to RAMEND
+  //  r1 contains zero
+  //
+  // If not, uncomment the following instructions:
+  // cli();
+  asm volatile ("clr __zero_reg__");
+    3e06:	11 24       	eor	r1, r1
 #if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
   SP=RAMEND;  // This is done by hardware reset
 #endif
 
   // Adaboot no-wait mod
   ch = MCUSR;
-    3e02:	84 b7       	in	r24, 0x34	; 52
+    3e08:	84 b7       	in	r24, 0x34	; 52
   MCUSR = 0;
-    3e04:	14 be       	out	0x34, r1	; 52
+    3e0a:	14 be       	out	0x34, r1	; 52
   if (!(ch & _BV(EXTRF))) appStart(ch);
-    3e06:	81 ff       	sbrs	r24, 1
-    3e08:	e6 d0       	rcall	.+460    	; 0x3fd6 <appStart>
+    3e0c:	81 ff       	sbrs	r24, 1
+    3e0e:	e3 d0       	rcall	.+454    	; 0x3fd6 <appStart>
 
 #if LED_START_FLASHES > 0
   // Set up Timer 1 for timeout counter
   TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
-    3e0a:	85 e0       	ldi	r24, 0x05	; 5
-    3e0c:	80 93 81 00 	sts	0x0081, r24
+    3e10:	85 e0       	ldi	r24, 0x05	; 5
+    3e12:	80 93 81 00 	sts	0x0081, r24
   UCSRA = _BV(U2X); //Double speed mode USART
   UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
   UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
   UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
 #else
   UART_SRA = _BV(U2X0); //Double speed mode USART0
-    3e10:	82 e0       	ldi	r24, 0x02	; 2
-    3e12:	80 93 c0 00 	sts	0x00C0, r24
+    3e16:	82 e0       	ldi	r24, 0x02	; 2
+    3e18:	80 93 c0 00 	sts	0x00C0, r24
   UART_SRB = _BV(RXEN0) | _BV(TXEN0);
-    3e16:	88 e1       	ldi	r24, 0x18	; 24
-    3e18:	80 93 c1 00 	sts	0x00C1, r24
+    3e1c:	88 e1       	ldi	r24, 0x18	; 24
+    3e1e:	80 93 c1 00 	sts	0x00C1, r24
   UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
-    3e1c:	86 e0       	ldi	r24, 0x06	; 6
-    3e1e:	80 93 c2 00 	sts	0x00C2, r24
+    3e22:	86 e0       	ldi	r24, 0x06	; 6
+    3e24:	80 93 c2 00 	sts	0x00C2, r24
   UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
-    3e22:	88 e0       	ldi	r24, 0x08	; 8
-    3e24:	80 93 c4 00 	sts	0x00C4, r24
+    3e28:	88 e0       	ldi	r24, 0x08	; 8
+    3e2a:	80 93 c4 00 	sts	0x00C4, r24
 #endif
 #endif
 
   // Set up watchdog to trigger after 500ms
   watchdogConfig(WATCHDOG_1S);
-    3e28:	8e e0       	ldi	r24, 0x0E	; 14
-    3e2a:	bf d0       	rcall	.+382    	; 0x3faa <watchdogConfig>
+    3e2e:	8e e0       	ldi	r24, 0x0E	; 14
+    3e30:	bc d0       	rcall	.+376    	; 0x3faa <watchdogConfig>
 
 #if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
   /* Set LED pin as output */
   LED_DDR |= _BV(LED);
-    3e2c:	25 9a       	sbi	0x04, 5	; 4
-    3e2e:	86 e0       	ldi	r24, 0x06	; 6
+    3e32:	25 9a       	sbi	0x04, 5	; 4
+    3e34:	26 e0       	ldi	r18, 0x06	; 6
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    3e30:	28 e1       	ldi	r18, 0x18	; 24
-    3e32:	3e ef       	ldi	r19, 0xFE	; 254
+    3e36:	88 e1       	ldi	r24, 0x18	; 24
+    3e38:	9e ef       	ldi	r25, 0xFE	; 254
     TIFR1 = _BV(TOV1);
-    3e34:	91 e0       	ldi	r25, 0x01	; 1
+    3e3a:	31 e0       	ldi	r19, 0x01	; 1
 }
 
 #if LED_START_FLASHES > 0
 void flash_led(uint8_t count) {
   do {
     TCNT1 = -(F_CPU/(1024*16));
-    3e36:	30 93 85 00 	sts	0x0085, r19
-    3e3a:	20 93 84 00 	sts	0x0084, r18
+    3e3c:	90 93 85 00 	sts	0x0085, r25
+    3e40:	80 93 84 00 	sts	0x0084, r24
     TIFR1 = _BV(TOV1);
-    3e3e:	96 bb       	out	0x16, r25	; 22
+    3e44:	36 bb       	out	0x16, r19	; 22
     while(!(TIFR1 & _BV(TOV1)));
-    3e40:	b0 9b       	sbis	0x16, 0	; 22
-    3e42:	fe cf       	rjmp	.-4      	; 0x3e40 <main+0x40>
+    3e46:	b0 9b       	sbis	0x16, 0	; 22
+    3e48:	fe cf       	rjmp	.-4      	; 0x3e46 <main+0x46>
 #if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
-    3e44:	1d 9a       	sbi	0x03, 5	; 3
+    3e4a:	1d 9a       	sbi	0x03, 5	; 3
 }
 #endif
 
 // Watchdog functions. These are only safe with interrupts turned off.
 void watchdogReset() {
   __asm__ __volatile__ (
-    3e46:	a8 95       	wdr
+    3e4c:	a8 95       	wdr
+    3e4e:	21 50       	subi	r18, 0x01	; 1
     LED_PORT ^= _BV(LED);
 #else
     LED_PIN |= _BV(LED);
 #endif
     watchdogReset();
   } while (--count);
-    3e48:	81 50       	subi	r24, 0x01	; 1
-    3e4a:	a9 f7       	brne	.-22     	; 0x3e36 <main+0x36>
-    3e4c:	ee 24       	eor	r14, r14
-    3e4e:	ff 24       	eor	r15, r15
+    3e50:	a9 f7       	brne	.-22     	; 0x3e3c <main+0x3c>
+    3e52:	00 e0       	ldi	r16, 0x00	; 0
+    3e54:	10 e0       	ldi	r17, 0x00	; 0
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    3e50:	aa 24       	eor	r10, r10
-    3e52:	a3 94       	inc	r10
+    3e56:	ee 24       	eor	r14, r14
+    3e58:	e3 94       	inc	r14
         addrPtr += 2;
       } while (--ch);
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    3e54:	b5 e0       	ldi	r27, 0x05	; 5
-    3e56:	cb 2e       	mov	r12, r27
+    3e5a:	e5 e0       	ldi	r30, 0x05	; 5
+    3e5c:	de 2e       	mov	r13, r30
       boot_spm_busy_wait();
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    3e58:	a1 e1       	ldi	r26, 0x11	; 17
-    3e5a:	ba 2e       	mov	r11, r26
+    3e5e:	f1 e1       	ldi	r31, 0x11	; 17
+    3e60:	cf 2e       	mov	r12, r31
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3e5c:	f3 e0       	ldi	r31, 0x03	; 3
-    3e5e:	df 2e       	mov	r13, r31
+    3e62:	a3 e0       	ldi	r26, 0x03	; 3
+    3e64:	fa 2e       	mov	r15, r26
 #endif
 
   /* Forever loop */
   for (;;) {
     /* get character from UART */
     ch = getch();
-    3e60:	98 d0       	rcall	.+304    	; 0x3f92 <getch>
+    3e66:	95 d0       	rcall	.+298    	; 0x3f92 <getch>
 
     if(ch == STK_GET_PARAMETER) {
-    3e62:	81 34       	cpi	r24, 0x41	; 65
-    3e64:	61 f4       	brne	.+24     	; 0x3e7e <main+0x7e>
+    3e68:	81 34       	cpi	r24, 0x41	; 65
+    3e6a:	69 f4       	brne	.+26     	; 0x3e86 <main+0x86>
       unsigned char which = getch();
-    3e66:	95 d0       	rcall	.+298    	; 0x3f92 <getch>
-    3e68:	08 2f       	mov	r16, r24
+    3e6c:	92 d0       	rcall	.+292    	; 0x3f92 <getch>
       verifySpace();
-    3e6a:	a5 d0       	rcall	.+330    	; 0x3fb6 <verifySpace>
+    3e6e:	89 83       	std	Y+1, r24	; 0x01
+    3e70:	a2 d0       	rcall	.+324    	; 0x3fb6 <verifySpace>
       if (which == 0x82) {
-    3e6c:	02 38       	cpi	r16, 0x82	; 130
-    3e6e:	29 f1       	breq	.+74     	; 0x3eba <main+0xba>
+    3e72:	89 81       	ldd	r24, Y+1	; 0x01
+    3e74:	82 38       	cpi	r24, 0x82	; 130
+    3e76:	19 f1       	breq	.+70     	; 0x3ebe <main+0xbe>
 	/*
 	 * Send optiboot version as "minor SW version"
 	 */
 	putch(OPTIBOOT_MINVER);
       } else if (which == 0x81) {
-    3e70:	01 38       	cpi	r16, 0x81	; 129
-    3e72:	11 f4       	brne	.+4      	; 0x3e78 <main+0x78>
+    3e78:	81 38       	cpi	r24, 0x81	; 129
+    3e7a:	11 f4       	brne	.+4      	; 0x3e80 <main+0x80>
 	  putch(OPTIBOOT_MAJVER);
-    3e74:	85 e0       	ldi	r24, 0x05	; 5
-    3e76:	01 c0       	rjmp	.+2      	; 0x3e7a <main+0x7a>
+    3e7c:	85 e0       	ldi	r24, 0x05	; 5
+    3e7e:	01 c0       	rjmp	.+2      	; 0x3e82 <main+0x82>
       } else {
 	/*
 	 * GET PARAMETER returns a generic 0x03 reply for
          * other parameters - enough to keep Avrdude happy
 	 */
 	putch(0x03);
-    3e78:	83 e0       	ldi	r24, 0x03	; 3
-    3e7a:	83 d0       	rcall	.+262    	; 0x3f82 <putch>
-    3e7c:	7f c0       	rjmp	.+254    	; 0x3f7c <main+0x17c>
+    3e80:	83 e0       	ldi	r24, 0x03	; 3
+    3e82:	80 d0       	rcall	.+256    	; 0x3f84 <putch>
+    3e84:	7c c0       	rjmp	.+248    	; 0x3f7e <main+0x17e>
       }
     }
     else if(ch == STK_SET_DEVICE) {
-    3e7e:	82 34       	cpi	r24, 0x42	; 66
-    3e80:	11 f4       	brne	.+4      	; 0x3e86 <main+0x86>
+    3e86:	82 34       	cpi	r24, 0x42	; 66
+    3e88:	11 f4       	brne	.+4      	; 0x3e8e <main+0x8e>
       // SET DEVICE is ignored
       getNch(20);
-    3e82:	84 e1       	ldi	r24, 0x14	; 20
-    3e84:	03 c0       	rjmp	.+6      	; 0x3e8c <main+0x8c>
+    3e8a:	84 e1       	ldi	r24, 0x14	; 20
+    3e8c:	03 c0       	rjmp	.+6      	; 0x3e94 <main+0x94>
     }
     else if(ch == STK_SET_DEVICE_EXT) {
-    3e86:	85 34       	cpi	r24, 0x45	; 69
-    3e88:	19 f4       	brne	.+6      	; 0x3e90 <main+0x90>
+    3e8e:	85 34       	cpi	r24, 0x45	; 69
+    3e90:	19 f4       	brne	.+6      	; 0x3e98 <main+0x98>
       // SET DEVICE EXT is ignored
       getNch(5);
-    3e8a:	85 e0       	ldi	r24, 0x05	; 5
-    3e8c:	9c d0       	rcall	.+312    	; 0x3fc6 <getNch>
-    3e8e:	76 c0       	rjmp	.+236    	; 0x3f7c <main+0x17c>
+    3e92:	85 e0       	ldi	r24, 0x05	; 5
+    3e94:	98 d0       	rcall	.+304    	; 0x3fc6 <verifySpace+0x10>
+    3e96:	73 c0       	rjmp	.+230    	; 0x3f7e <main+0x17e>
     }
     else if(ch == STK_LOAD_ADDRESS) {
-    3e90:	85 35       	cpi	r24, 0x55	; 85
-    3e92:	79 f4       	brne	.+30     	; 0x3eb2 <main+0xb2>
+    3e98:	85 35       	cpi	r24, 0x55	; 85
+    3e9a:	69 f4       	brne	.+26     	; 0x3eb6 <main+0xb6>
       // LOAD ADDRESS
       uint16_t newAddress;
       newAddress = getch();
-    3e94:	7e d0       	rcall	.+252    	; 0x3f92 <getch>
+    3e9c:	7a d0       	rcall	.+244    	; 0x3f92 <getch>
+    3e9e:	88 2e       	mov	r8, r24
+    3ea0:	99 24       	eor	r9, r9
       newAddress = (newAddress & 0xff) | (getch() << 8);
-    3e96:	e8 2e       	mov	r14, r24
-    3e98:	ff 24       	eor	r15, r15
-    3e9a:	7b d0       	rcall	.+246    	; 0x3f92 <getch>
-    3e9c:	08 2f       	mov	r16, r24
-    3e9e:	10 e0       	ldi	r17, 0x00	; 0
-    3ea0:	10 2f       	mov	r17, r16
-    3ea2:	00 27       	eor	r16, r16
-    3ea4:	0e 29       	or	r16, r14
-    3ea6:	1f 29       	or	r17, r15
+    3ea2:	77 d0       	rcall	.+238    	; 0x3f92 <getch>
+    3ea4:	08 2f       	mov	r16, r24
+    3ea6:	10 e0       	ldi	r17, 0x00	; 0
+    3ea8:	10 2f       	mov	r17, r16
+    3eaa:	00 27       	eor	r16, r16
+    3eac:	08 29       	or	r16, r8
+    3eae:	19 29       	or	r17, r9
 #ifdef RAMPZ
       // Transfer top bit to RAMPZ
       RAMPZ = (newAddress & 0x8000) ? 1 : 0;
 #endif
       newAddress += newAddress; // Convert from word address to byte address
-    3ea8:	00 0f       	add	r16, r16
-    3eaa:	11 1f       	adc	r17, r17
+    3eb0:	00 0f       	add	r16, r16
+    3eb2:	11 1f       	adc	r17, r17
+    3eb4:	63 c0       	rjmp	.+198    	; 0x3f7c <main+0x17c>
       address = newAddress;
       verifySpace();
-    3eac:	84 d0       	rcall	.+264    	; 0x3fb6 <verifySpace>
-    3eae:	78 01       	movw	r14, r16
-    3eb0:	65 c0       	rjmp	.+202    	; 0x3f7c <main+0x17c>
     }
     else if(ch == STK_UNIVERSAL) {
-    3eb2:	86 35       	cpi	r24, 0x56	; 86
-    3eb4:	21 f4       	brne	.+8      	; 0x3ebe <main+0xbe>
+    3eb6:	86 35       	cpi	r24, 0x56	; 86
+    3eb8:	21 f4       	brne	.+8      	; 0x3ec2 <main+0xc2>
       // UNIVERSAL command is ignored
       getNch(4);
-    3eb6:	84 e0       	ldi	r24, 0x04	; 4
-    3eb8:	86 d0       	rcall	.+268    	; 0x3fc6 <getNch>
+    3eba:	84 e0       	ldi	r24, 0x04	; 4
+    3ebc:	84 d0       	rcall	.+264    	; 0x3fc6 <verifySpace+0x10>
       putch(0x00);
-    3eba:	80 e0       	ldi	r24, 0x00	; 0
-    3ebc:	de cf       	rjmp	.-68     	; 0x3e7a <main+0x7a>
+    3ebe:	80 e0       	ldi	r24, 0x00	; 0
+    3ec0:	e0 cf       	rjmp	.-64     	; 0x3e82 <main+0x82>
     }
     /* Write memory, length is big endian and is in bytes */
     else if(ch == STK_PROG_PAGE) {
-    3ebe:	84 36       	cpi	r24, 0x64	; 100
-    3ec0:	09 f0       	breq	.+2      	; 0x3ec4 <main+0xc4>
-    3ec2:	40 c0       	rjmp	.+128    	; 0x3f44 <main+0x144>
+    3ec2:	84 36       	cpi	r24, 0x64	; 100
+    3ec4:	09 f0       	breq	.+2      	; 0x3ec8 <main+0xc8>
+    3ec6:	3f c0       	rjmp	.+126    	; 0x3f46 <main+0x146>
       // PROGRAM PAGE - we support flash programming only, not EEPROM
       uint8_t *bufPtr;
       uint16_t addrPtr;
 
       getch();			/* getlen() */
-    3ec4:	66 d0       	rcall	.+204    	; 0x3f92 <getch>
+    3ec8:	64 d0       	rcall	.+200    	; 0x3f92 <getch>
       length = getch();
-    3ec6:	65 d0       	rcall	.+202    	; 0x3f92 <getch>
-    3ec8:	08 2f       	mov	r16, r24
-      getch();
     3eca:	63 d0       	rcall	.+198    	; 0x3f92 <getch>
+    3ecc:	b8 2e       	mov	r11, r24
+      getch();
+    3ece:	61 d0       	rcall	.+194    	; 0x3f92 <getch>
 
       // If we are in RWW section, immediately start page erase
       if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3ecc:	80 e0       	ldi	r24, 0x00	; 0
-    3ece:	e8 16       	cp	r14, r24
     3ed0:	88 e3       	ldi	r24, 0x38	; 56
-    3ed2:	f8 06       	cpc	r15, r24
-    3ed4:	18 f4       	brcc	.+6      	; 0x3edc <main+0xdc>
-    3ed6:	f7 01       	movw	r30, r14
-    3ed8:	d7 be       	out	0x37, r13	; 55
-    3eda:	e8 95       	spm
-    3edc:	c0 e0       	ldi	r28, 0x00	; 0
-    3ede:	d1 e0       	ldi	r29, 0x01	; 1
+    3ed2:	00 30       	cpi	r16, 0x00	; 0
+    3ed4:	18 07       	cpc	r17, r24
+    3ed6:	18 f4       	brcc	.+6      	; 0x3ede <main+0xde>
+    3ed8:	f8 01       	movw	r30, r16
+    3eda:	f7 be       	out	0x37, r15	; 55
+    3edc:	e8 95       	spm
+    3ede:	81 2c       	mov	r8, r1
+    3ee0:	51 e0       	ldi	r21, 0x01	; 1
+    3ee2:	95 2e       	mov	r9, r21
 
       // While that is going on, read in page contents
       bufPtr = buff;
       do *bufPtr++ = getch();
-    3ee0:	58 d0       	rcall	.+176    	; 0x3f92 <getch>
-    3ee2:	89 93       	st	Y+, r24
+    3ee4:	56 d0       	rcall	.+172    	; 0x3f92 <getch>
+    3ee6:	f4 01       	movw	r30, r8
+    3ee8:	81 93       	st	Z+, r24
+    3eea:	4f 01       	movw	r8, r30
       while (--length);
-    3ee4:	0c 17       	cp	r16, r28
-    3ee6:	e1 f7       	brne	.-8      	; 0x3ee0 <main+0xe0>
+    3eec:	be 16       	cp	r11, r30
+    3eee:	d1 f7       	brne	.-12     	; 0x3ee4 <main+0xe4>
 
       // If we are in NRWW section, page erase has to be delayed until now.
       // Todo: Take RAMPZ into account (not doing so just means that we will
       //  treat the top of both "pages" of flash as NRWW, for a slight speed
       //  decrease, so fixing this is not urgent.)
       if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
-    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
-    3eea:	ef 16       	cp	r14, r31
-    3eec:	f8 e3       	ldi	r31, 0x38	; 56
-    3eee:	ff 06       	cpc	r15, r31
-    3ef0:	18 f0       	brcs	.+6      	; 0x3ef8 <main+0xf8>
-    3ef2:	f7 01       	movw	r30, r14
-    3ef4:	d7 be       	out	0x37, r13	; 55
-    3ef6:	e8 95       	spm
+    3ef0:	f8 e3       	ldi	r31, 0x38	; 56
+    3ef2:	00 30       	cpi	r16, 0x00	; 0
+    3ef4:	1f 07       	cpc	r17, r31
+    3ef6:	18 f0       	brcs	.+6      	; 0x3efe <main+0xfe>
+    3ef8:	f8 01       	movw	r30, r16
+    3efa:	f7 be       	out	0x37, r15	; 55
+    3efc:	e8 95       	spm
 
       // Read command terminator, start reply
       verifySpace();
-    3ef8:	5e d0       	rcall	.+188    	; 0x3fb6 <verifySpace>
+    3efe:	5b d0       	rcall	.+182    	; 0x3fb6 <verifySpace>
 
       // If only a partial page is to be programmed, the erase might not be complete.
       // So check that here
       boot_spm_busy_wait();
-    3efa:	07 b6       	in	r0, 0x37	; 55
-    3efc:	00 fc       	sbrc	r0, 0
-    3efe:	fd cf       	rjmp	.-6      	; 0x3efa <main+0xfa>
-    3f00:	a7 01       	movw	r20, r14
-    3f02:	a0 e0       	ldi	r26, 0x00	; 0
-    3f04:	b1 e0       	ldi	r27, 0x01	; 1
+    3f00:	07 b6       	in	r0, 0x37	; 55
+    3f02:	00 fc       	sbrc	r0, 0
+    3f04:	fd cf       	rjmp	.-6      	; 0x3f00 <main+0x100>
+    3f06:	f8 01       	movw	r30, r16
+    3f08:	a0 e0       	ldi	r26, 0x00	; 0
+    3f0a:	b1 e0       	ldi	r27, 0x01	; 1
       bufPtr = buff;
       addrPtr = (uint16_t)(void*)address;
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
-    3f06:	2c 91       	ld	r18, X
-    3f08:	30 e0       	ldi	r19, 0x00	; 0
+    3f0c:	2c 91       	ld	r18, X
+    3f0e:	30 e0       	ldi	r19, 0x00	; 0
         a |= (*bufPtr++) << 8;
-    3f0a:	11 96       	adiw	r26, 0x01	; 1
-    3f0c:	8c 91       	ld	r24, X
-    3f0e:	11 97       	sbiw	r26, 0x01	; 1
-    3f10:	90 e0       	ldi	r25, 0x00	; 0
-    3f12:	98 2f       	mov	r25, r24
-    3f14:	88 27       	eor	r24, r24
-    3f16:	82 2b       	or	r24, r18
-    3f18:	93 2b       	or	r25, r19
+    3f10:	11 96       	adiw	r26, 0x01	; 1
+    3f12:	8c 91       	ld	r24, X
+    3f14:	11 97       	sbiw	r26, 0x01	; 1
+    3f16:	90 e0       	ldi	r25, 0x00	; 0
+    3f18:	98 2f       	mov	r25, r24
+    3f1a:	88 27       	eor	r24, r24
+    3f1c:	82 2b       	or	r24, r18
+    3f1e:	93 2b       	or	r25, r19
 # define UART_SRL UBRR3L
 # define UART_UDR UDR3
 #endif
 
 /* main program starts here */
 int main(void) {
-    3f1a:	12 96       	adiw	r26, 0x02	; 2
+    3f20:	12 96       	adiw	r26, 0x02	; 2
       ch = SPM_PAGESIZE / 2;
       do {
         uint16_t a;
         a = *bufPtr++;
         a |= (*bufPtr++) << 8;
         __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
-    3f1c:	fa 01       	movw	r30, r20
-    3f1e:	0c 01       	movw	r0, r24
-    3f20:	a7 be       	out	0x37, r10	; 55
-    3f22:	e8 95       	spm
-    3f24:	11 24       	eor	r1, r1
+    3f22:	0c 01       	movw	r0, r24
+    3f24:	e7 be       	out	0x37, r14	; 55
+    3f26:	e8 95       	spm
+    3f28:	11 24       	eor	r1, r1
         addrPtr += 2;
-    3f26:	4e 5f       	subi	r20, 0xFE	; 254
-    3f28:	5f 4f       	sbci	r21, 0xFF	; 255
+    3f2a:	32 96       	adiw	r30, 0x02	; 2
       } while (--ch);
-    3f2a:	f1 e0       	ldi	r31, 0x01	; 1
-    3f2c:	a0 38       	cpi	r26, 0x80	; 128
-    3f2e:	bf 07       	cpc	r27, r31
-    3f30:	51 f7       	brne	.-44     	; 0x3f06 <main+0x106>
+    3f2c:	81 e0       	ldi	r24, 0x01	; 1
+    3f2e:	a0 38       	cpi	r26, 0x80	; 128
+    3f30:	b8 07       	cpc	r27, r24
+    3f32:	61 f7       	brne	.-40     	; 0x3f0c <main+0x10c>
 
       // Write from programming buffer
       __boot_page_write_short((uint16_t)(void*)address);
-    3f32:	f7 01       	movw	r30, r14
-    3f34:	c7 be       	out	0x37, r12	; 55
-    3f36:	e8 95       	spm
+    3f34:	f8 01       	movw	r30, r16
+    3f36:	d7 be       	out	0x37, r13	; 55
+    3f38:	e8 95       	spm
       boot_spm_busy_wait();
-    3f38:	07 b6       	in	r0, 0x37	; 55
-    3f3a:	00 fc       	sbrc	r0, 0
-    3f3c:	fd cf       	rjmp	.-6      	; 0x3f38 <main+0x138>
+    3f3a:	07 b6       	in	r0, 0x37	; 55
+    3f3c:	00 fc       	sbrc	r0, 0
+    3f3e:	fd cf       	rjmp	.-6      	; 0x3f3a <main+0x13a>
 
 #if defined(RWWSRE)
       // Reenable read access to flash
       boot_rww_enable();
-    3f3e:	b7 be       	out	0x37, r11	; 55
-    3f40:	e8 95       	spm
-    3f42:	1c c0       	rjmp	.+56     	; 0x3f7c <main+0x17c>
+    3f40:	c7 be       	out	0x37, r12	; 55
+    3f42:	e8 95       	spm
+    3f44:	1c c0       	rjmp	.+56     	; 0x3f7e <main+0x17e>
 #endif
 
     }
     /* Read memory block mode, length is big endian.  */
     else if(ch == STK_READ_PAGE) {
-    3f44:	84 37       	cpi	r24, 0x74	; 116
-    3f46:	61 f4       	brne	.+24     	; 0x3f60 <main+0x160>
+    3f46:	84 37       	cpi	r24, 0x74	; 116
+    3f48:	61 f4       	brne	.+24     	; 0x3f62 <main+0x162>
       // READ PAGE - we only read flash
       getch();			/* getlen() */
-    3f48:	24 d0       	rcall	.+72     	; 0x3f92 <getch>
-      length = getch();
     3f4a:	23 d0       	rcall	.+70     	; 0x3f92 <getch>
-    3f4c:	08 2f       	mov	r16, r24
+      length = getch();
+    3f4c:	22 d0       	rcall	.+68     	; 0x3f92 <getch>
+    3f4e:	b8 2e       	mov	r11, r24
       getch();
-    3f4e:	21 d0       	rcall	.+66     	; 0x3f92 <getch>
+    3f50:	20 d0       	rcall	.+64     	; 0x3f92 <getch>
 
       verifySpace();
-    3f50:	32 d0       	rcall	.+100    	; 0x3fb6 <verifySpace>
+    3f52:	31 d0       	rcall	.+98     	; 0x3fb6 <verifySpace>
         __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #else
         // read a Flash byte and increment the address
         __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
 #endif
         putch(ch);
-    3f52:	f7 01       	movw	r30, r14
-    3f54:	85 91       	lpm	r24, Z+
-    3f56:	7f 01       	movw	r14, r30
-    3f58:	14 d0       	rcall	.+40     	; 0x3f82 <putch>
+    3f54:	f8 01       	movw	r30, r16
+    3f56:	85 91       	lpm	r24, Z+
+    3f58:	8f 01       	movw	r16, r30
+    3f5a:	14 d0       	rcall	.+40     	; 0x3f84 <putch>
       } while (--length);
-    3f5a:	01 50       	subi	r16, 0x01	; 1
-    3f5c:	d1 f7       	brne	.-12     	; 0x3f52 <main+0x152>
-    3f5e:	0e c0       	rjmp	.+28     	; 0x3f7c <main+0x17c>
+    3f5c:	ba 94       	dec	r11
+    3f5e:	d1 f7       	brne	.-12     	; 0x3f54 <main+0x154>
+    3f60:	0e c0       	rjmp	.+28     	; 0x3f7e <main+0x17e>
     }
 
     /* Get device signature bytes  */
     else if(ch == STK_READ_SIGN) {
-    3f60:	85 37       	cpi	r24, 0x75	; 117
-    3f62:	39 f4       	brne	.+14     	; 0x3f72 <main+0x172>
+    3f62:	85 37       	cpi	r24, 0x75	; 117
+    3f64:	39 f4       	brne	.+14     	; 0x3f74 <main+0x174>
       // READ SIGN - return what Avrdude wants to hear
       verifySpace();
-    3f64:	28 d0       	rcall	.+80     	; 0x3fb6 <verifySpace>
+    3f66:	27 d0       	rcall	.+78     	; 0x3fb6 <verifySpace>
       putch(SIGNATURE_0);
-    3f66:	8e e1       	ldi	r24, 0x1E	; 30
-    3f68:	0c d0       	rcall	.+24     	; 0x3f82 <putch>
+    3f68:	8e e1       	ldi	r24, 0x1E	; 30
+    3f6a:	0c d0       	rcall	.+24     	; 0x3f84 <putch>
       putch(SIGNATURE_1);
-    3f6a:	84 e9       	ldi	r24, 0x94	; 148
-    3f6c:	0a d0       	rcall	.+20     	; 0x3f82 <putch>
+    3f6c:	84 e9       	ldi	r24, 0x94	; 148
+    3f6e:	0a d0       	rcall	.+20     	; 0x3f84 <putch>
       putch(SIGNATURE_2);
-    3f6e:	86 e0       	ldi	r24, 0x06	; 6
-    3f70:	84 cf       	rjmp	.-248    	; 0x3e7a <main+0x7a>
+    3f70:	86 e0       	ldi	r24, 0x06	; 6
+    3f72:	87 cf       	rjmp	.-242    	; 0x3e82 <main+0x82>
     }
     else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
-    3f72:	81 35       	cpi	r24, 0x51	; 81
-    3f74:	11 f4       	brne	.+4      	; 0x3f7a <main+0x17a>
+    3f74:	81 35       	cpi	r24, 0x51	; 81
+    3f76:	11 f4       	brne	.+4      	; 0x3f7c <main+0x17c>
       // Adaboot no-wait mod
       watchdogConfig(WATCHDOG_16MS);
-    3f76:	88 e0       	ldi	r24, 0x08	; 8
-    3f78:	18 d0       	rcall	.+48     	; 0x3faa <watchdogConfig>
+    3f78:	88 e0       	ldi	r24, 0x08	; 8
+    3f7a:	17 d0       	rcall	.+46     	; 0x3faa <watchdogConfig>
       verifySpace();
     }
     else {
       // This covers the response to commands like STK_ENTER_PROGMODE
       verifySpace();
-    3f7a:	1d d0       	rcall	.+58     	; 0x3fb6 <verifySpace>
+    3f7c:	1c d0       	rcall	.+56     	; 0x3fb6 <verifySpace>
     }
     putch(STK_OK);
-    3f7c:	80 e1       	ldi	r24, 0x10	; 16
-    3f7e:	01 d0       	rcall	.+2      	; 0x3f82 <putch>
-    3f80:	6f cf       	rjmp	.-290    	; 0x3e60 <main+0x60>
-
-00003f82 <putch>:
+    3f7e:	80 e1       	ldi	r24, 0x10	; 16
+    3f80:	01 d0       	rcall	.+2      	; 0x3f84 <putch>
   }
+    3f82:	71 cf       	rjmp	.-286    	; 0x3e66 <main+0x66>
+
+00003f84 <putch>:
 }
 
 void putch(char ch) {
-    3f82:	98 2f       	mov	r25, r24
 #ifndef SOFT_UART
   while (!(UART_SRA & _BV(UDRE0)));
-    3f84:	80 91 c0 00 	lds	r24, 0x00C0
-    3f88:	85 ff       	sbrs	r24, 5
-    3f8a:	fc cf       	rjmp	.-8      	; 0x3f84 <putch+0x2>
+    3f84:	90 91 c0 00 	lds	r25, 0x00C0
+    3f88:	95 ff       	sbrs	r25, 5
+    3f8a:	fc cf       	rjmp	.-8      	; 0x3f84 <putch>
   UART_UDR = ch;
-    3f8c:	90 93 c6 00 	sts	0x00C6, r25
+    3f8c:	80 93 c6 00 	sts	0x00C6, r24
       [uartBit] "I" (UART_TX_BIT)
     :
       "r25"
@@ -546,41 +552,41 @@ void verifySpace() {
   }
   putch(STK_INSYNC);
     3fc2:	84 e1       	ldi	r24, 0x14	; 20
+    3fc4:	df cf       	rjmp	.-66     	; 0x3f84 <putch>
 }
-    3fc4:	de cf       	rjmp	.-68     	; 0x3f82 <putch>
+    3fc6:	cf 93       	push	r28
 
-00003fc6 <getNch>:
+00003fc8 <getNch>:
     ::[count] "M" (UART_B_VALUE)
   );
 }
 #endif
 
 void getNch(uint8_t count) {
-    3fc6:	1f 93       	push	r17
-    3fc8:	18 2f       	mov	r17, r24
-  do getch(); while (--count);
+    3fc8:	c8 2f       	mov	r28, r24
     3fca:	e3 df       	rcall	.-58     	; 0x3f92 <getch>
-    3fcc:	11 50       	subi	r17, 0x01	; 1
-    3fce:	e9 f7       	brne	.-6      	; 0x3fca <getNch+0x4>
-  verifySpace();
+  do getch(); while (--count);
+    3fcc:	c1 50       	subi	r28, 0x01	; 1
+    3fce:	e9 f7       	brne	.-6      	; 0x3fca <getNch+0x2>
     3fd0:	f2 df       	rcall	.-28     	; 0x3fb6 <verifySpace>
+  verifySpace();
+    3fd2:	cf 91       	pop	r28
 }
-    3fd2:	1f 91       	pop	r17
     3fd4:	08 95       	ret
 
 00003fd6 <appStart>:
+    3fd6:	28 2e       	mov	r2, r24
 
 void appStart(uint8_t rstFlags) {
   // save the reset flags in the designated register
   //  This can be saved in a main program by putting code in .init0 (which
   //  executes before normal c init code) to save R2 to a global variable.
   __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
-    3fd6:	28 2e       	mov	r2, r24
+    3fd8:	80 e0       	ldi	r24, 0x00	; 0
 
   watchdogConfig(WATCHDOG_OFF);
-    3fd8:	80 e0       	ldi	r24, 0x00	; 0
     3fda:	e7 df       	rcall	.-50     	; 0x3faa <watchdogConfig>
-  __asm__ __volatile__ (
     3fdc:	ee 27       	eor	r30, r30
+  __asm__ __volatile__ (
     3fde:	ff 27       	eor	r31, r31
     3fe0:	09 94       	ijmp
